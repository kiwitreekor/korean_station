divert(-1)
include(sprites/kws.m4)
include(sprites/kws_func.nfx)
divert

define({file_index}, 1)

include(sprites/lang/english.nfx)
include(sprites/lang/korean.nfx)

setfeature(_STATION)
setpath(sprites/gfx)

textmode_on()
grfinit(GRFID_KWS_PART1,
	grfname(STR_GRF_NAME)
	grfdescription(STR_GRF_DESC)
	grfurl(ALL, {"https://github.com/kiwitreekor/korean_station/"})
	grfversion(GRF_VERSION)
	grfminversion(GRF_MIN_VERSION)
	
	grfparameter(
		grfsetting(
			settype(ENUM,PARAM_MODE,0,32)
			setname(STR_PARAM_MODE_NAME)
			setdescription(STR_PARAM_MODE_DESC)
			setdefault(0)
			setlimits(0,1)
			setvalues(
				menuvalue(0,STR_PARAM_MODE_LIST_NORMAL)
				menuvalue(1,STR_PARAM_MODE_LIST_HIGHPLATFORMS)
			)
		)
		grfsetting(
			settype(BOOL,PARAM_FLAGS,PARAM_FLAGS_PSDSFX,1)
			setname(STR_PARAM_PSDSFX_NAME)
			setdescription(STR_PARAM_PSDSFX_DESC)
			setdefault(1)
		)
		grfsetting(
			settype(BOOL,PARAM_FLAGS,PARAM_FLAGS_PASSENGER,1)
			setname(STR_PARAM_PASSENGER_NAME)
			setdescription(STR_PARAM_PASSENGER_DESC)
			setdefault(1)
		)
		grfsetting(
			settype(BOOL,PARAM_FLAGS,PARAM_FLAGS_SHADOW,1)
			setname(STR_PARAM_SHADOW_NAME)
			setdescription(STR_PARAM_SHADOW_DESC)
			setdefault(1)
		)
		grfsetting(
			settype(BOOL,PARAM_FLAGS,PARAM_FLAGS_SNOW,1)
			setname(STR_PARAM_SNOW_NAME)
			setdescription(STR_PARAM_SNOW_DESC)
			setdefault(1)
		)
		grfsetting(
			settype(BOOL,PARAM_FLAGS,PARAM_FLAGS_BRIDGE,1)
			setname(STR_PARAM_BRIDGE_NAME)
			setdescription(STR_PARAM_BRIDGE_DESC)
			setdefault(0)
		)
		grfsetting(
			settype(ENUM,PARAM_ROOF_COLOUR,0,5)
			setname(STR_PARAM_ROOF_COLOUR_NAME)
			setdescription(STR_PARAM_ROOF_COLOUR_DESC)
			setdefault(9)
			setlimits(0,16)
			setvalues(
				menuvalue(0,STR_PARAM_ROOF_COLOUR_CC)
				menuvalue(1,STR_PARAM_ROOF_COLOUR_DBLUE)
				menuvalue(2,STR_PARAM_ROOF_COLOUR_PGREEN)
				menuvalue(3,STR_PARAM_ROOF_COLOUR_PINK)
				menuvalue(4,STR_PARAM_ROOF_COLOUR_YELLOW)
				menuvalue(5,STR_PARAM_ROOF_COLOUR_RED)
				menuvalue(6,STR_PARAM_ROOF_COLOUR_LBLUE)
				menuvalue(7,STR_PARAM_ROOF_COLOUR_GREEN)
				menuvalue(8,STR_PARAM_ROOF_COLOUR_DGREEN)
				menuvalue(9,STR_PARAM_ROOF_COLOUR_BLUE)
				menuvalue(10,STR_PARAM_ROOF_COLOUR_CREAM)
				menuvalue(11,STR_PARAM_ROOF_COLOUR_MAUVE)
				menuvalue(12,STR_PARAM_ROOF_COLOUR_PURPLE)
				menuvalue(13,STR_PARAM_ROOF_COLOUR_ORANGE)
				menuvalue(14,STR_PARAM_ROOF_COLOUR_BROWN)
				menuvalue(15,STR_PARAM_ROOF_COLOUR_GREY)
				menuvalue(16,STR_PARAM_ROOF_COLOUR_WHITE)
			)
		)
	)
	
	feature_test(
		feature(STAT_BRIDGES)
		feature_version(1)
	)
	feature_propertymapping(
		mapping(STAT_BRIDGES, {bridge_height})
		fallback(0)
	)
)

textmode_off()
asl_on()

getothergrfparameter(PARAM_VERSION, GRFID_KWS_PART2, VERSION)

skipif(1, GRFACTIVE, --, GRFID_KWS_PART2)
skipif(1, getowngrfparameter(PARAM_VERSION), ==, GRF_VERSION)
error(FATAL, ALL, 04, "kws2.grf")

include(sprites/sprites.nfx)

include({sprites/kws_common.nfx})
include({sprites/layouts/layout.nfx})
deflabel(LABEL_HIGHPLATFORM_MODE)

// platforms

forloop(X, {
definestation(X, "",
	class(CLASS_PLATFORMS)
	callbacks({CB_LAYOUT})
	setcargotriggers({PASS})
)}, PLATFORM_START .. PLATFORM_END)


definestation(VOID_TILE, "",
	class(CLASS_PLATFORMS)
	setcargotriggers({PASS})
	pylons(TTD_ALLTILES)
	callbacks({CB_LAYOUT})
)

layout(HP_A, LAYOUT_HP_A)
layout(HP_B, LAYOUT_HP_B)
layout(HP_C, LAYOUT_HP_C)

layout(HP_A_RF_A, LAYOUT_HP_A_RF_A)
layout(HP_B_RF_A, LAYOUT_HP_B_RF_A)
layout(HP_C_RF_A, LAYOUT_HP_C_RF_A)

layout(HP_A_RF_B, LAYOUT_HP_A_RF_B)
layout(HP_B_RF_B, LAYOUT_HP_B_RF_B)
layout(HP_C_RF_B, LAYOUT_HP_C_RF_B)

layout(LP_A, LAYOUT_LP_A)
layout(LP_B, LAYOUT_LP_B)
layout(LP_C, LAYOUT_LP_C)

layout(LP_A_RF_A, LAYOUT_LP_A_RF_A)
layout(LP_B_RF_A, LAYOUT_LP_B_RF_A)
layout(LP_C_RF_A, LAYOUT_LP_C_RF_A)

layout(LP_A_RF_B, LAYOUT_LP_A_RF_B)
layout(LP_B_RF_B, LAYOUT_LP_B_RF_B)
layout(LP_C_RF_B, LAYOUT_LP_C_RF_B)

layout(LAP_A, LAYOUT_LAP_A)
layout(LAP_B, LAYOUT_LAP_B)
layout(LAP_C, LAYOUT_LAP_C)

layout(LAP_A_RF_A, LAYOUT_LAP_A_RF_A)
layout(LAP_B_RF_A, LAYOUT_LAP_B_RF_A)
layout(LAP_C_RF_A, LAYOUT_LAP_C_RF_A)

layout(LAP_A_RF_B, LAYOUT_LAP_A_RF_B)
layout(LAP_B_RF_B, LAYOUT_LAP_B_RF_B)
layout(LAP_C_RF_B, LAYOUT_LAP_C_RF_B)

layout(VOID_TILE, LAYOUT_VOID)

// seoul station detection
def({sw_platform_get_frame2}) anim_frame(pos(0,1),
	cbr(4) if(0x80)
	cbr(0) else
)

def({sw_platform_get_frame}) anim_frame(pos(0,-1),
	cbr(4) if(0x80)
	cbr(0) else
)

def({sw_platform_normal_layout2_2}) tinfo_statid(pos(0, 1), shiftmask(0, 0x3FF),
	ref(sw_platform_get_frame2) if(0x200+SEOUL_STATION_PART3A_HP_A .. 0x200+SEOUL_STATION_PART3A_TRACK)
	ref(sw_platform_layout) else
)

def({sw_platform_normal_layout2_1}) tinfo_grfid(pos(0, 1),
	ref(sw_platform_normal_layout2_2) if(label(GRFID_KWS_PART2))
	ref(sw_platform_layout) else
)

def({sw_platform_normal_layout1_2}) tinfo_statid(pos(0, -1), shiftmask(0, 0x3FF),
	ref(sw_platform_get_frame) if(0x200+SEOUL_STATION_PART3B_HP_A .. 0x200+SEOUL_STATION_PART3B_TRACK)
	ref(sw_platform_normal_layout2_1) else
)

def({sw_platform_normal_layout}) tinfo_grfid(pos(0, -1),
	ref(sw_platform_normal_layout1_2) if(label(GRFID_KWS_PART2))
	ref(sw_platform_normal_layout2_1) else
)

def({sw_platformA_plain_multi_layout}) calculate({subroutine(sw_platformA_check_opposite) * 6 + subroutine(sw_platform_normal_layout)},
	cbfail() else
)

def({sw_platformB_plain_multi_layout}) calculate({subroutine(sw_platformB_check_opposite) * 6 + subroutine(sw_platform_normal_layout)},
	cbfail() else
)

def({sw_platform_plain_multi_layout}) subroutine(sw_platform_multi_check,
	ref(sw_platformA_plain_multi_layout) if(1)
	ref(sw_platformB_plain_multi_layout) if(2)
	ref(sw_platform_layout) else
)

def({sw_platform_plain_multi_cb}) callback(
	ref(sw_platform_plain_multi_layout) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

forloop(X, {makestation(X, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_plain_multi_cb)))}, HP_A .. HP_C)
forloop(X, {makestation(X, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_multi_cb)))}, HP_A_RF_A .. HP_C_RF_B)

skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
forloop(X, {makestation(X, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_plain_multi_cb)))}, LP_A .. LP_C)
forloop(X, {makestation(X, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_multi_cb)))}, LP_A_RF_A .. LP_C_RF_B)
forloop(X, {makestation(X, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_plain_multi_cb)))}, LAP_A .. LAP_C)
forloop(X, {makestation(X, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_multi_cb)))}, LAP_A_RF_A .. LAP_C_RF_B)
placelabel(LABEL_HIGHPLATFORM_MODE)

makestation(VOID_TILE, default(ref(sw_platform_cb)))

// crossings

forloop(X, {
definestation(X, "",
	class(CLASS_CROSSINGS)
	callbacks({CB_LAYOUT, CB_AFRAME})
	setcargotriggers({PASS})
	anim_triggers({BUILT})
)}, CROSSING_LP_A .. CROSSING_LAP_C_RF_B)

layout(CROSSING_LP_A, CROSSING_LAYOUT_LP_A)
layout(CROSSING_LP_B, CROSSING_LAYOUT_LP_B)
layout(CROSSING_LP_C, CROSSING_LAYOUT_LP_C)

layout(CROSSING_LP_A_RF_A, CROSSING_LAYOUT_LP_A_RF_A)
layout(CROSSING_LP_B_RF_A, CROSSING_LAYOUT_LP_B_RF_A)
layout(CROSSING_LP_C_RF_A, CROSSING_LAYOUT_LP_C_RF_A)

layout(CROSSING_LP_A_RF_B, CROSSING_LAYOUT_LP_A_RF_B)
layout(CROSSING_LP_B_RF_B, CROSSING_LAYOUT_LP_B_RF_B)
layout(CROSSING_LP_C_RF_B, CROSSING_LAYOUT_LP_C_RF_B)

layout(CROSSING_LAP_A, CROSSING_LAYOUT_LAP_A)
layout(CROSSING_LAP_B, CROSSING_LAYOUT_LAP_B)
layout(CROSSING_LAP_C, CROSSING_LAYOUT_LAP_C)

layout(CROSSING_LAP_A_RF_A, CROSSING_LAYOUT_LAP_A_RF_A)
layout(CROSSING_LAP_B_RF_A, CROSSING_LAYOUT_LAP_B_RF_A)
layout(CROSSING_LAP_C_RF_A, CROSSING_LAYOUT_LAP_C_RF_A)

layout(CROSSING_LAP_A_RF_B, CROSSING_LAYOUT_LAP_A_RF_B)
layout(CROSSING_LAP_B_RF_B, CROSSING_LAYOUT_LAP_B_RF_B)
layout(CROSSING_LAP_C_RF_B, CROSSING_LAYOUT_LAP_C_RF_B)

def({sw_crossing_pos_sub2}) plt_posrev(
	cbr(2) if(0)
	cbr(0) else
)

def({sw_crossing_pos_sub1}) plt_pos(
	cbr(4) if(0)
	ref(sw_crossing_pos_sub2) else
)

def({sw_crossing_pos}) plt_length(
	cbr(0) if(1)
	ref(sw_crossing_pos_sub1) else
)

def({sw_crossing_layout}) calculate({subroutine(sw_terrain_snow) * 6 + subroutine(sw_crossing_pos)},
	cbfail() else
)

// multi-platform calculation
def({sw_crossing_platformA_multi_layout}) calculate({subroutine(sw_platformA_check_opposite) * 12 + subroutine(sw_crossing_layout)},
	cbfail() else
)

def({sw_crossing_platformB_multi_layout}) calculate({subroutine(sw_platformB_check_opposite) * 12 + subroutine(sw_crossing_layout)},
	cbfail() else
)

def({sw_crossing_multi_layout}) subroutine(sw_platform_multi_check,
	ref(sw_crossing_platformA_multi_layout) if(1)
	ref(sw_crossing_platformB_multi_layout) if(2)
	ref(sw_crossing_layout) else
)

def({sw_crossing_cb}) callback(
	ref(sw_crossing_multi_layout) if(CB_LAYOUT)
	ref(sw_crossing_pos) if(CB_ACONTROL, CB_AFRAME)
	ref(sw_set_registers) else
)

def({sw_crossing_cb_purchase}) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_crossing_cb) else
)

skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
forloop(X, {makestation(X, link(ref(sw_crossing_cb_purchase), MENU) default(ref(sw_crossing_cb)))}, CROSSING_LP_A .. CROSSING_LAP_C_RF_B)
placelabel(LABEL_HIGHPLATFORM_MODE)


definestation(CROSSING_TRACK, "",
	class(CLASS_CROSSINGS)
	setcargotriggers({PASS})
	callbacks({CB_LAYOUT, CB_AFRAME})
	anim_triggers(BUILT, PERIODIC)
)

layout(CROSSING_TRACK, CROSSING_LAYOUT_TRACK)

def({sw_crossing_track_get_frame}) anim_frame(pos(0,-1),
	cbr(0) if(0)
	cbr(2) if(2)
	cbr(4) else
)

def({sw_crossing_track_layout}) tinfo_statid(pos(0,-1),shiftmask(0,0x3FF),
	ref(sw_crossing_track_get_frame) if(0x100+CROSSING_START .. 0x100+CROSSING_END, 0x200+CROSSING_HIGH_START .. 0x200+CROSSING_HIGH_END)
	cbr(0) else
)

def({sw_crossing_track_cb}) callback(
	ref(sw_crossing_track_layout) if(CB_LAYOUT, CB_ACONTROL, CB_AFRAME)
	ref(sw_set_registers) else
)

def({sw_crossing_track_purchase}) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_set_registers) else
)
makestation(CROSSING_TRACK, link(ref(sw_crossing_track_purchase), MENU) default(ref(sw_crossing_track_cb)))

// building blocks
forloop(X, {
definestation(X, "",
	class(CLASS_MODULAR)
	nontrack(TTD_ALLTILES)
	nowires(TTD_ALLTILES)
)}, MODULAR_LOW .. MODULAR_HIGH)

layout(MODULAR_LOW, LAYOUT_MODULAR_LOW)
layout(MODULAR_HIGH, LAYOUT_MODULAR_HIGH)

def({sw_building_nearby_info_parallel}) calculate({register(REGISTER_BUILDING_POS) RESTORE tinfo_statid(REGISTER,) AND 0x800},
	cbr(2) if(0x800)
	cbr(1) else
)

def({sw_building_nearby_info_part1}) calculate({register(REGISTER_BUILDING_POS) RESTORE tinfo_statid(REGISTER,) AND 0xFF},
	ref(sw_building_nearby_info_parallel) if(MODULAR_LOW .. MODULAR_HIGH)
	cbr(0) else
)

def({sw_building_nearby_info}) calculate({register(REGISTER_BUILDING_POS) RESTORE tinfo_grfid(REGISTER,)},
	ref(sw_building_nearby_info_part1) if(label(GRFID_KWS_PART1))
	cbr(0) else
)

def({sw_building_register_sub_snow}) subroutine(sw_terrain_snow,
	cbr(spr_building_low_snow - spr_building_low) if(1)
	cbr(0) else
)

def({sw_building_layout_single_sub3_1}) calculate({0xFF store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(7) if(1,2)
	cbr(8) else
)

def({sw_building_layout_single_sub3_2}) tinfo_trackexist(0x3,
	cbr(4) if(1)
	cbr(3) if(2)
	cbr(1) else
)

def({sw_building_layout_single_sub3}) calculate({0xF0 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(10) if(1)
	ref(sw_building_layout_single_sub3_1) if(2)
	ref(sw_building_layout_single_sub3_2) else
)

def({sw_building_layout_single_sub2_4}) calculate({0x11 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(1) if(1,2)
	ref(6) else
)

def({sw_building_layout_single_sub2_8}) tinfo_trackexist(0x3,
	cbr(1) if(2)
	cbr(4) else
)

def({sw_building_layout_single_sub2_3}) calculate({0x11 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	ref(sw_building_layout_single_sub2_8) if(1,2)
	cbr(6) else
)

def({sw_building_layout_single_sub2_2}) calculate({0x0F store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	ref(sw_building_layout_single_sub2_4) if(1,2)
	ref(sw_building_layout_single_sub2_3) else
)

def({sw_building_layout_single_sub2_9}) calculate({0x0F store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(1) if(1,2)
	cbr(4) else
)

def({sw_building_layout_single_sub2_7}) tinfo_trackexist(0x3,
	ref(sw_building_layout_single_sub2_9) if(1)
	cbr(3) else
)

def({sw_building_layout_single_sub2_1}) calculate({0x01 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	ref(sw_building_layout_single_sub2_2) if(1,2)
	ref(sw_building_layout_single_sub2_7) else
)

def({sw_building_layout_single_sub2_6}) calculate({0x1F store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(10) if(1,2)
	cbr(9) else
)

def({sw_building_layout_single_sub2_5}) calculate({0x11 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	ref(sw_building_layout_single_sub2_6) if(1,2)
	cbr(6) else
)

def({sw_building_layout_single_sub2}) calculate({0xF0 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	ref(sw_building_layout_single_sub2_5) if(1)
	cbr(10) if(2)
	ref(sw_building_layout_single_sub2_1) else
)

def({sw_building_layout_single_sub1_9}) tinfo_trackexist(0x3,
	cbr(0) if(2)
	cbr(5) else
)

def({sw_building_layout_single_sub1_2}) calculate({0x0F store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(0) if(1,2)
	ref(sw_building_layout_single_sub1_9) else
)

def({sw_building_layout_single_sub1_10}) tinfo_trackexist(0x3,
	cbr(0) if(2)
	cbr(5) else
)

def({sw_building_layout_single_sub1_5}) calculate({0xF1 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	ref(sw_building_layout_single_sub1_10) if(2)
	cbr(0) else
)

def({sw_building_layout_single_sub1_7}) tinfo_trackexist(0x3,
	cbr(0) if(2)
	ref(sw_building_layout_single_sub1_5) else
)

def({sw_building_layout_single_sub1_6}) calculate({0x0F store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(0) if(1,2)
	ref(sw_building_layout_single_sub1_5) else
)

def({sw_building_layout_single_sub1_8}) calculate({0x0F store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(0) if(1,2)
	cbr(5) else
)

def({sw_building_layout_single_sub1_4}) tinfo_trackexist(0x3,
	ref(sw_building_layout_single_sub1_8) if(1)
	cbr(2) else
)

def({sw_building_layout_single_sub1_1}) calculate({0x01 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	ref(sw_building_layout_single_sub1_2) if(1)
	ref(sw_building_layout_single_sub1_6) if(2)
	ref(sw_building_layout_single_sub1_4) else
)

def({sw_building_layout_single_sub1_3}) tinfo_trackexist(0x3,
	cbr(5) if(1)
	cbr(2) if(2)
	cbr(0) else
)

def({sw_building_layout_single_sub1}) calculate({0xF0 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	ref(sw_building_layout_single_sub1_1) if(2)
	ref(sw_building_layout_single_sub1_3) else
)

def({sw_building_layout_single}) calculate({0x10 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	ref(sw_building_layout_single_sub3) if(1)
	ref(sw_building_layout_single_sub2) if(2)
	ref(sw_building_layout_single_sub1) else
)

def({sw_building_layout_front_sub1_1}) calculate({0x1F store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(10) if(1,2)
	cbr(9) else
)

def({sw_building_layout_front_sub1}) calculate({0x11 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	ref(sw_building_layout_front_sub1_1) if(1,2)
	cbr(6) else
)

def({sw_building_layout_front}) calculate({0x10 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(10) if(1)
	ref(sw_building_layout_front_sub1) if(2)
	cbr(0) else
)

def({sw_building_layout_back_sub1_1}) calculate({0xFF store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(10) if(1,2)
	cbr(8) else
)

def({sw_building_layout_back_sub1}) calculate({0xF1 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	ref(sw_building_layout_back_sub1_1) if(1,2)
	cbr(7) else
)

def({sw_building_layout_back}) calculate({0xF0 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(10) if(1)
	ref(sw_building_layout_back_sub1) if(2)
	cbr(1) else
)

def({sw_building_layout}) tinfo_trackexist(0xC,
	ref(sw_building_layout_back) if(0x4)
	ref(sw_building_layout_front) if(0x8)
	cbr(10) if(0xC)
	ref(sw_building_layout_single) else
)

def({sw_building_x_layout_sub}) subroutine(sw_building_layout,
	cbr(0) if(0)
	cbr(2) if(1)
	cbr(4) if(2)
	cbr(5) if(3)
	cbr(6) if(4)
	cbr(7) if(5)
	cbr(8) if(6)
	cbr(9) if(7)
	cbr(10) if(8)
	cbr(11) if(9)
	cbr(12) if(10)
	cbr(0) else
)

def({sw_building_y_layout_sub}) subroutine(sw_building_layout,
	cbr(1) if(0)
	cbr(3) if(1)
	cbr(4) if(2)
	cbr(7) if(3)
	cbr(6) if(4)
	cbr(5) if(5)
	cbr(8) if(6)
	cbr(11) if(7)
	cbr(10) if(8)
	cbr(9) if(9)
	cbr(13) if(10)
	cbr(0) else
)

def({sw_building_ground_x_register_sub2}) subroutine(sw_building_layout,
	cbr(2) if(0)
	cbr(4) if(1)
	cbr(6) if(2)
	cbr(7) if(3)
	cbr(8) if(4)
	cbr(9) if(5)
	cbr(10) if(6)
	cbr(11) if(7)
	cbr(12) if(8)
	cbr(13) if(9)
	cbr(0) else
)

def({sw_building_ground_y_register_sub2}) subroutine(sw_building_layout,
	cbr(3) if(0)
	cbr(5) if(1)
	cbr(6) if(2)
	cbr(9) if(3)
	cbr(8) if(4)
	cbr(7) if(5)
	cbr(10) if(6)
	cbr(13) if(7)
	cbr(12) if(8)
	cbr(11) if(9)
	cbr(0) else
)

def({sw_building_ground_x_register_sub}) subroutine(sw_terrain_snow,
	ref(sw_building_ground_x_register_sub2) if(1)
	cbr(0) else
)

def({sw_building_ground_y_register_sub}) subroutine(sw_terrain_snow,
	ref(sw_building_ground_y_register_sub2) if(1)
	cbr(0) else
)

def({sw_building_x_register_sub}) calculate({subroutine(sw_building_x_layout_sub) + subroutine(sw_building_register_sub_snow)},
	cbfail() else
)

def({sw_building_y_register_sub}) calculate({subroutine(sw_building_y_layout_sub) + subroutine(sw_building_register_sub_snow)},
	cbfail() else
)

def({sw_building_ground_register}) setregisters(REGISTER_MODULAR_GROUND_OFFSET, {sub(sw_building_ground_x_register_sub), sub(sw_building_ground_y_register_sub)}, ref(sw_set_registers))
def({sw_building_registers}) setregisters(REGISTER_MODULAR_OFFSET, {sub(sw_building_x_register_sub), sub(sw_building_y_register_sub)}, ref(sw_building_ground_register))

def({sw_building_ground_register_purchase}) setregisters(REGISTER_MODULAR_GROUND_OFFSET, {0, 0}, ref(sw_set_registers))
def({sw_building_registers_purchase}) setregisters(REGISTER_MODULAR_OFFSET, {0, 1}, ref(sw_building_ground_register_purchase))

// spriteset links
forloop(X, {makestation(X, link(ref(sw_building_registers_purchase), MENU) default(ref(sw_building_registers)))}, MODULAR_LOW .. MODULAR_HIGH)

// modular station overpasses
forloop(X, {
definestation(X, "",
	class(CLASS_MODULAR)
	callbacks({CB_LAYOUT})
	setcargotriggers({PASS})
)}, MODULAR_LOW_HP_A .. MODULAR_HIGH_TRACK)


layout(MODULAR_LOW_HP_A, LAYOUT_MODULAR_LOW_HP_A)
layout(MODULAR_LOW_HP_B, LAYOUT_MODULAR_LOW_HP_B)
layout(MODULAR_LOW_HP_C, LAYOUT_MODULAR_LOW_HP_C)

layout(MODULAR_HIGH_HP_A, LAYOUT_MODULAR_HIGH_HP_A)
layout(MODULAR_HIGH_HP_B, LAYOUT_MODULAR_HIGH_HP_B)
layout(MODULAR_HIGH_HP_C, LAYOUT_MODULAR_HIGH_HP_C)

layout(MODULAR_LOW_LP_A, LAYOUT_MODULAR_LOW_LP_A)
layout(MODULAR_LOW_LP_B, LAYOUT_MODULAR_LOW_LP_B)
layout(MODULAR_LOW_LP_C, LAYOUT_MODULAR_LOW_LP_C)

layout(MODULAR_HIGH_LP_A, LAYOUT_MODULAR_HIGH_LP_A)
layout(MODULAR_HIGH_LP_B, LAYOUT_MODULAR_HIGH_LP_B)
layout(MODULAR_HIGH_LP_C, LAYOUT_MODULAR_HIGH_LP_C)

layout(MODULAR_LOW_LAP_A, LAYOUT_MODULAR_LOW_LAP_A)
layout(MODULAR_LOW_LAP_B, LAYOUT_MODULAR_LOW_LAP_B)
layout(MODULAR_LOW_LAP_C, LAYOUT_MODULAR_LOW_LAP_C)

layout(MODULAR_HIGH_LAP_A, LAYOUT_MODULAR_HIGH_LAP_A)
layout(MODULAR_HIGH_LAP_B, LAYOUT_MODULAR_HIGH_LAP_B)
layout(MODULAR_HIGH_LAP_C, LAYOUT_MODULAR_HIGH_LAP_C)

layout(MODULAR_LOW_TRACK, LAYOUT_MODULAR_LOW_TRACK)
layout(MODULAR_HIGH_TRACK, LAYOUT_MODULAR_HIGH_TRACK)

def({sw_modular_overpass_cb}) callback(
	ref(sw_modular_overpass_multi_layout) if(CB_LAYOUT)
	ref(sw_modular_overpass_register) else
)

def({sw_modular_overpass_cb_purchase}) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_modular_overpass_purchase) else
)

forloop(X, {makestation(X, link(ref(sw_modular_overpass_cb_purchase), MENU) default(ref(sw_modular_overpass_cb)))}, MODULAR_LOW_HP_A .. MODULAR_HIGH_HP_C)

skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, link(ref(sw_modular_overpass_cb_purchase), MENU) default(ref(sw_modular_overpass_cb)))}, MODULAR_LOW_LP_A .. MODULAR_HIGH_LAP_C)
placelabel(LABEL_HIGHPLATFORM_MODE)

forloop(X, {makestation(X, link(ref(sw_modular_overpass_cb_purchase), MENU) default(ref(sw_modular_overpass_cb)))}, MODULAR_LOW_TRACK .. MODULAR_HIGH_TRACK)

// non-track tiles
forloop(X, {
definestation(X, "",
	class(CLASS_NONTRACK)
	callbacks({CB_LAYOUT})
	setcargotriggers({PASS})
	nontrack(TTD_ALLTILES)
	nowires(TTD_ALLTILES)
)}, NONTRACK_START .. NONTRACK_END)

layout(HP_NONTRACK, LAYOUT_HP_NONTRACK)
layout(HP_NONTRACK_RF_A, LAYOUT_HP_NONTRACK_RF_A)
layout(HP_NONTRACK_RF_B, LAYOUT_HP_NONTRACK_RF_B)

layout(LP_NONTRACK, LAYOUT_LP_NONTRACK)
layout(LP_NONTRACK_RF_A, LAYOUT_LP_NONTRACK_RF_A)
layout(LP_NONTRACK_RF_B, LAYOUT_LP_NONTRACK_RF_B)

layout(LAP_NONTRACK, LAYOUT_LAP_NONTRACK)
layout(LAP_NONTRACK_RF_A, LAYOUT_LAP_NONTRACK_RF_A)
layout(LAP_NONTRACK_RF_B, LAYOUT_LAP_NONTRACK_RF_B)

forloop(X, {makestation(X, default(ref(sw_set_registers)))}, HP_NONTRACK .. HP_NONTRACK_RF_B)

skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, default(ref(sw_set_registers)))}, LP_NONTRACK .. LAP_NONTRACK_RF_B)
placelabel(LABEL_HIGHPLATFORM_MODE)


// overpasses
forloop(X, {
definestation(X, "",
	class(CLASS_PLATFORMS)
	callbacks({CB_LAYOUT})
	include_lengths({1,2,3})
	setcargotriggers({PASS})
)}, OVERPASS_START .. OVERPASS_END)

definestation(OVERPASS_TRACK, {"", ""},
	class(CLASS_PLATFORMS, CLASS_WAYPOINT)
	callbacks({CB_LAYOUT}, {CB_LAYOUT})
	include_lengths(1, 1)
)

layout(OVERPASS_HP_A, LAYOUT_OVERPASS_HP_A)
layout(OVERPASS_HP_B, LAYOUT_OVERPASS_HP_B)
layout(OVERPASS_HP_C, LAYOUT_OVERPASS_HP_C)
layout(OVERPASS_HP_A_RF_A, LAYOUT_OVERPASS_HP_A_RF_A)
layout(OVERPASS_HP_B_RF_A, LAYOUT_OVERPASS_HP_B_RF_A)
layout(OVERPASS_HP_C_RF_A, LAYOUT_OVERPASS_HP_C_RF_A)
layout(OVERPASS_HP_A_RF_B, LAYOUT_OVERPASS_HP_A_RF_B)
layout(OVERPASS_HP_B_RF_B, LAYOUT_OVERPASS_HP_B_RF_B)
layout(OVERPASS_HP_C_RF_B, LAYOUT_OVERPASS_HP_C_RF_B)
layout(OVERPASS_LP_A, LAYOUT_OVERPASS_LP_A)
layout(OVERPASS_LP_B, LAYOUT_OVERPASS_LP_B)
layout(OVERPASS_LP_C, LAYOUT_OVERPASS_LP_C)
layout(OVERPASS_LP_A_RF_A, LAYOUT_OVERPASS_LP_A_RF_A)
layout(OVERPASS_LP_B_RF_A, LAYOUT_OVERPASS_LP_B_RF_A)
layout(OVERPASS_LP_C_RF_A, LAYOUT_OVERPASS_LP_C_RF_A)
layout(OVERPASS_LP_A_RF_B, LAYOUT_OVERPASS_LP_A_RF_B)
layout(OVERPASS_LP_B_RF_B, LAYOUT_OVERPASS_LP_B_RF_B)
layout(OVERPASS_LP_C_RF_B, LAYOUT_OVERPASS_LP_C_RF_B)
layout(OVERPASS_LAP_A, LAYOUT_OVERPASS_LAP_A)
layout(OVERPASS_LAP_B, LAYOUT_OVERPASS_LAP_B)
layout(OVERPASS_LAP_C, LAYOUT_OVERPASS_LAP_C)
layout(OVERPASS_LAP_A_RF_A, LAYOUT_OVERPASS_LAP_A_RF_A)
layout(OVERPASS_LAP_B_RF_A, LAYOUT_OVERPASS_LAP_B_RF_A)
layout(OVERPASS_LAP_C_RF_A, LAYOUT_OVERPASS_LAP_C_RF_A)
layout(OVERPASS_LAP_A_RF_B, LAYOUT_OVERPASS_LAP_A_RF_B)
layout(OVERPASS_LAP_B_RF_B, LAYOUT_OVERPASS_LAP_B_RF_B)
layout(OVERPASS_LAP_C_RF_B, LAYOUT_OVERPASS_LAP_C_RF_B)
layout(OVERPASS_TRACK, LAYOUT_OVERPASS_TRACK)

copylayout(OVERPASS_TRACK, OVERPASS_TRACK_WAYP)

def({sw_overpass_platform_cb_purchase}) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

def({sw_overpass_platform_cb}) callback(
	ref(sw_overpass_platform_multi_layout) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

def({sw_overpass_track_snow}) calculate({subroutine(sw_terrain_snow) * 2},
	cbfail() else
)

def({sw_overpass_track_cb}) callback(
	ref(sw_overpass_track_snow) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

forloop(X, {makestation(X, link(ref(sw_overpass_platform_cb_purchase), MENU) default(ref(sw_overpass_platform_cb)))}, OVERPASS_HP_A .. OVERPASS_HP_C_RF_B)

skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, link(ref(sw_overpass_platform_cb_purchase), MENU) default(ref(sw_overpass_platform_cb)))}, OVERPASS_LP_A .. OVERPASS_LAP_C_RF_B)
placelabel(LABEL_HIGHPLATFORM_MODE)

forloop(X, {makestation(X, default(ref(sw_overpass_track_cb)))}, OVERPASS_TRACK .. OVERPASS_TRACK_WAYP)

// facilites

forloop(X, {
definestation(X, "",
	class(CLASS_FACILITIES)
	callbacks({CB_LAYOUT})
	setcargotriggers({PASS})
)}, PLATFORM_SIGN_B_ADDITIONAL_START .. PLATFORM_SIGN_B_ADDITIONAL_END)

forloop(X, {
definestation(X, "",
	class(CLASS_FACILITIES)
	callbacks({CB_LAYOUT})
	setcargotriggers({PASS})
)}, PLATFORM_FACILITIES_START .. PLATFORM_FACILITIES_END)

layout(SIGN_A_HP_A, LAYOUT_SIGN_A_HP_A)
layout(SIGN_A_HP_B, LAYOUT_SIGN_A_HP_B)
layout(SIGN_A_HP_C, LAYOUT_SIGN_A_HP_C)

layout(SIGN_A_LP_A, LAYOUT_SIGN_A_LP_A)
layout(SIGN_A_LP_B, LAYOUT_SIGN_A_LP_B)
layout(SIGN_A_LP_C, LAYOUT_SIGN_A_LP_C)

layout(SIGN_A_LAP_A, LAYOUT_SIGN_A_LAP_A)
layout(SIGN_A_LAP_B, LAYOUT_SIGN_A_LAP_B)
layout(SIGN_A_LAP_C, LAYOUT_SIGN_A_LAP_C)

layout(SIGN_B_HP_B_RF_A, LAYOUT_SIGN_B_HP_B_RF_A)
layout(SIGN_B_HP_C_RF_A, LAYOUT_SIGN_B_HP_C_RF_A)
layout(SIGN_B_HP_A_RF_B, LAYOUT_SIGN_B_HP_A_RF_B)
layout(SIGN_B_HP_B_RF_B, LAYOUT_SIGN_B_HP_B_RF_B)
layout(SIGN_B_HP_C_RF_B, LAYOUT_SIGN_B_HP_C_RF_B)

layout(SIGN_B_LP_B_RF_A, LAYOUT_SIGN_B_LP_B_RF_A)
layout(SIGN_B_LP_C_RF_A, LAYOUT_SIGN_B_LP_C_RF_A)
layout(SIGN_B_LP_A_RF_B, LAYOUT_SIGN_B_LP_A_RF_B)
layout(SIGN_B_LP_B_RF_B, LAYOUT_SIGN_B_LP_B_RF_B)
layout(SIGN_B_LP_C_RF_B, LAYOUT_SIGN_B_LP_C_RF_B)

layout(SIGN_B_LAP_B_RF_A, LAYOUT_SIGN_B_LAP_B_RF_A)
layout(SIGN_B_LAP_C_RF_A, LAYOUT_SIGN_B_LAP_C_RF_A)
layout(SIGN_B_LAP_A_RF_B, LAYOUT_SIGN_B_LAP_A_RF_B)
layout(SIGN_B_LAP_B_RF_B, LAYOUT_SIGN_B_LAP_B_RF_B)
layout(SIGN_B_LAP_C_RF_B, LAYOUT_SIGN_B_LAP_C_RF_B)


layout(SIGN_C_HP_A, LAYOUT_SIGN_C_HP_A)
layout(SIGN_C_HP_B, LAYOUT_SIGN_C_HP_B)
layout(SIGN_C_HP_C, LAYOUT_SIGN_C_HP_C)

layout(SIGN_C_HP_A_RF_A, LAYOUT_SIGN_C_HP_A_RF_A)
layout(SIGN_C_HP_B_RF_A, LAYOUT_SIGN_C_HP_B_RF_A)
layout(SIGN_C_HP_C_RF_A, LAYOUT_SIGN_C_HP_C_RF_A)
layout(SIGN_C_HP_A_RF_B, LAYOUT_SIGN_C_HP_A_RF_B)
layout(SIGN_C_HP_B_RF_B, LAYOUT_SIGN_C_HP_B_RF_B)
layout(SIGN_C_HP_C_RF_B, LAYOUT_SIGN_C_HP_C_RF_B)

layout(SIGN_C_LP_A, LAYOUT_SIGN_C_LP_A)
layout(SIGN_C_LP_B, LAYOUT_SIGN_C_LP_B)
layout(SIGN_C_LP_C, LAYOUT_SIGN_C_LP_C)

layout(SIGN_C_LP_A_RF_A, LAYOUT_SIGN_C_LP_A_RF_A)
layout(SIGN_C_LP_B_RF_A, LAYOUT_SIGN_C_LP_B_RF_A)
layout(SIGN_C_LP_C_RF_A, LAYOUT_SIGN_C_LP_C_RF_A)
layout(SIGN_C_LP_A_RF_B, LAYOUT_SIGN_C_LP_A_RF_B)
layout(SIGN_C_LP_B_RF_B, LAYOUT_SIGN_C_LP_B_RF_B)
layout(SIGN_C_LP_C_RF_B, LAYOUT_SIGN_C_LP_C_RF_B)

layout(SIGN_C_LAP_A, LAYOUT_SIGN_C_LAP_A)
layout(SIGN_C_LAP_B, LAYOUT_SIGN_C_LAP_B)
layout(SIGN_C_LAP_C, LAYOUT_SIGN_C_LAP_C)

layout(SIGN_C_LAP_A_RF_A, LAYOUT_SIGN_C_LAP_A_RF_A)
layout(SIGN_C_LAP_B_RF_A, LAYOUT_SIGN_C_LAP_B_RF_A)
layout(SIGN_C_LAP_C_RF_A, LAYOUT_SIGN_C_LAP_C_RF_A)
layout(SIGN_C_LAP_A_RF_B, LAYOUT_SIGN_C_LAP_A_RF_B)
layout(SIGN_C_LAP_B_RF_B, LAYOUT_SIGN_C_LAP_B_RF_B)
layout(SIGN_C_LAP_C_RF_B, LAYOUT_SIGN_C_LAP_C_RF_B)


layout(LED_HP_A_RF_A, LAYOUT_LED_HP_A_RF_A)
layout(LED_HP_B_RF_A, LAYOUT_LED_HP_B_RF_A)
layout(LED_HP_C_RF_A, LAYOUT_LED_HP_C_RF_A)
layout(LED_HP_A_RF_B, LAYOUT_LED_HP_A_RF_B)
layout(LED_HP_B_RF_B, LAYOUT_LED_HP_B_RF_B)
layout(LED_HP_C_RF_B, LAYOUT_LED_HP_C_RF_B)

layout(LED_LP_A_RF_A, LAYOUT_LED_LP_A_RF_A)
layout(LED_LP_B_RF_A, LAYOUT_LED_LP_B_RF_A)
layout(LED_LP_C_RF_A, LAYOUT_LED_LP_C_RF_A)
layout(LED_LP_A_RF_B, LAYOUT_LED_LP_A_RF_B)
layout(LED_LP_B_RF_B, LAYOUT_LED_LP_B_RF_B)
layout(LED_LP_C_RF_B, LAYOUT_LED_LP_C_RF_B)

layout(LED_LAP_A_RF_A, LAYOUT_LED_LAP_A_RF_A)
layout(LED_LAP_B_RF_A, LAYOUT_LED_LAP_B_RF_A)
layout(LED_LAP_C_RF_A, LAYOUT_LED_LAP_C_RF_A)
layout(LED_LAP_A_RF_B, LAYOUT_LED_LAP_A_RF_B)
layout(LED_LAP_B_RF_B, LAYOUT_LED_LAP_B_RF_B)
layout(LED_LAP_C_RF_B, LAYOUT_LED_LAP_C_RF_B)


layout(WAITINGROOM_HP_A, LAYOUT_WAITINGROOM_HP_A)
layout(WAITINGROOM_HP_B, LAYOUT_WAITINGROOM_HP_B)
layout(WAITINGROOM_HP_C, LAYOUT_WAITINGROOM_HP_C)

layout(WAITINGROOM_HP_A_RF_A, LAYOUT_WAITINGROOM_HP_A_RF_A)
layout(WAITINGROOM_HP_B_RF_A, LAYOUT_WAITINGROOM_HP_B_RF_A)
layout(WAITINGROOM_HP_C_RF_A, LAYOUT_WAITINGROOM_HP_C_RF_A)
layout(WAITINGROOM_HP_A_RF_B, LAYOUT_WAITINGROOM_HP_A_RF_B)
layout(WAITINGROOM_HP_B_RF_B, LAYOUT_WAITINGROOM_HP_B_RF_B)
layout(WAITINGROOM_HP_C_RF_B, LAYOUT_WAITINGROOM_HP_C_RF_B)

layout(WAITINGROOM_LP_A, LAYOUT_WAITINGROOM_LP_A)
layout(WAITINGROOM_LP_B, LAYOUT_WAITINGROOM_LP_B)
layout(WAITINGROOM_LP_C, LAYOUT_WAITINGROOM_LP_C)

layout(WAITINGROOM_LP_A_RF_A, LAYOUT_WAITINGROOM_LP_A_RF_A)
layout(WAITINGROOM_LP_B_RF_A, LAYOUT_WAITINGROOM_LP_B_RF_A)
layout(WAITINGROOM_LP_C_RF_A, LAYOUT_WAITINGROOM_LP_C_RF_A)
layout(WAITINGROOM_LP_A_RF_B, LAYOUT_WAITINGROOM_LP_A_RF_B)
layout(WAITINGROOM_LP_B_RF_B, LAYOUT_WAITINGROOM_LP_B_RF_B)
layout(WAITINGROOM_LP_C_RF_B, LAYOUT_WAITINGROOM_LP_C_RF_B)

layout(WAITINGROOM_LAP_A, LAYOUT_WAITINGROOM_LAP_A)
layout(WAITINGROOM_LAP_B, LAYOUT_WAITINGROOM_LAP_B)
layout(WAITINGROOM_LAP_C, LAYOUT_WAITINGROOM_LAP_C)

layout(WAITINGROOM_LAP_A_RF_A, LAYOUT_WAITINGROOM_LAP_A_RF_A)
layout(WAITINGROOM_LAP_B_RF_A, LAYOUT_WAITINGROOM_LAP_B_RF_A)
layout(WAITINGROOM_LAP_C_RF_A, LAYOUT_WAITINGROOM_LAP_C_RF_A)
layout(WAITINGROOM_LAP_A_RF_B, LAYOUT_WAITINGROOM_LAP_A_RF_B)
layout(WAITINGROOM_LAP_B_RF_B, LAYOUT_WAITINGROOM_LAP_B_RF_B)
layout(WAITINGROOM_LAP_C_RF_B, LAYOUT_WAITINGROOM_LAP_C_RF_B)


layout(UNDERPASS_HP_A_RF_A, LAYOUT_UNDERPASS_HP_A_RF_A)
layout(UNDERPASS_HP_B_RF_A, LAYOUT_UNDERPASS_HP_B_RF_A)
layout(UNDERPASS_HP_C_RF_A, LAYOUT_UNDERPASS_HP_C_RF_A)
layout(UNDERPASS_HP_A_RF_B, LAYOUT_UNDERPASS_HP_A_RF_B)
layout(UNDERPASS_HP_B_RF_B, LAYOUT_UNDERPASS_HP_B_RF_B)
layout(UNDERPASS_HP_C_RF_B, LAYOUT_UNDERPASS_HP_C_RF_B)

layout(UNDERPASS_LP_A_RF_A, LAYOUT_UNDERPASS_LP_A_RF_A)
layout(UNDERPASS_LP_B_RF_A, LAYOUT_UNDERPASS_LP_B_RF_A)
layout(UNDERPASS_LP_C_RF_A, LAYOUT_UNDERPASS_LP_C_RF_A)
layout(UNDERPASS_LP_A_RF_B, LAYOUT_UNDERPASS_LP_A_RF_B)
layout(UNDERPASS_LP_B_RF_B, LAYOUT_UNDERPASS_LP_B_RF_B)
layout(UNDERPASS_LP_C_RF_B, LAYOUT_UNDERPASS_LP_C_RF_B)

layout(UNDERPASS_LAP_A_RF_A, LAYOUT_UNDERPASS_LAP_A_RF_A)
layout(UNDERPASS_LAP_B_RF_A, LAYOUT_UNDERPASS_LAP_B_RF_A)
layout(UNDERPASS_LAP_C_RF_A, LAYOUT_UNDERPASS_LAP_C_RF_A)
layout(UNDERPASS_LAP_A_RF_B, LAYOUT_UNDERPASS_LAP_A_RF_B)
layout(UNDERPASS_LAP_B_RF_B, LAYOUT_UNDERPASS_LAP_B_RF_B)
layout(UNDERPASS_LAP_C_RF_B, LAYOUT_UNDERPASS_LAP_C_RF_B)


layout(LIGHT_HP_A, LAYOUT_LIGHT_HP_A)
layout(LIGHT_HP_B, LAYOUT_LIGHT_HP_B)
layout(LIGHT_HP_C, LAYOUT_LIGHT_HP_C)

layout(LIGHT_LP_A, LAYOUT_LIGHT_LP_A)
layout(LIGHT_LP_B, LAYOUT_LIGHT_LP_B)
layout(LIGHT_LP_C, LAYOUT_LIGHT_LP_C)

layout(LIGHT_LAP_A, LAYOUT_LIGHT_LAP_A)
layout(LIGHT_LAP_B, LAYOUT_LIGHT_LAP_B)
layout(LIGHT_LAP_C, LAYOUT_LIGHT_LAP_C)


// Platform + Sign A Start
// TODO: improve layout determination algorithm
define({tmp_condition_type_part1}, {
	cbr(1) if(HIGH_PLATFORM_A_PART1)
	cbr(1) if(HIGH_PLATFORM_B_PART1)
	cbr(1) if(HIGH_PLATFORM_C_PART1)
	cbr(2) if(LOW_PLATFORM_A_PART1)
	cbr(2) if(LOW_PLATFORM_B_PART1)
	cbr(2) if(LOW_PLATFORM_C_PART1)
	cbr(2) if(LOW_ASPHALT_PLATFORM_A_PART1)
	cbr(2) if(LOW_ASPHALT_PLATFORM_B_PART1)
	cbr(2) if(LOW_ASPHALT_PLATFORM_C_PART1)
	cbr(0) else
})

define({tmp_condition_type_part2}, {
	cbr(1) if(HIGH_PLATFORM_A_PART2)
	cbr(1) if(HIGH_PLATFORM_B_PART2)
	cbr(1) if(HIGH_PLATFORM_C_PART2)
	cbr(2) if(LOW_PLATFORM_A_PART2)
	cbr(2) if(LOW_PLATFORM_B_PART2)
	cbr(2) if(LOW_PLATFORM_C_PART2)
	cbr(2) if(LOW_ASPHALT_PLATFORM_A_PART2)
	cbr(2) if(LOW_ASPHALT_PLATFORM_B_PART2)
	cbr(2) if(LOW_ASPHALT_PLATFORM_C_PART2)
	cbr(0) else
})

define({tmp_condition_direction_part1}, {
	cbr(1) if(HIGH_PLATFORM_A_PART1)
	cbr(2) if(HIGH_PLATFORM_B_PART1)
	cbr(3) if(HIGH_PLATFORM_C_PART1)
	cbr(1) if(LOW_PLATFORM_A_PART1)
	cbr(2) if(LOW_PLATFORM_B_PART1)
	cbr(3) if(LOW_PLATFORM_C_PART1)
	cbr(1) if(LOW_ASPHALT_PLATFORM_A_PART1)
	cbr(2) if(LOW_ASPHALT_PLATFORM_B_PART1)
	cbr(3) if(LOW_ASPHALT_PLATFORM_C_PART1)
	cbr(0) else
})

define({tmp_condition_direction_part2}, {
	cbr(1) if(HIGH_PLATFORM_A_PART2)
	cbr(2) if(HIGH_PLATFORM_B_PART2)
	cbr(3) if(HIGH_PLATFORM_C_PART2)
	cbr(1) if(LOW_PLATFORM_A_PART2)
	cbr(2) if(LOW_PLATFORM_B_PART2)
	cbr(3) if(LOW_PLATFORM_C_PART2)
	cbr(1) if(LOW_ASPHALT_PLATFORM_A_PART2)
	cbr(2) if(LOW_ASPHALT_PLATFORM_B_PART2)
	cbr(3) if(LOW_ASPHALT_PLATFORM_C_PART2)
	cbr(0) else
})

def({sw_check_stasignA_type_right_part1}) tinfo_statid(pos(0, 1), shiftmask(0, 0xFF), tmp_condition_type_part1)
def({sw_check_stasignA_type_right_part2}) tinfo_statid(pos(0, 1), shiftmask(0, 0xFF), tmp_condition_type_part2)

def({sw_check_stasignA_type_right_sub2}) tinfo_grfid(pos(0, 1),
	ref(sw_check_stasignA_type_right_part1) if(label(GRFID_KWS_PART1))
	ref(sw_check_stasignA_type_right_part2) if(label(GRFID_KWS_PART2))
	cbr(0) else
)

def({sw_check_stasignA_type_right_sub1}) calculate({0x10 store(REGISTER_FUNCTION_PARAM) subroutine(sw_check_slope)},
	ref(sw_check_stasignA_type_right_sub2) if(1)
	cbr(0) else
)

def({sw_check_stasignA_type_right}) tinfo_statid(pos(0, 1), shiftmask(11, 0x1), 
	ref(sw_check_stasignA_type_right_sub1) if(0)
	cbr(0) else
)

def({sw_check_stasignA_type_left_part1}) tinfo_statid(pos(0, -1), shiftmask(0, 0xFF), tmp_condition_type_part1)
def({sw_check_stasignA_type_left_part2}) tinfo_statid(pos(0, -1), shiftmask(0, 0xFF), tmp_condition_type_part2)

def({sw_check_stasignA_type_left_sub2}) tinfo_grfid(pos(0, -1),
	ref(sw_check_stasignA_type_left_part1) if(label(GRFID_KWS_PART1))
	ref(sw_check_stasignA_type_left_part2) if(label(GRFID_KWS_PART2))
	cbr(0) else
)

def({sw_check_stasignA_type_left_sub1}) calculate({0xF0 store(REGISTER_FUNCTION_PARAM) subroutine(sw_check_slope)},
	ref(sw_check_stasignA_type_left_sub2) if(1)
	cbr(0) else
)

def({sw_check_stasignA_type_left}) tinfo_statid(pos(0, -1), shiftmask(11, 0x1), 
	ref(sw_check_stasignA_type_left_sub1) if(0)
	cbr(0) else
)

def({sw_check_stasignA_type_self_part1}) tinfo_statid(pos(0, 0), shiftmask(0, 0xFF), tmp_condition_type_part1)
def({sw_check_stasignA_type_self_part2}) tinfo_statid(pos(0, 0), shiftmask(0, 0xFF), tmp_condition_type_part2)

def({sw_check_stasignA_type_self}) tinfo_grfid(pos(0, 0),
	ref(sw_check_stasignA_type_self_part1) if(label(GRFID_KWS_PART1))
	ref(sw_check_stasignA_type_self_part2) if(label(GRFID_KWS_PART2))
	cbr(0) else
)

def({sw_check_stasignA_type_pB}) calculate({subroutine(sw_check_stasignA_type_right) CMP subroutine(sw_check_stasignA_type_self)},
	cbr(2) if(1)
	cbr(0) else
)

def({sw_check_stasignA_type_pA}) calculate({subroutine(sw_check_stasignA_type_left) CMP subroutine(sw_check_stasignA_type_self)},
	cbr(1) if(1)
	cbr(0) else
)

def({sw_check_stasignA_dir_right_part1}) tinfo_statid(pos(0, 1), shiftmask(0, 0xFF), tmp_condition_direction_part1)
def({sw_check_stasignA_dir_right_part2}) tinfo_statid(pos(0, 1), shiftmask(0, 0xFF), tmp_condition_direction_part2)

def({sw_check_stasignA_dir_right_sub2}) tinfo_grfid(pos(0, 1),
	ref(sw_check_stasignA_dir_right_part1) if(label(GRFID_KWS_PART1))
	ref(sw_check_stasignA_dir_right_part2) if(label(GRFID_KWS_PART2))
	cbr(0) else
)

def({sw_check_stasignA_dir_right_sub1}) calculate({0x10 store(REGISTER_FUNCTION_PARAM) subroutine(sw_check_slope)},
	ref(sw_check_stasignA_dir_right_sub2) if(1)
	cbr(0) else
)

def({sw_check_stasignA_dir_right}) tinfo_statid(pos(0, 1), shiftmask(11, 0x1), 
	ref(sw_check_stasignA_dir_right_sub1) if(0)
	cbr(0) else
)

def({sw_check_stasignA_dir_left_part1}) tinfo_statid(pos(0, -1), shiftmask(0, 0xFF), tmp_condition_direction_part1)
def({sw_check_stasignA_dir_left_part2}) tinfo_statid(pos(0, -1), shiftmask(0, 0xFF), tmp_condition_direction_part2)

def({sw_check_stasignA_dir_left_sub2}) tinfo_grfid(pos(0, -1),
	ref(sw_check_stasignA_dir_left_part1) if(label(GRFID_KWS_PART1))
	ref(sw_check_stasignA_dir_left_part2) if(label(GRFID_KWS_PART2))
	cbr(0) else
)

def({sw_check_stasignA_dir_left_sub1}) calculate({0xF0 store(REGISTER_FUNCTION_PARAM) subroutine(sw_check_slope)},
	ref(sw_check_stasignA_dir_left_sub2) if(1)
	cbr(0) else
)

def({sw_check_stasignA_dir_left}) tinfo_statid(pos(0, -1), shiftmask(11, 0x1), 
	ref(sw_check_stasignA_dir_left_sub1) if(0)
	cbr(0) else
)

def({sw_check_stasignA_dir_self_part1}) tinfo_statid(pos(0, 0), shiftmask(0, 0xFF), tmp_condition_direction_part1)
def({sw_check_stasignA_dir_self_part2}) tinfo_statid(pos(0, 0), shiftmask(0, 0xFF), tmp_condition_direction_part2)

def({sw_check_stasignA_dir_self}) tinfo_grfid(pos(0, 0),
	ref(sw_check_stasignA_dir_self_part1) if(label(GRFID_KWS_PART1))
	ref(sw_check_stasignA_dir_self_part2) if(label(GRFID_KWS_PART2))
	cbr(0) else
)

def({sw_check_stasignA_dir_pB_sub1}) subroutine(sw_check_stasignA_dir_right,
	cbr(0) if(0)
	cbr(2) else
)

def({sw_check_stasignA_dir_pB_sub2}) calculate({subroutine(sw_check_stasignA_dir_right) CMP subroutine(sw_check_stasignA_dir_self)},
	cbr(2) if(1)
	cbr(0) else
)

def({sw_check_stasignA_dir_pB_sub3}) subroutine(sw_check_stasignA_dir_right,
	cbr(2) if(2)
	cbr(0) else
)

def({sw_check_stasignA_dir_pB}) subroutine(sw_check_stasignA_dir_self,
	ref(sw_check_stasignA_dir_pB_sub1) if(1)
	ref(sw_check_stasignA_dir_pB_sub2) if(2)
	ref(sw_check_stasignA_dir_pB_sub3) if(3)
	cbr(0) else
)

def({sw_check_stasignA_dir_pA_sub1}) subroutine(sw_check_stasignA_dir_left,
	cbr(0) if(0)
	cbr(1) else
)

def({sw_check_stasignA_dir_pA_sub2}) calculate({subroutine(sw_check_stasignA_dir_left) CMP subroutine(sw_check_stasignA_dir_self)},
	cbr(1) if(1)
	cbr(0) else
)

def({sw_check_stasignA_dir_pA_sub3}) subroutine(sw_check_stasignA_dir_left,
	cbr(1) if(1)
	cbr(0) else
)

def({sw_check_stasignA_dir_pA}) subroutine(sw_check_stasignA_dir_self,
	ref(sw_check_stasignA_dir_pA_sub1) if(2)
	ref(sw_check_stasignA_dir_pA_sub2) if(1)
	ref(sw_check_stasignA_dir_pA_sub3) if(3)
	cbr(0) else
)

def({sw_stasignA_offset}) calculate({subroutine(sw_check_stasignA_type_pB) OR subroutine(sw_check_stasignA_dir_pB) OR subroutine(sw_check_stasignA_type_pA) OR subroutine(sw_check_stasignA_dir_pA)},
	cbfail() else
)

def({sw_reg_signA_platformA_offset_y}) calculate({subroutine(sw_check_stasignA_type_pA) OR subroutine(sw_check_stasignA_dir_pA)},
	cbr(-1) if(1)
	cbr(1) else
)

def({sw_reg_signA_platformB_offset_y}) calculate({subroutine(sw_check_stasignA_type_pB) OR subroutine(sw_check_stasignA_dir_pB)},
	cbr(15) if(2)
	cbr(12) else
)

def({sw_set_reg_signA}) setregisters(REGISTER_SIGN_A_OFFSET_Y, {sub(sw_reg_signA_platformA_offset_y), sub(sw_reg_signA_platformB_offset_y)}, ref(sw_set_registers))

def({sw_check_stasign_pos_sub2}) plt_posrev(
	cbr(2) if(0)
	cbr(1) else
)

def({sw_check_stasign_pos_sub1}) plt_pos(
	cbr(0) if(0)
	ref(sw_check_stasign_pos_sub2) else
)

def({sw_check_stasign_pos}) plt_length(
	cbr(1) if(1)
	ref(sw_check_stasign_pos_sub1) else
)

def({sw_stasignA_layout}) calculate({subroutine(sw_terrain_snow) * 3 + subroutine(sw_check_stasign_pos) * 2},
	cbfail() else
)

// multi-platform calculation
def({sw_stasignA_platformA_multi_layout}) calculate({subroutine(sw_platformA_check_opposite) * 12 + subroutine(sw_stasignA_layout)},
	cbfail() else
)

def({sw_stasignA_platformB_multi_layout}) calculate({subroutine(sw_platformB_check_opposite) * 12 + subroutine(sw_stasignA_layout)},
	cbfail() else
)

def({sw_stasignA_multi_layout}) subroutine(sw_platform_multi_check,
	ref(sw_stasignA_platformA_multi_layout) if(1)
	ref(sw_stasignA_platformB_multi_layout) if(2)
	ref(sw_stasignA_layout) else
)

def({sw_stasignA_cb}) callback(
	ref(sw_stasignA_multi_layout) if(CB_LAYOUT)
	ref(sw_set_reg_signA) else
)

def({sw_stasignA_cb_purchase}) callback(
	cbr(2) if(CB_LAYOUT)
	ref(sw_set_reg_signA) else
)
// Platform + Sign A End

forloop(X, {makestation(X, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_multi_cb)))}, LIGHT_HP_A .. LIGHT_HP_C)
skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_multi_cb)))}, LIGHT_LP_A .. LIGHT_LAP_C)
placelabel(LABEL_HIGHPLATFORM_MODE)

forloop(X, {makestation(X, link(ref(sw_stasignA_cb_purchase), MENU) default(ref(sw_stasignA_cb)))}, SIGN_A_HP_A .. SIGN_A_HP_C)
skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, link(ref(sw_stasignA_cb_purchase), MENU) default(ref(sw_stasignA_cb)))}, SIGN_A_LP_A .. SIGN_A_LAP_C)
placelabel(LABEL_HIGHPLATFORM_MODE)

forloop(X, {makestation(X, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_multi_cb)))}, SIGN_B_HP_B_RF_A .. SIGN_B_HP_C_RF_A)

makestation(SIGN_B_HP_A_RF_B, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_multi_cb)))
forloop(X, {makestation(X, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_multi_cb)))}, SIGN_B_HP_B_RF_B .. SIGN_B_HP_C_RF_B)

skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_multi_cb)))}, SIGN_B_LP_B_RF_A .. SIGN_B_LP_C_RF_A)

	makestation(SIGN_B_LP_A_RF_B, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_multi_cb)))
	forloop(X, {makestation(X, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_multi_cb)))}, SIGN_B_LP_B_RF_B .. SIGN_B_LP_C_RF_B)
	
	forloop(X, {makestation(X, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_multi_cb)))}, SIGN_B_LAP_B_RF_A .. SIGN_B_LAP_C_RF_A)

	makestation(SIGN_B_LAP_A_RF_B, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_multi_cb)))
	forloop(X, {makestation(X, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_multi_cb)))}, SIGN_B_LAP_B_RF_B .. SIGN_B_LAP_C_RF_B)
placelabel(LABEL_HIGHPLATFORM_MODE)

forloop(X, {makestation(X, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_multi_cb)))}, SIGN_C_HP_A .. SIGN_C_HP_C_RF_B)
skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_multi_cb)))}, SIGN_C_LP_A .. SIGN_C_LAP_C_RF_B)
placelabel(LABEL_HIGHPLATFORM_MODE)

forloop(X, {makestation(X, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_multi_cb)))}, LED_HP_A_RF_A .. LED_HP_C_RF_B)
skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_multi_cb)))}, LED_LP_A_RF_A .. LED_LAP_C_RF_B)
placelabel(LABEL_HIGHPLATFORM_MODE)

forloop(X, {makestation(X, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_multi_cb)))}, WAITINGROOM_HP_A .. WAITINGROOM_HP_C_RF_B)
skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_multi_cb)))}, WAITINGROOM_LP_A .. WAITINGROOM_LAP_C_RF_B)
placelabel(LABEL_HIGHPLATFORM_MODE)

forloop(X, {makestation(X, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_multi_cb)))}, UNDERPASS_HP_A_RF_A .. UNDERPASS_HP_C_RF_B)
skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, link(ref(sw_platform_cb), MENU) default(ref(sw_platform_multi_cb)))}, UNDERPASS_LP_A_RF_A .. UNDERPASS_LAP_C_RF_B)
placelabel(LABEL_HIGHPLATFORM_MODE)



// psd

forloop(X, {
definestation(X, "",
	class(CLASS_PSD)
	callbacks({CB_LAYOUT, CB_AFRAME})
	anim_info({7, NOLOOP})
	anim_speed(3)
	anim_triggers({ARRIVE, LEAVE})
	setcargotriggers({PASS})
)}, PSD_START .. PSD_END)

layout(PSD_HP_A, LAYOUT_PSD_HP_A)
layout(PSD_HP_B, LAYOUT_PSD_HP_B)
layout(PSD_HP_C, LAYOUT_PSD_HP_C)
layout(PSD_HP_A_RF_A, LAYOUT_PSD_HP_A_RF_A)
layout(PSD_HP_B_RF_A, LAYOUT_PSD_HP_B_RF_A)
layout(PSD_HP_C_RF_A, LAYOUT_PSD_HP_C_RF_A)
layout(PSD_HP_A_RF_B, LAYOUT_PSD_HP_A_RF_B)
layout(PSD_HP_B_RF_B, LAYOUT_PSD_HP_B_RF_B)
layout(PSD_HP_C_RF_B, LAYOUT_PSD_HP_C_RF_B)

def({sw_psd_cb}) callback(
	ref(sw_platform_multi_cb) if(CB_LAYOUT)
	ref(sw_psd_animctrl) if(CB_ACONTROL)
	ref(sw_psd_animframe) if(CB_AFRAME)
	ref(sw_set_reg_psd) else
)

def({sw_psd_cb_purchase}) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_set_reg_psd) else
)

forloop(X, {makestation(X, link(ref(sw_psd_cb_purchase), MENU) default(ref(sw_psd_cb)))}, PSD_START .. PSD_END)

// Simple station

definestation(SIMPLE_STN, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT})
	include_widths({1})
	include_lengths({1})
	nontrack(TTD_ALLTILES)
	nowires(TTD_ALLTILES)
)

layout(SIMPLE_STN, LAYOUT_SIMPLE_STN)

def({sw_simple_station_layout_sub}) tinfo_trackconnect(shiftmask(8, 0xC),
	cbr(2) if(4)
	cbr(0) else
)

def({sw_simple_station_layout}) tinfo_statid(pos(0, 1),
	ref(sw_simple_station_layout_sub) if(0xFFFF)
	cbr(2) else
)

def({sw_simple_station_cb}) callback(
	ref(sw_simple_station_layout) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

def({sw_simple_station_cb_purchase}) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

makestation(SIMPLE_STN, link(ref(sw_simple_station_cb_purchase), MENU) default(ref(sw_simple_station_cb)))

// bridge_height

deflabel(LABEL_ALLOW_BRIDGE)
skipif(reflabel(LABEL_ALLOW_BRIDGE), MAPPING, !=, STAT_BRIDGES)
skipif(reflabel(LABEL_ALLOW_BRIDGE), getowngrfparameter(PARAM_FLAGS), BITCLR, PARAM_FLAGS_BRIDGE)

setproperties(HP_A .. HP_C, bridge_height(1,1,1,1,1,1,1,1))
setproperties(LP_A .. LP_A, bridge_height(1,1,1,1,1,1,1,1))
setproperties(LAP_A .. LAP_A, bridge_height(1,1,1,1,1,1,1,1))

setproperties(HP_A_RF_A .. HP_C_RF_B, bridge_height(3,3,3,3,3,3,3,3))
setproperties(LP_A_RF_A .. LP_C_RF_B, bridge_height(3,3,3,3,3,3,3,3))
setproperties(LAP_A_RF_A .. LAP_C_RF_B, bridge_height(3,3,3,3,3,3,3,3))

setproperties(CROSSING_LP_A .. CROSSING_LP_C, bridge_height(1,1,1,1,1,1,1,1))
setproperties(CROSSING_LAP_A .. CROSSING_LAP_C, bridge_height(1,1,1,1,1,1,1,1))

setproperties(CROSSING_LP_A_RF_A .. CROSSING_LP_C_RF_B, bridge_height(3,3,3,3,3,3,3,3))
setproperties(CROSSING_LAP_A_RF_A .. CROSSING_LAP_C_RF_B, bridge_height(3,3,3,3,3,3,3,3))

setproperties(HP_NONTRACK, bridge_height(1,1,1,1,1,1,1,1))
setproperties(LP_NONTRACK, bridge_height(1,1,1,1,1,1,1,1))
setproperties(LAP_NONTRACK, bridge_height(1,1,1,1,1,1,1,1))

setproperties(HP_NONTRACK_RF_A .. HP_NONTRACK_RF_B, bridge_height(3,3,3,3,3,3,3,3))
setproperties(LP_NONTRACK_RF_A .. LP_NONTRACK_RF_B, bridge_height(3,3,3,3,3,3,3,3))
setproperties(LAP_NONTRACK_RF_A .. LAP_NONTRACK_RF_B, bridge_height(3,3,3,3,3,3,3,3))

setproperties(OVERPASS_START .. OVERPASS_END, bridge_height(3,3,3,3,3,3,3,3))

setproperties(SIGN_A_HP_A .. SIGN_A_LAP_C, bridge_height(1,1,1,1,1,1,1,1))
setproperties(SIGN_B_HP_B_RF_A .. SIGN_B_LAP_C_RF_B, bridge_height(3,3,3,3,3,3,3,3))
setproperties(SIGN_C_HP_A .. SIGN_C_LAP_C_RF_B, bridge_height(3,3,3,3,3,3,3,3))
setproperties(LED_HP_A_RF_A .. LED_LAP_C_RF_B, bridge_height(3,3,3,3,3,3,3,3))

setproperties(WAITINGROOM_HP_A .. WAITINGROOM_HP_C, bridge_height(1,1,1,1,1,1,1,1))
setproperties(WAITINGROOM_LP_A .. WAITINGROOM_LP_C, bridge_height(1,1,1,1,1,1,1,1))
setproperties(WAITINGROOM_LAP_A .. WAITINGROOM_LAP_C, bridge_height(1,1,1,1,1,1,1,1))

setproperties(WAITINGROOM_HP_A_RF_A .. WAITINGROOM_HP_C_RF_B, bridge_height(3,3,3,3,3,3,3,3))
setproperties(WAITINGROOM_LP_A_RF_A .. WAITINGROOM_LP_C_RF_B, bridge_height(3,3,3,3,3,3,3,3))
setproperties(WAITINGROOM_LAP_A_RF_A .. WAITINGROOM_LAP_C_RF_B, bridge_height(3,3,3,3,3,3,3,3))

setproperties(LIGHT_HP_A .. LIGHT_LAP_C, bridge_height(3,3,3,3,3,3,3,3))

setproperties(UNDERPASS_HP_A_RF_A .. UNDERPASS_LAP_C_RF_B, bridge_height(3,3,3,3,3,3,3,3))

setproperties(PSD_HP_A .. PSD_HP_C, bridge_height(1,1,1,1,1,1,1,1))
setproperties(PSD_HP_A_RF_A .. PSD_HP_C_RF_B, bridge_height(1,1,1,1,1,1,1,1))

setproperties(VOID_TILE, bridge_height(1,1,1,1,1,1,1,1))

placelabel(LABEL_ALLOW_BRIDGE)
