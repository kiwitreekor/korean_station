include(sprites/kws.m4)
include(sprites/kws_func.nfx)

include(sprites/lang/english.nfx)
include(sprites/lang/korean.nfx)
include(sprites/strings.nfx)

setfeature(_STATION)
setpath(sprites/gfx)

textmode_on()
grfinit(GRFID_KWS_PART1,
	grfname(STR_GRF_NAME)
	grfdescription(STR_GRF_DESC)
	grfurl(ALL, {"https://github.com/kiwitreekor/korean_station/"})
	grfversion(GRF_VERSION)
	grfminversion(GRF_MIN_VERSION)
	
	grfparameter(
		grfsetting(
			settype(ENUM,PARAM_MODE,0,32)
			setname(STR_PARAM_MODE_NAME)
			setdescription(STR_PARAM_MODE_DESC)
			setdefault(0)
			setlimits(0,2)
			setvalues(
				menuvalue(0,STR_PARAM_MODE_LIST_NORMAL)
				menuvalue(1,STR_PARAM_MODE_LIST_HIGHPLATFORMS)
				menuvalue(2,STR_PARAM_MODE_LIST_COMPAT)
			)
		)
		grfsetting(
			settype(BOOL,PARAM_FLAGS,PARAM_FLAGS_PSDSFX,1)
			setname(STR_PARAM_PSDSFX_NAME)
			setdescription(STR_PARAM_PSDSFX_DESC)
			setdefault(1)
		)
		grfsetting(
			settype(BOOL,PARAM_FLAGS,PARAM_FLAGS_PASSENGER,1)
			setname(STR_PARAM_PASSENGER_NAME)
			setdescription(STR_PARAM_PASSENGER_DESC)
			setdefault(1)
		)
		grfsetting(
			settype(BOOL,PARAM_FLAGS,PARAM_FLAGS_SHADOW,1)
			setname(STR_PARAM_SHADOW_NAME)
			setdescription(STR_PARAM_SHADOW_DESC)
			setdefault(1)
		)
		grfsetting(
			settype(BOOL,PARAM_FLAGS,PARAM_FLAGS_SNOW,1)
			setname(STR_PARAM_SNOW_NAME)
			setdescription(STR_PARAM_SNOW_DESC)
			setdefault(1)
		)
		grfsetting(
			settype(BOOL,PARAM_FLAGS,PARAM_FLAGS_BRIDGE,1)
			setname(STR_PARAM_BRIDGE_NAME)
			setdescription(STR_PARAM_BRIDGE_DESC)
			setdefault(0)
		)
		grfsetting(
			settype(ENUM,PARAM_ROOF_COLOUR,0,4)
			setname(STR_PARAM_ROOF_COLOUR_NAME)
			setdescription(STR_PARAM_ROOF_COLOUR_DESC)
			setdefault(9)
			setlimits(0,15)
			setvalues(
				menuvalue(0,STR_PARAM_ROOF_COLOUR_CC)
				menuvalue(1,STR_PARAM_ROOF_COLOUR_DBLUE)
				menuvalue(2,STR_PARAM_ROOF_COLOUR_PGREEN)
				menuvalue(3,STR_PARAM_ROOF_COLOUR_PINK)
				menuvalue(4,STR_PARAM_ROOF_COLOUR_YELLOW)
				menuvalue(5,STR_PARAM_ROOF_COLOUR_RED)
				menuvalue(6,STR_PARAM_ROOF_COLOUR_LBLUE)
				menuvalue(7,STR_PARAM_ROOF_COLOUR_GREEN)
				menuvalue(8,STR_PARAM_ROOF_COLOUR_DGREEN)
				menuvalue(9,STR_PARAM_ROOF_COLOUR_BLUE)
				menuvalue(10,STR_PARAM_ROOF_COLOUR_CREAM)
				menuvalue(11,STR_PARAM_ROOF_COLOUR_MAUVE)
				menuvalue(12,STR_PARAM_ROOF_COLOUR_PURPLE)
				menuvalue(13,STR_PARAM_ROOF_COLOUR_ORANGE)
				menuvalue(14,STR_PARAM_ROOF_COLOUR_BROWN)
				menuvalue(15,STR_PARAM_ROOF_COLOUR_GREY)
				menuvalue(16,STR_PARAM_ROOF_COLOUR_WHITE)
			)
		)
	)
)
textmode_off()
asl_on()

getothergrfparameter(PARAM_VERSION, GRFID_KWS_PART1, VERSION)

skipif(1, GRFACTIVE, --, GRFID_KWS_PART2)
skipif(1, getowngrfparameter(PARAM_VERSION), ==, GRF_VERSION)
error(FATAL, ALL, 04, "kws2.grf")

include(sprites/sprites.nfx)

def(0, sprset_default) spriteset(little(0), lots(0))

setpath(sounds)
soundtable(
	defsnd(snd_psd_open, PSD_open.wav)
	defsnd(snd_psd_close, PSD_close.wav)
)


skipif(1, getowngrfparameter(PARAM_FLAGS), BITCLR, PARAM_FLAGS_SNOW)
def(22, sw_terrain_snow) tinfo_terrain(
	cbr(1) if(SNOW)
	cbr(0) else
)

skipif(1, getowngrfparameter(PARAM_FLAGS), BITSET, PARAM_FLAGS_SNOW)
def(22, sw_terrain_snow) tinfo_terrain(
	cbr(0) if(SNOW)
	cbr(0) else
)

def(98, sw_get_param_roof_colour) calculate({getparameter(PARAM_ROOF_COLOUR,) AND 0xF + 0x307 - 1},
	cbfail() else
)

def(97, sw_reg_roof_colour) getparameter(PARAM_ROOF_COLOUR, shiftmask(0, 0xF),
	cbr(0) if(0)
	ref(98) else
)

def(96, sw_set_reg_roof_colour) setregisters(REGISTER_ROOF_RECOLOUR, {sub(sw_reg_roof_colour)}, ref(sprset_default))

def(95, sw_reg_roof_overpass) subroutine(sw_terrain_snow,
	cbr(spr_roofs_overpass_snow - spr_roofs_overpass) if(1)
	cbr(0) else
)

def(94, sw_reg_overpass_guide) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_SHADOW, 0x1),
	cbr(spr_overpass_guide_s - spr_overpass_guide) if(1)
	cbr(0) else
)

def(93, sw_reg_overpass) subroutine(sw_terrain_snow,
	cbr(spr_overpass_snow - spr_overpass) if(1)
	cbr(0) else
)
def(92, sw_set_reg_overpass) setregisters(REGISTER_OVERPASS_OFFSET, {sub(sw_reg_overpass), sub(sw_reg_overpass_guide), sub(sw_reg_roof_overpass)}, ref(sw_set_reg_roof_colour))


def(91, sw_reg_crossing_shadow) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_SHADOW, 0x1),
	cbr(spr_platform_cs - spr_platform_c) if(1)
	cbr(0) else
)

def(90, sw_reg_crossing) subroutine(sw_terrain_snow,
	cbr(spr_platform_c_snow - spr_platform_c) if(1)
	cbr(0) else
)

def(89, sw_reg_platform_shadow) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_SHADOW, 0x1),
	cbr(spr_platform_s - spr_platform) if(1)
	cbr(0) else
)

def(88, sw_reg_roof) subroutine(sw_terrain_snow,
	cbr(spr_roofs_snow - spr_roofs) if(1)
	cbr(0) else
)

def(87, sw_reg_passenger_skip_sub) cargowaiting(PASS,
	cbr(0) if(0 .. 16)
	cbr(1) else
)

def(86, sw_reg_passenger_skip) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_PASSENGER, 0x1),
	ref(sw_reg_passenger_skip_sub) if(1)
	cbr(0) else
)

def(85, sw_reg_platform) subroutine(sw_terrain_snow,
	cbr(spr_platform_snow - spr_platform) if(1)
	cbr(0) else
)

def(84, sw_reg_passenger) cargowaiting(PASS,
	cbr(0) if(17 .. 128)
	cbr(4) if(129 .. 512)
	cbr(8) if(513 .. 1024)
	cbr(12) else
)
def(83, sw_set_reg_passenger) 
setregisters(REGISTER_PASSENGER_OFFSET, 
	{
	sub(sw_reg_passenger), 
	sub(sw_reg_platform), 
	sub(sw_reg_passenger_skip), 
	sub(sw_reg_roof),
	sub(sw_reg_platform_shadow),
	sub(sw_reg_crossing),
	sub(sw_reg_crossing_shadow)
	}, 
	ref(sw_set_reg_overpass)
)

def(82, sw_ground_nontrack_register_sub) subroutine(sw_terrain_snow,
	cbr(spr_ground_nontrack_snow - spr_ground_nontrack) if(1)
	cbr(0) else
)
def(81, sw_ground_nontrack_register) setregisters(REGISTER_GROUND_NONTRACK_OFFSET, sub(sw_ground_nontrack_register_sub), ref(sw_set_reg_passenger))
def(80, sw_set_registers) setregisters(REGISTER_NONE, {0}, ref(sw_ground_nontrack_register))

def(21, sw_platform_layout) calculate({subroutine(sw_terrain_snow) * 2},
	cbfail() else
)

def(20, sw_platform_cb) callback(
	ref(sw_platform_layout) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

include(sprites/kws_layout.nfx)

deflabel(label_compat)
skipif(reflabel(label_compat), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_COMPAT)
// platforms

forloop(X, {
definestation(X, "",
	class(CLASS_PLATFORMS)
	callbacks({CB_LAYOUT})
)}, PLATFORM_START .. PLATFORM_END)

layout(HP_A, LAYOUT_HP_A)
layout(HP_B, LAYOUT_HP_B)
layout(HP_C, LAYOUT_HP_C)

layout(HP_A_RF_A, LAYOUT_HP_A_RF_A)
layout(HP_B_RF_A, LAYOUT_HP_B_RF_A)
layout(HP_C_RF_A, LAYOUT_HP_C_RF_A)

layout(HP_A_RF_B, LAYOUT_HP_A_RF_B)
layout(HP_B_RF_B, LAYOUT_HP_B_RF_B)
layout(HP_C_RF_B, LAYOUT_HP_C_RF_B)

layout(LP_A, LAYOUT_LP_A)
layout(LP_B, LAYOUT_LP_B)
layout(LP_C, LAYOUT_LP_C)

layout(LP_A_RF_A, LAYOUT_LP_A_RF_A)
layout(LP_B_RF_A, LAYOUT_LP_B_RF_A)
layout(LP_C_RF_A, LAYOUT_LP_C_RF_A)

layout(LP_A_RF_B, LAYOUT_LP_A_RF_B)
layout(LP_B_RF_B, LAYOUT_LP_B_RF_B)
layout(LP_C_RF_B, LAYOUT_LP_C_RF_B)

layout(LAP_A, LAYOUT_LAP_A)
layout(LAP_B, LAYOUT_LAP_B)
layout(LAP_C, LAYOUT_LAP_C)

layout(LAP_A_RF_A, LAYOUT_LAP_A_RF_A)
layout(LAP_B_RF_A, LAYOUT_LAP_B_RF_A)
layout(LAP_C_RF_A, LAYOUT_LAP_C_RF_A)

layout(LAP_A_RF_B, LAYOUT_LAP_A_RF_B)
layout(LAP_B_RF_B, LAYOUT_LAP_B_RF_B)
layout(LAP_C_RF_B, LAYOUT_LAP_C_RF_B)

forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, HP_A .. HP_C_RF_B)

skipif(LAP_C_RF_B - LP_A + 1, getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, LP_A .. LAP_C_RF_B)

// crossings

forloop(X, {
definestation(X, "",
	class(CLASS_CROSSINGS)
	callbacks({CB_LAYOUT, CB_AFRAME})
	anim_triggers({BUILT})
)}, LP_A_CR .. LAP_C_CR_RF_B)

layout(LP_A_CR, LAYOUT_LP_A_CR)
layout(LP_B_CR, LAYOUT_LP_B_CR)
layout(LP_C_CR, LAYOUT_LP_C_CR)

layout(LP_A_CR_RF_A, LAYOUT_LP_A_CR_RF_A)
layout(LP_B_CR_RF_A, LAYOUT_LP_B_CR_RF_A)
layout(LP_C_CR_RF_A, LAYOUT_LP_C_CR_RF_A)

layout(LP_A_CR_RF_B, LAYOUT_LP_A_CR_RF_B)
layout(LP_B_CR_RF_B, LAYOUT_LP_B_CR_RF_B)
layout(LP_C_CR_RF_B, LAYOUT_LP_C_CR_RF_B)

layout(LAP_A_CR, LAYOUT_LAP_A_CR)
layout(LAP_B_CR, LAYOUT_LAP_B_CR)
layout(LAP_C_CR, LAYOUT_LAP_C_CR)

layout(LAP_A_CR_RF_A, LAYOUT_LAP_A_CR_RF_A)
layout(LAP_B_CR_RF_A, LAYOUT_LAP_B_CR_RF_A)
layout(LAP_C_CR_RF_A, LAYOUT_LAP_C_CR_RF_A)

layout(LAP_A_CR_RF_B, LAYOUT_LAP_A_CR_RF_B)
layout(LAP_B_CR_RF_B, LAYOUT_LAP_B_CR_RF_B)
layout(LAP_C_CR_RF_B, LAYOUT_LAP_C_CR_RF_B)

def(25) plt_posrev(
	cbr(2) if(0)
	cbr(0) else
)

def(27) plt_pos(
	cbr(4) if(0)
	ref(25) else
)

def(28, sw_pos) plt_length(
	cbr(0) if(1)
	ref(27) else
)

def(26, sw_crossing_layout) calculate({subroutine(sw_terrain_snow) * 6 + subroutine(sw_pos)},
	cbfail() else
)

def(29, sw_crossing_cb) callback(
	ref(sw_crossing_layout) if(CB_LAYOUT)
	ref(sw_pos) if(CB_ACONTROL)
	ref(sw_pos) if(CB_AFRAME)
	ref(sw_set_registers) else
)

skipif(LAP_C_CR_RF_B - LP_A_CR + 1, getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
forloop(X, {makestation(X, default(ref(sw_crossing_cb)))}, LP_A_CR .. LAP_C_CR_RF_B)

definestation(TRACK_CR, "",
	class(CLASS_CROSSINGS)
	callbacks({CB_LAYOUT, CB_AFRAME})
	anim_triggers(BUILT, PERIODIC)
)

layout(TRACK_CR, LAYOUT_TRACK_CR)

def(32) anim_frame(pos(0,-1),
	cbr(0) if(0)
	cbr(2) if(2)
	cbr(4) else
)

def(29, sw_crossing_track_layout) tinfo_statid(pos(0,-1),shiftmask(0,0x3FF),
	ref(32) if(0x100+CROSSING_START .. 0x100+CROSSING_END, 0x200+CROSSING_HIGH_START .. 0x200+CROSSING_HIGH_END)
	cbr(0) else
)

def(28, sw_crossing_track_cb) callback(
	ref(sw_crossing_track_layout) if(CB_LAYOUT)
	ref(sw_crossing_track_layout) if(CB_ACONTROL)
	ref(sw_crossing_track_layout) if(CB_AFRAME)
	ref(sw_set_registers) else
)

def(30, sw_crossing_track_menu) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_set_registers) else
)
makestation(TRACK_CR, link(ref(sw_crossing_track_menu), MENU) default(ref(sw_crossing_track_cb)))

// building blocks
forloop(X, {
definestation(X, "",
	class(CLASS_BUILDINGS)
	nontrack(TTD_ALLTILES)
	nowires(TTD_ALLTILES)
)}, BUILDING_LOW .. BUILDING_HIGH)

layout(BUILDING_LOW, LAYOUT_BUILDING_LOW)
layout(BUILDING_HIGH, LAYOUT_BUILDING_HIGH)

def(33) tinfo_statid(pos(0, 1),
	cbr(0) if(0xFFFF)
	cbr(1) else
)

def(32) tinfo_statid(pos(0, -1),
	cbr(0) if(0xFFFF)
	cbr(2) else
)

def(34) calculate({tinfo_trackconnect() >> 10 AND 3 OR subroutine(32) OR subroutine(33)},
	cbfail() else
)

def(36, sw_building_register_sub_snow) subroutine(sw_terrain_snow,
	cbr(spr_building_low_snow - spr_building_low) if(1)
	cbr(0) else
)

def(35, sw_building_layout_sub2) subroutine(34,
	cbr(1) if(1)
	cbr(10) if(3)
	cbr(0) else
)

def(31, sw_building_x_layout_sub) subroutine(sw_building_layout_sub2,
	cbr(0) if(0)
	cbr(2) if(1)
	cbr(4) if(2)
	cbr(5) if(3)
	cbr(6) if(4)
	cbr(7) if(5)
	cbr(8) if(6)
	cbr(9) if(7)
	cbr(10) if(8)
	cbr(11) if(9)
	cbr(12) if(10)
	cbr(0) else
)

def(37, sw_building_y_layout_sub) subroutine(sw_building_layout_sub2,
	cbr(1) if(0)
	cbr(3) if(1)
	cbr(4) if(2)
	cbr(7) if(3)
	cbr(6) if(4)
	cbr(5) if(5)
	cbr(8) if(6)
	cbr(11) if(7)
	cbr(10) if(8)
	cbr(9) if(9)
	cbr(13) if(10)
	cbr(0) else
)

def(40, sw_building_ground_x_register_sub2) subroutine(sw_building_layout_sub2,
	cbr(1) if(0)
	cbr(3) if(1)
	cbr(5) if(2)
	cbr(6) if(3)
	cbr(7) if(4)
	cbr(8) if(5)
	cbr(9) if(6)
	cbr(10) if(7)
	cbr(11) if(8)
	cbr(12) if(9)
	cbr(0) else
)

def(39, sw_building_ground_y_register_sub2) subroutine(sw_building_layout_sub2,
	cbr(2) if(0)
	cbr(4) if(1)
	cbr(5) if(2)
	cbr(8) if(3)
	cbr(7) if(4)
	cbr(6) if(5)
	cbr(9) if(6)
	cbr(12) if(7)
	cbr(11) if(8)
	cbr(10) if(9)
	cbr(0) else
)

def(45, sw_building_ground_x_register_sub) subroutine(sw_terrain_snow,
	ref(sw_building_ground_x_register_sub2) if(1)
	cbr(0) else
)

def(41, sw_building_ground_y_register_sub) subroutine(sw_terrain_snow,
	ref(sw_building_ground_y_register_sub2) if(1)
	cbr(0) else
)

def(30, sw_building_x_register_sub) calculate({subroutine(sw_building_x_layout_sub) + subroutine(sw_building_register_sub_snow)},
	cbfail() else
)

def(42, sw_building_y_register_sub) calculate({subroutine(sw_building_y_layout_sub) + subroutine(sw_building_register_sub_snow)},
	cbfail() else
)

def(47, sw_building_ground_register) setregisters(REGISTER_BUILDING_GROUND_OFFSET, {sub(sw_building_ground_x_register_sub), sub(sw_building_ground_y_register_sub)}, ref(sw_set_registers))
def(46, sw_building_registers) setregisters(REGISTER_BUILDING_OFFSET, {sub(sw_building_x_register_sub), sub(sw_building_y_register_sub)}, ref(sw_building_ground_register))

// spriteset links
forloop(X, {makestation(X, default(ref(sw_building_registers)))}, BUILDING_LOW .. BUILDING_HIGH)

// modular station overpasses
forloop(X, {
definestation(X, "",
	class(CLASS_BUILDINGS)
)}, BUILDING_LOW_HP_A .. BUILDING_HIGH_TRACK)


layout(BUILDING_LOW_HP_A, LAYOUT_BUILDING_LOW_HP_A)
layout(BUILDING_LOW_HP_B, LAYOUT_BUILDING_LOW_HP_B)
layout(BUILDING_LOW_HP_C, LAYOUT_BUILDING_LOW_HP_C)

layout(BUILDING_HIGH_HP_A, LAYOUT_BUILDING_HIGH_HP_A)
layout(BUILDING_HIGH_HP_B, LAYOUT_BUILDING_HIGH_HP_B)
layout(BUILDING_HIGH_HP_C, LAYOUT_BUILDING_HIGH_HP_C)

layout(BUILDING_LOW_LP_A, LAYOUT_BUILDING_LOW_LP_A)
layout(BUILDING_LOW_LP_B, LAYOUT_BUILDING_LOW_LP_B)
layout(BUILDING_LOW_LP_C, LAYOUT_BUILDING_LOW_LP_C)

layout(BUILDING_HIGH_LP_A, LAYOUT_BUILDING_HIGH_LP_A)
layout(BUILDING_HIGH_LP_B, LAYOUT_BUILDING_HIGH_LP_B)
layout(BUILDING_HIGH_LP_C, LAYOUT_BUILDING_HIGH_LP_C)

layout(BUILDING_LOW_LAP_A, LAYOUT_BUILDING_LOW_LAP_A)
layout(BUILDING_LOW_LAP_B, LAYOUT_BUILDING_LOW_LAP_B)
layout(BUILDING_LOW_LAP_C, LAYOUT_BUILDING_LOW_LAP_C)

layout(BUILDING_HIGH_LAP_A, LAYOUT_BUILDING_HIGH_LAP_A)
layout(BUILDING_HIGH_LAP_B, LAYOUT_BUILDING_HIGH_LAP_B)
layout(BUILDING_HIGH_LAP_C, LAYOUT_BUILDING_HIGH_LAP_C)

layout(BUILDING_LOW_TRACK, LAYOUT_BUILDING_LOW_TRACK)
layout(BUILDING_HIGH_TRACK, LAYOUT_BUILDING_HIGH_TRACK)

def(29, sw_building_poleA) tinfo_statid(pos(0, -1), shiftmask(0,0x1FF),
	cbr(0) if(0x100+BUILDING_LOW .. 0x100+BUILDING_HIGH)
	cbr(1) else
)
def(28, sw_building_poleB) tinfo_statid(pos(0, 1), shiftmask(0,0x1FF),
	cbr(0) if(0x100+BUILDING_LOW .. 0x100+BUILDING_HIGH)
	cbr(1) else
)
def(27, sw_building_pole_register) setregisters(REGISTER_BUILDING_POLE_SKIP, {sub(sw_building_poleA), sub(sw_building_poleB)}, ref(sw_set_registers))

def(25, sw_building_overpass_register_sub) subroutine(sw_terrain_snow,
	cbr(spr_bdoverpass_low_snow - spr_bdoverpass_low) if(1)
	cbr(0) else
)
def(31, sw_building_overpass_register) setregisters(REGISTER_BUILDING_OVERPASS_OFFSET, sub(sw_building_overpass_register_sub), ref(sw_building_pole_register))

def(30, sw_building_overpass_menu) setregisters(REGISTER_BUILDING_OVERPASS_OFFSET, {0, 1, 1}, ref(sw_set_registers))


forloop(X, {makestation(X, link(ref(sw_building_overpass_menu), MENU) default(ref(sw_building_overpass_register)))}, BUILDING_LOW_HP_A .. BUILDING_HIGH_HP_C)

skipif(BUILDING_HIGH_LAP_C - BUILDING_LOW_LP_A + 1, getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
forloop(X, {makestation(X, link(ref(sw_building_overpass_menu), MENU) default(ref(sw_building_overpass_register)))}, BUILDING_LOW_LP_A .. BUILDING_HIGH_LAP_C)

forloop(X, {makestation(X, link(ref(sw_building_overpass_menu), MENU) default(ref(sw_building_overpass_register)))}, BUILDING_LOW_TRACK .. BUILDING_HIGH_TRACK)

// non-track tiles
forloop(X, {
definestation(X, "",
	class(CLASS_NONTRACK)
	callbacks({CB_LAYOUT})
	nontrack(TTD_ALLTILES)
	nowires(TTD_ALLTILES)
)}, NONTRACK_START .. NONTRACK_END)

layout(HP_NONTRACK, LAYOUT_HP_NONTRACK)
layout(HP_NONTRACK_RF_A, LAYOUT_HP_NONTRACK_RF_A)
layout(HP_NONTRACK_RF_B, LAYOUT_HP_NONTRACK_RF_B)

layout(LP_NONTRACK, LAYOUT_LP_NONTRACK)
layout(LP_NONTRACK_RF_A, LAYOUT_LP_NONTRACK_RF_A)
layout(LP_NONTRACK_RF_B, LAYOUT_LP_NONTRACK_RF_B)

layout(LAP_NONTRACK, LAYOUT_LAP_NONTRACK)
layout(LAP_NONTRACK_RF_A, LAYOUT_LAP_NONTRACK_RF_A)
layout(LAP_NONTRACK_RF_B, LAYOUT_LAP_NONTRACK_RF_B)

forloop(X, {makestation(X, default(ref(sw_set_registers)))}, HP_NONTRACK .. HP_NONTRACK_RF_B)

skipif(LAP_NONTRACK_RF_B - LP_NONTRACK + 1, getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
forloop(X, {makestation(X, default(ref(sw_set_registers)))}, LP_NONTRACK .. LAP_NONTRACK_RF_B)


// overpasses
forloop(X, {
definestation(X, "",
	class(CLASS_PLATFORMS)
	callbacks({CB_LAYOUT})
	include_lengths({1,2,3})
)}, OVERPASS_START .. OVERPASS_END)

definestation(OVERPASS_TRACK, {"", ""},
	class(CLASS_PLATFORMS, CLASS_WAYPOINT)
	callbacks({CB_LAYOUT}, {CB_LAYOUT})
	include_lengths(1, 1)
)

layout(OVERPASS_HP_A, LAYOUT_OVERPASS_HP_A)
layout(OVERPASS_HP_B, LAYOUT_OVERPASS_HP_B)
layout(OVERPASS_HP_C, LAYOUT_OVERPASS_HP_C)
layout(OVERPASS_HP_A_RF_A, LAYOUT_OVERPASS_HP_A_RF_A)
layout(OVERPASS_HP_B_RF_A, LAYOUT_OVERPASS_HP_B_RF_A)
layout(OVERPASS_HP_C_RF_A, LAYOUT_OVERPASS_HP_C_RF_A)
layout(OVERPASS_HP_A_RF_B, LAYOUT_OVERPASS_HP_A_RF_B)
layout(OVERPASS_HP_B_RF_B, LAYOUT_OVERPASS_HP_B_RF_B)
layout(OVERPASS_HP_C_RF_B, LAYOUT_OVERPASS_HP_C_RF_B)
layout(OVERPASS_LP_A, LAYOUT_OVERPASS_LP_A)
layout(OVERPASS_LP_B, LAYOUT_OVERPASS_LP_B)
layout(OVERPASS_LP_C, LAYOUT_OVERPASS_LP_C)
layout(OVERPASS_LP_A_RF_A, LAYOUT_OVERPASS_LP_A_RF_A)
layout(OVERPASS_LP_B_RF_A, LAYOUT_OVERPASS_LP_B_RF_A)
layout(OVERPASS_LP_C_RF_A, LAYOUT_OVERPASS_LP_C_RF_A)
layout(OVERPASS_LP_A_RF_B, LAYOUT_OVERPASS_LP_A_RF_B)
layout(OVERPASS_LP_B_RF_B, LAYOUT_OVERPASS_LP_B_RF_B)
layout(OVERPASS_LP_C_RF_B, LAYOUT_OVERPASS_LP_C_RF_B)
layout(OVERPASS_LAP_A, LAYOUT_OVERPASS_LAP_A)
layout(OVERPASS_LAP_B, LAYOUT_OVERPASS_LAP_B)
layout(OVERPASS_LAP_C, LAYOUT_OVERPASS_LAP_C)
layout(OVERPASS_LAP_A_RF_A, LAYOUT_OVERPASS_LAP_A_RF_A)
layout(OVERPASS_LAP_B_RF_A, LAYOUT_OVERPASS_LAP_B_RF_A)
layout(OVERPASS_LAP_C_RF_A, LAYOUT_OVERPASS_LAP_C_RF_A)
layout(OVERPASS_LAP_A_RF_B, LAYOUT_OVERPASS_LAP_A_RF_B)
layout(OVERPASS_LAP_B_RF_B, LAYOUT_OVERPASS_LAP_B_RF_B)
layout(OVERPASS_LAP_C_RF_B, LAYOUT_OVERPASS_LAP_C_RF_B)
layout(OVERPASS_TRACK, LAYOUT_OVERPASS_TRACK)

copylayout(OVERPASS_TRACK, OVERPASS_TRACK_WAYP)

def(33) plt_posrev(
	self(
		cbr(2) if(0)
		cbr(4) else
	)
)

def(32, sw_overpass_platform_layout) plt_midpos(
	self(
		cbr(0) if(0)
		ref(33) else
	)
)
def(31, sw_overpass_platform_snow) calculate({subroutine(sw_terrain_snow) * 6 + subroutine(sw_overpass_platform_layout)},
	cbfail() else
)

def(30, sw_overpass_platform_cb) callback(
	ref(sw_overpass_platform_snow) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

def(29, sw_overpass_track_snow) calculate({subroutine(sw_terrain_snow) * 2},
	cbfail() else
)

def(28, sw_overpass_track_cb) callback(
	ref(sw_overpass_track_snow) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

forloop(X, {makestation(X, default(ref(sw_overpass_platform_cb)))}, OVERPASS_HP_A .. OVERPASS_HP_C_RF_B)

skipif(OVERPASS_LAP_C_RF_B - OVERPASS_LP_A + 1, getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
forloop(X, {makestation(X, default(ref(sw_overpass_platform_cb)))}, OVERPASS_LP_A .. OVERPASS_LAP_C_RF_B)

forloop(X, {makestation(X, default(ref(sw_overpass_track_cb)))}, OVERPASS_TRACK .. OVERPASS_TRACK_WAYP)

// facilites

forloop(X, {
definestation(X, "",
	class(CLASS_FACILITIES)
	callbacks({CB_LAYOUT})
)}, PLATFORM_FACILITIES_START .. PLATFORM_FACILITIES_END)

layout(SIGN_A_HP_A, LAYOUT_SIGN_A_HP_A)
layout(SIGN_A_HP_B, LAYOUT_SIGN_A_HP_B)
layout(SIGN_A_HP_C, LAYOUT_SIGN_A_HP_C)

layout(SIGN_A_LP_A, LAYOUT_SIGN_A_LP_A)
layout(SIGN_A_LP_B, LAYOUT_SIGN_A_LP_B)
layout(SIGN_A_LP_C, LAYOUT_SIGN_A_LP_C)

layout(SIGN_A_LAP_A, LAYOUT_SIGN_A_LAP_A)
layout(SIGN_A_LAP_B, LAYOUT_SIGN_A_LAP_B)
layout(SIGN_A_LAP_C, LAYOUT_SIGN_A_LAP_C)

layout(SIGN_B_HP_B_RF_A, LAYOUT_SIGN_B_HP_B_RF_A)
layout(SIGN_B_HP_C_RF_A, LAYOUT_SIGN_B_HP_C_RF_A)
layout(SIGN_B_HP_B_RF_B, LAYOUT_SIGN_B_HP_B_RF_B)
layout(SIGN_B_HP_C_RF_B, LAYOUT_SIGN_B_HP_C_RF_B)

layout(SIGN_B_LP_B_RF_A, LAYOUT_SIGN_B_LP_B_RF_A)
layout(SIGN_B_LP_C_RF_A, LAYOUT_SIGN_B_LP_C_RF_A)
layout(SIGN_B_LP_B_RF_B, LAYOUT_SIGN_B_LP_B_RF_B)
layout(SIGN_B_LP_C_RF_B, LAYOUT_SIGN_B_LP_C_RF_B)

layout(SIGN_B_LAP_B_RF_A, LAYOUT_SIGN_B_LAP_B_RF_A)
layout(SIGN_B_LAP_C_RF_A, LAYOUT_SIGN_B_LAP_C_RF_A)
layout(SIGN_B_LAP_B_RF_B, LAYOUT_SIGN_B_LAP_B_RF_B)
layout(SIGN_B_LAP_C_RF_B, LAYOUT_SIGN_B_LAP_C_RF_B)


layout(SIGN_C_HP_A, LAYOUT_SIGN_C_HP_A)
layout(SIGN_C_HP_B, LAYOUT_SIGN_C_HP_B)
layout(SIGN_C_HP_C, LAYOUT_SIGN_C_HP_C)

layout(SIGN_C_HP_A_RF_A, LAYOUT_SIGN_C_HP_A_RF_A)
layout(SIGN_C_HP_B_RF_A, LAYOUT_SIGN_C_HP_B_RF_A)
layout(SIGN_C_HP_C_RF_A, LAYOUT_SIGN_C_HP_C_RF_A)
layout(SIGN_C_HP_A_RF_B, LAYOUT_SIGN_C_HP_A_RF_B)
layout(SIGN_C_HP_B_RF_B, LAYOUT_SIGN_C_HP_B_RF_B)
layout(SIGN_C_HP_C_RF_B, LAYOUT_SIGN_C_HP_C_RF_B)

layout(SIGN_C_LP_A, LAYOUT_SIGN_C_LP_A)
layout(SIGN_C_LP_B, LAYOUT_SIGN_C_LP_B)
layout(SIGN_C_LP_C, LAYOUT_SIGN_C_LP_C)

layout(SIGN_C_LP_A_RF_A, LAYOUT_SIGN_C_LP_A_RF_A)
layout(SIGN_C_LP_B_RF_A, LAYOUT_SIGN_C_LP_B_RF_A)
layout(SIGN_C_LP_C_RF_A, LAYOUT_SIGN_C_LP_C_RF_A)
layout(SIGN_C_LP_A_RF_B, LAYOUT_SIGN_C_LP_A_RF_B)
layout(SIGN_C_LP_B_RF_B, LAYOUT_SIGN_C_LP_B_RF_B)
layout(SIGN_C_LP_C_RF_B, LAYOUT_SIGN_C_LP_C_RF_B)

layout(SIGN_C_LAP_A, LAYOUT_SIGN_C_LAP_A)
layout(SIGN_C_LAP_B, LAYOUT_SIGN_C_LAP_B)
layout(SIGN_C_LAP_C, LAYOUT_SIGN_C_LAP_C)

layout(SIGN_C_LAP_A_RF_A, LAYOUT_SIGN_C_LAP_A_RF_A)
layout(SIGN_C_LAP_B_RF_A, LAYOUT_SIGN_C_LAP_B_RF_A)
layout(SIGN_C_LAP_C_RF_A, LAYOUT_SIGN_C_LAP_C_RF_A)
layout(SIGN_C_LAP_A_RF_B, LAYOUT_SIGN_C_LAP_A_RF_B)
layout(SIGN_C_LAP_B_RF_B, LAYOUT_SIGN_C_LAP_B_RF_B)
layout(SIGN_C_LAP_C_RF_B, LAYOUT_SIGN_C_LAP_C_RF_B)


layout(LED_HP_A_RF_A, LAYOUT_LED_HP_A_RF_A)
layout(LED_HP_B_RF_A, LAYOUT_LED_HP_B_RF_A)
layout(LED_HP_C_RF_A, LAYOUT_LED_HP_C_RF_A)
layout(LED_HP_A_RF_B, LAYOUT_LED_HP_A_RF_B)
layout(LED_HP_B_RF_B, LAYOUT_LED_HP_B_RF_B)
layout(LED_HP_C_RF_B, LAYOUT_LED_HP_C_RF_B)

layout(LED_LP_A_RF_A, LAYOUT_LED_LP_A_RF_A)
layout(LED_LP_B_RF_A, LAYOUT_LED_LP_B_RF_A)
layout(LED_LP_C_RF_A, LAYOUT_LED_LP_C_RF_A)
layout(LED_LP_A_RF_B, LAYOUT_LED_LP_A_RF_B)
layout(LED_LP_B_RF_B, LAYOUT_LED_LP_B_RF_B)
layout(LED_LP_C_RF_B, LAYOUT_LED_LP_C_RF_B)

layout(LED_LAP_A_RF_A, LAYOUT_LED_LAP_A_RF_A)
layout(LED_LAP_B_RF_A, LAYOUT_LED_LAP_B_RF_A)
layout(LED_LAP_C_RF_A, LAYOUT_LED_LAP_C_RF_A)
layout(LED_LAP_A_RF_B, LAYOUT_LED_LAP_A_RF_B)
layout(LED_LAP_B_RF_B, LAYOUT_LED_LAP_B_RF_B)
layout(LED_LAP_C_RF_B, LAYOUT_LED_LAP_C_RF_B)


layout(WAITINGROOM_HP_A, LAYOUT_WAITINGROOM_HP_A)
layout(WAITINGROOM_HP_B, LAYOUT_WAITINGROOM_HP_B)
layout(WAITINGROOM_HP_C, LAYOUT_WAITINGROOM_HP_C)

layout(WAITINGROOM_HP_A_RF_A, LAYOUT_WAITINGROOM_HP_A_RF_A)
layout(WAITINGROOM_HP_B_RF_A, LAYOUT_WAITINGROOM_HP_B_RF_A)
layout(WAITINGROOM_HP_C_RF_A, LAYOUT_WAITINGROOM_HP_C_RF_A)
layout(WAITINGROOM_HP_A_RF_B, LAYOUT_WAITINGROOM_HP_A_RF_B)
layout(WAITINGROOM_HP_B_RF_B, LAYOUT_WAITINGROOM_HP_B_RF_B)
layout(WAITINGROOM_HP_C_RF_B, LAYOUT_WAITINGROOM_HP_C_RF_B)

layout(WAITINGROOM_LP_A, LAYOUT_WAITINGROOM_LP_A)
layout(WAITINGROOM_LP_B, LAYOUT_WAITINGROOM_LP_B)
layout(WAITINGROOM_LP_C, LAYOUT_WAITINGROOM_LP_C)

layout(WAITINGROOM_LP_A_RF_A, LAYOUT_WAITINGROOM_LP_A_RF_A)
layout(WAITINGROOM_LP_B_RF_A, LAYOUT_WAITINGROOM_LP_B_RF_A)
layout(WAITINGROOM_LP_C_RF_A, LAYOUT_WAITINGROOM_LP_C_RF_A)
layout(WAITINGROOM_LP_A_RF_B, LAYOUT_WAITINGROOM_LP_A_RF_B)
layout(WAITINGROOM_LP_B_RF_B, LAYOUT_WAITINGROOM_LP_B_RF_B)
layout(WAITINGROOM_LP_C_RF_B, LAYOUT_WAITINGROOM_LP_C_RF_B)

layout(WAITINGROOM_LAP_A, LAYOUT_WAITINGROOM_LAP_A)
layout(WAITINGROOM_LAP_B, LAYOUT_WAITINGROOM_LAP_B)
layout(WAITINGROOM_LAP_C, LAYOUT_WAITINGROOM_LAP_C)

layout(WAITINGROOM_LAP_A_RF_A, LAYOUT_WAITINGROOM_LAP_A_RF_A)
layout(WAITINGROOM_LAP_B_RF_A, LAYOUT_WAITINGROOM_LAP_B_RF_A)
layout(WAITINGROOM_LAP_C_RF_A, LAYOUT_WAITINGROOM_LAP_C_RF_A)
layout(WAITINGROOM_LAP_A_RF_B, LAYOUT_WAITINGROOM_LAP_A_RF_B)
layout(WAITINGROOM_LAP_B_RF_B, LAYOUT_WAITINGROOM_LAP_B_RF_B)
layout(WAITINGROOM_LAP_C_RF_B, LAYOUT_WAITINGROOM_LAP_C_RF_B)


layout(UNDERPASS_HP_A_RF_A, LAYOUT_UNDERPASS_HP_A_RF_A)
layout(UNDERPASS_HP_B_RF_A, LAYOUT_UNDERPASS_HP_B_RF_A)
layout(UNDERPASS_HP_C_RF_A, LAYOUT_UNDERPASS_HP_C_RF_A)
layout(UNDERPASS_HP_A_RF_B, LAYOUT_UNDERPASS_HP_A_RF_B)
layout(UNDERPASS_HP_B_RF_B, LAYOUT_UNDERPASS_HP_B_RF_B)
layout(UNDERPASS_HP_C_RF_B, LAYOUT_UNDERPASS_HP_C_RF_B)

layout(UNDERPASS_LP_A_RF_A, LAYOUT_UNDERPASS_LP_A_RF_A)
layout(UNDERPASS_LP_B_RF_A, LAYOUT_UNDERPASS_LP_B_RF_A)
layout(UNDERPASS_LP_C_RF_A, LAYOUT_UNDERPASS_LP_C_RF_A)
layout(UNDERPASS_LP_A_RF_B, LAYOUT_UNDERPASS_LP_A_RF_B)
layout(UNDERPASS_LP_B_RF_B, LAYOUT_UNDERPASS_LP_B_RF_B)
layout(UNDERPASS_LP_C_RF_B, LAYOUT_UNDERPASS_LP_C_RF_B)

layout(UNDERPASS_LAP_A_RF_A, LAYOUT_UNDERPASS_LAP_A_RF_A)
layout(UNDERPASS_LAP_B_RF_A, LAYOUT_UNDERPASS_LAP_B_RF_A)
layout(UNDERPASS_LAP_C_RF_A, LAYOUT_UNDERPASS_LAP_C_RF_A)
layout(UNDERPASS_LAP_A_RF_B, LAYOUT_UNDERPASS_LAP_A_RF_B)
layout(UNDERPASS_LAP_B_RF_B, LAYOUT_UNDERPASS_LAP_B_RF_B)
layout(UNDERPASS_LAP_C_RF_B, LAYOUT_UNDERPASS_LAP_C_RF_B)


layout(LIGHT_HP_A, LAYOUT_LIGHT_HP_A)
layout(LIGHT_HP_B, LAYOUT_LIGHT_HP_B)
layout(LIGHT_HP_C, LAYOUT_LIGHT_HP_C)

layout(LIGHT_LP_A, LAYOUT_LIGHT_LP_A)
layout(LIGHT_LP_B, LAYOUT_LIGHT_LP_B)
layout(LIGHT_LP_C, LAYOUT_LIGHT_LP_C)

layout(LIGHT_LAP_A, LAYOUT_LIGHT_LAP_A)
layout(LIGHT_LAP_B, LAYOUT_LIGHT_LAP_B)
layout(LIGHT_LAP_C, LAYOUT_LIGHT_LAP_C)


// Platform + Sign A Start
def(39, sw_check_stasignA_pB) tinfo_statid(pos(0, 1), shiftmask(0,0x1FF),
	cbr(2) if(0x100+SIGN_A_HP_A, 0x100+SIGN_A_HP_C, 0x100+SIGN_A_LP_A, 0x100+SIGN_A_LP_C, 0x100+SIGN_A_LAP_A, 0x100+SIGN_A_LAP_C)
	cbr(0) else
)

def(38, sw_check_stasignA_pA) tinfo_statid(pos(0, -1), shiftmask(0,0x1FF),
	cbr(1) if(0x100+SIGN_A_HP_B, 0x100+SIGN_A_HP_C, 0x100+SIGN_A_LP_B, 0x100+SIGN_A_LP_C, 0x100+SIGN_A_LAP_B, 0x100+SIGN_A_LAP_C)
	cbr(0) else
)

def(37, sw_stasignA_offset) calculate({subroutine(sw_check_stasignA_pB) + subroutine(sw_check_stasignA_pA)},
	cbfail() else
)

def(44, sw_reg_signA_skip) subroutine(sw_check_stasignA_pB,
	cbr(0) if(2)
	cbr(1) else
)

def(43, sw_reg_signA_offset_y) subroutine(sw_check_stasignA_pA,
	cbr(-1) if(1)
	cbr(1) else
)

def(42, sw_set_reg_signA) setregisters(REGISTER_SIGN_A_OFFSET_Y, {sub(sw_reg_signA_offset_y), sub(sw_reg_signA_skip)}, ref(sw_set_registers))

def(33) plt_posrev(
	cbr(2) if(0)
	cbr(1) else
)

def(32) plt_pos(
	cbr(0) if(0)
	ref(33) else
)

def(35, sw_check_stasign_pos) plt_length(
	cbr(1) if(1)
	ref(32) else
)

def(31, sw_stasignA_layout) calculate({subroutine(sw_terrain_snow) * 3 + subroutine(sw_check_stasign_pos) * 2},
	cbfail() else
)

def(30, sw_stasignA_cb) callback(
	ref(sw_stasignA_layout) if(CB_LAYOUT)
	ref(sw_set_reg_signA) else
)

def(36, sw_stasignA_menu_cb) callback(
	cbr(2) if(CB_LAYOUT)
	ref(sw_set_reg_signA) else
)
// Platform + Sign A End

forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, LIGHT_HP_A .. LIGHT_HP_C)
skipif(LIGHT_LAP_C - LIGHT_LP_A + 1, getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, LIGHT_LP_A .. LIGHT_LAP_C)

forloop(X, {makestation(X, link(ref(sw_stasignA_menu_cb), MENU) default(ref(sw_stasignA_cb)))}, SIGN_A_HP_A .. SIGN_A_HP_C)
skipif(SIGN_A_LAP_C - SIGN_A_LP_A + 1, getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
forloop(X, {makestation(X, link(ref(sw_stasignA_menu_cb), MENU) default(ref(sw_stasignA_cb)))}, SIGN_A_LP_A .. SIGN_A_LAP_C)

forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, SIGN_B_HP_B_RF_A .. SIGN_B_HP_C_RF_B)
skipif(SIGN_B_LAP_C_RF_B - SIGN_B_LP_B_RF_A + 1, getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, SIGN_B_LP_B_RF_A .. SIGN_B_LAP_C_RF_B)

forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, SIGN_C_HP_A .. SIGN_C_HP_C_RF_B)
skipif(SIGN_C_LAP_C_RF_B - SIGN_C_LP_A + 1, getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, SIGN_C_LP_A .. SIGN_C_LAP_C_RF_B)

forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, LED_HP_A_RF_A .. LED_HP_C_RF_B)
skipif(LED_LAP_C_RF_B - LED_LP_A_RF_A + 1, getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, LED_LP_A_RF_A .. LED_LAP_C_RF_B)

forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, WAITINGROOM_HP_A .. WAITINGROOM_HP_C_RF_B)
skipif(WAITINGROOM_LAP_C_RF_B - WAITINGROOM_LP_A + 1, getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, WAITINGROOM_LP_A .. WAITINGROOM_LAP_C_RF_B)

forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, UNDERPASS_HP_A_RF_A .. UNDERPASS_HP_C_RF_B)
skipif(UNDERPASS_LAP_C_RF_B - UNDERPASS_LP_A_RF_A + 1, getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, UNDERPASS_LP_A_RF_A .. UNDERPASS_LAP_C_RF_B)



// psd

forloop(X, {
definestation(X, "",
	class(CLASS_PSD)
	callbacks({CB_LAYOUT, CB_AFRAME})
	anim_info({7, NOLOOP})
	anim_speed(3)
	anim_triggers({ARRIVE, LEAVE})
)}, PSD_START .. PSD_END)

layout(PSD_HP_A, LAYOUT_PSD_HP_A)
layout(PSD_HP_B, LAYOUT_PSD_HP_B)
layout(PSD_HP_C, LAYOUT_PSD_HP_C)
layout(PSD_HP_A_RF_A, LAYOUT_PSD_HP_A_RF_A)
layout(PSD_HP_B_RF_A, LAYOUT_PSD_HP_B_RF_A)
layout(PSD_HP_C_RF_A, LAYOUT_PSD_HP_C_RF_A)
layout(PSD_HP_A_RF_B, LAYOUT_PSD_HP_A_RF_B)
layout(PSD_HP_B_RF_B, LAYOUT_PSD_HP_B_RF_B)
layout(PSD_HP_C_RF_B, LAYOUT_PSD_HP_C_RF_B)

def(33, sw_psd_offset) anim_frame(
	cbr(2) if(1)
	cbr(2) if(5)
	cbr(4) if(2 .. 4)
	cbr(0) else
)

def(37, sw_set_reg_psd) setregisters(REGISTER_PSD_OFFSET, {sub(sw_psd_offset)}, ref(sw_set_registers))

skipif(1, getowngrfparameter(PARAM_FLAGS), BITCLR, PARAM_FLAGS_PSDSFX)
def(32, sw_psd_animframe) anim_frame(
	animframe(A_STOP) if(3)
	animframe(A_NEXT, _S_snd_psd_open) if(1)
	animframe(A_NEXT, _S_snd_psd_close) if(4)
	animframe(A_NEXT) else
)
skipif(1, getowngrfparameter(PARAM_FLAGS), BITSET, PARAM_FLAGS_PSDSFX)
def(32, sw_psd_animframe) anim_frame(
	animframe(A_STOP) if(3)
	animframe(A_NEXT) else
)

def(35, sw_psd_animctrl_leave) anim_frame(
	animcontrol(6) if(0)
	animcontrol(5) if(1)
	animcontrol(4) else
)

def(34, sw_psd_animctrl) anim_trigger(
	animcontrol(1) if(ARRIVE)
	ref(sw_psd_animctrl_leave) if(LEAVE)
	animcontrol(A_NOP) else
)

def(30, sw_psd_cb) callback(
	ref(sw_platform_cb) if(CB_LAYOUT)
	ref(sw_psd_animctrl) if(CB_ACONTROL)
	ref(sw_psd_animframe) if(CB_AFRAME)
	ref(sw_set_reg_psd) else
)

def(36, sw_psd_menu_cb) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_set_reg_psd) else
)

forloop(X, {makestation(X, link(ref(sw_psd_menu_cb), MENU) default(ref(sw_psd_cb)))}, PSD_START .. PSD_END)

skipif(5, getowngrfparameter(PARAM_FLAGS), BITCLR, PARAM_FLAGS_BRIDGE)

setproperties(PLATFORM_START .. CROSSING_END,
	bridge_height({2,2,2,2})
)

setproperties(OVERPASS_START .. OVERPASS_END,
	bridge_height({3,3,3,3})
)

setproperties(PLATFORM_FACILITIES_START .. WAITINGROOM_LAP_C_RF_B,
	bridge_height({2,2,2,2})
)

setproperties(LIGHT_HP_A .. LIGHT_LAP_C,
	bridge_height({3,3,3,3})
)

setproperties(PSD_START .. PSD_END,
	bridge_height({2,2,2,2})
)


classnames(PLATFORM_START, STR_CLASS_PLATFORMS)
stationnames(PLATFORM_START, STR_PLATFORMS)
stationnames(OVERPASS_START, STR_OVERPASS)

classnames(CROSSING_START, STR_CLASS_CROSSINGS)
stationnames(CROSSING_START, STR_CROSSINGS)

classnames(BUILDING_START, STR_CLASS_BUILDINGS)
stationnames(BUILDING_START, STR_BUILDINGS)

classnames(NONTRACK_START, STR_CLASS_NONTRACK)
stationnames(NONTRACK_START, STR_NONTRACK)

classnames(PLATFORM_FACILITIES_START, STR_CLASS_FACILITIES)
stationnames(PLATFORM_FACILITIES_START, STR_FACILITIES)

classnames(PSD_START, STR_CLASS_PSD)
stationnames(PSD_START, STR_PSD)

skip(EXIT)

placelabel(label_compat)
include(sprites/kws1_compat.nfx)