include(sprites/kws_compat.m4)

// platforms

forloop(X, {
definestation(X, "",
	class(CLASS_PLATFORMS)
	callbacks({CB_LAYOUT})
)}, HP_A .. LAP_B_RF_B)

forloop(X, {
definestation(X, "",
	class(CLASS_PLATFORMS)
	callbacks({CB_LAYOUT})
)}, HP_C .. LAP_C_RF_B)

layout(HP_A, LAYOUT_HP_A)
layout(HP_B, LAYOUT_HP_B)
layout(HP_C, LAYOUT_HP_C)

layout(HP_A_RF_A, LAYOUT_HP_A_RF_A)
layout(HP_B_RF_A, LAYOUT_HP_B_RF_A)
layout(HP_C_RF_A, LAYOUT_HP_C_RF_A)

layout(HP_A_RF_B, LAYOUT_HP_A_RF_B)
layout(HP_B_RF_B, LAYOUT_HP_B_RF_B)
layout(HP_C_RF_B, LAYOUT_HP_C_RF_B)

layout(LP_A, LAYOUT_LP_A)
layout(LP_B, LAYOUT_LP_B)
layout(LP_C, LAYOUT_LP_C)

layout(LP_A_RF_A, LAYOUT_LP_A_RF_A)
layout(LP_B_RF_A, LAYOUT_LP_B_RF_A)
layout(LP_C_RF_A, LAYOUT_LP_C_RF_A)

layout(LP_A_RF_B, LAYOUT_LP_A_RF_B)
layout(LP_B_RF_B, LAYOUT_LP_B_RF_B)
layout(LP_C_RF_B, LAYOUT_LP_C_RF_B)

layout(LAP_A, LAYOUT_LAP_A)
layout(LAP_B, LAYOUT_LAP_B)
layout(LAP_C, LAYOUT_LAP_C)

layout(LAP_A_RF_A, LAYOUT_LAP_A_RF_A)
layout(LAP_B_RF_A, LAYOUT_LAP_B_RF_A)
layout(LAP_C_RF_A, LAYOUT_LAP_C_RF_A)

layout(LAP_A_RF_B, LAYOUT_LAP_A_RF_B)
layout(LAP_B_RF_B, LAYOUT_LAP_B_RF_B)
layout(LAP_C_RF_B, LAYOUT_LAP_C_RF_B)

forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, HP_A .. HP_C_RF_B)
forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, LP_A .. LAP_C_RF_B)

// crossings

forloop(X, {
definestation(X, "",
	class(CLASS_CROSSINGS)
	callbacks({CB_LAYOUT, CB_AFRAME})
	anim_triggers({BUILT})
)}, LP_A_CR .. LP_B_CR)

forloop(X, {
definestation(X, "",
	class(CLASS_CROSSINGS)
	callbacks({CB_LAYOUT, CB_AFRAME})
	anim_triggers({BUILT})
)}, LP_A_CR_RF .. LP_B_CR_RF)

layout(LP_A_CR, LAYOUT_LP_A_CR)
layout(LP_B_CR, LAYOUT_LP_B_CR)

layout(LP_A_CR_RF, LAYOUT_LP_A_CR_RF_A)
layout(LP_B_CR_RF, LAYOUT_LP_B_CR_RF_A)

def(25) plt_posrev(
	cbr(2) if(0)
	cbr(0) else
)

def(27) plt_pos(
	cbr(4) if(0)
	ref(25) else
)

def(28, sw_pos) plt_length(
	cbr(0) if(1)
	ref(27) else
)

def(26, sw_crossing_layout) calculate({subroutine(sw_terrain_snow) * 6 + subroutine(sw_pos)},
	cbfail() else
)

def(29, sw_crossing_cb) callback(
	ref(sw_crossing_layout) if(CB_LAYOUT)
	ref(sw_pos) if(CB_ACONTROL)
	ref(sw_pos) if(CB_AFRAME)
	ref(sw_set_registers) else
)

forloop(X, {makestation(X, default(ref(sw_crossing_cb)))}, LP_A_CR .. LP_B_CR)
forloop(X, {makestation(X, default(ref(sw_crossing_cb)))}, LP_A_CR_RF .. LP_B_CR_RF)

forloop(X, {
definestation(X, "",
	class(CLASS_CROSSINGS)
	callbacks({CB_LAYOUT})
)}, TRACK_CR_A .. TRACK_CR_C)

forloop(X, {
definestation(X, "",
	class(CLASS_WAYPOINT)
	callbacks({CB_LAYOUT})
)}, TRACK_CR_A_WAYP .. TRACK_CR_C_WAYP)

layout(TRACK_CR_A, LAYOUT_TRACK_CR)
copylayout(TRACK_CR_A, TRACK_CR_B, TRACK_CR_C, TRACK_CR_A_WAYP, TRACK_CR_B_WAYP, TRACK_CR_C_WAYP)

def(36, sw_crossing_layout_A) calculate({subroutine(sw_terrain_snow) * 6},
	cbfail() else
)

def(37, sw_crossing_layout_B) calculate({subroutine(sw_terrain_snow) * 6 + 4},
	cbfail() else
)

def(38, sw_crossing_layout_C) calculate({subroutine(sw_terrain_snow) * 6 + 2},
	cbfail() else
)

def(30, sw_crossing_track_A_cb) callback(
	ref(sw_crossing_layout_A) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

def(31, sw_crossing_track_B_cb) callback(
	ref(sw_crossing_layout_B) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

def(32, sw_crossing_track_C_cb) callback(
	ref(sw_crossing_layout_C) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

makestation(TRACK_CR_A, default(ref(sw_crossing_track_A_cb)))
makestation(TRACK_CR_B, default(ref(sw_crossing_track_B_cb)))
makestation(TRACK_CR_C, default(ref(sw_crossing_track_C_cb)))
makestation(TRACK_CR_A_WAYP, default(ref(sw_crossing_track_A_cb)))
makestation(TRACK_CR_B_WAYP, default(ref(sw_crossing_track_B_cb)))
makestation(TRACK_CR_C_WAYP, default(ref(sw_crossing_track_C_cb)))

// building blocks
forloop(X, {
definestation(X, "",
	class(CLASS_BUILDINGS)
	nontrack(TTD_ALLTILES)
	nowires(TTD_ALLTILES)
)}, BUILDING_LOW .. BUILDING_HIGH)

layout(BUILDING_LOW, LAYOUT_BUILDING_LOW)
layout(BUILDING_HIGH, LAYOUT_BUILDING_HIGH)

def(33) tinfo_statid(pos(0, 1),
	cbr(0) if(0xFFFF)
	cbr(1) else
)

def(32) tinfo_statid(pos(0, -1),
	cbr(0) if(0xFFFF)
	cbr(2) else
)

def(34) calculate({tinfo_trackconnect() >> 10 AND 3 OR subroutine(32) OR subroutine(33)},
	cbfail() else
)

def(36, sw_building_register_sub_snow) subroutine(sw_terrain_snow,
	cbr(spr_building_low_snow - spr_building_low) if(1)
	cbr(0) else
)

def(35, sw_building_layout_sub2) subroutine(34,
	cbr(1) if(1)
	cbr(10) if(3)
	cbr(0) else
)

def(31, sw_building_x_layout_sub) subroutine(sw_building_layout_sub2,
	cbr(0) if(0)
	cbr(2) if(1)
	cbr(4) if(2)
	cbr(5) if(3)
	cbr(6) if(4)
	cbr(7) if(5)
	cbr(8) if(6)
	cbr(9) if(7)
	cbr(10) if(8)
	cbr(11) if(9)
	cbr(12) if(10)
	cbr(0) else
)

def(37, sw_building_y_layout_sub) subroutine(sw_building_layout_sub2,
	cbr(1) if(0)
	cbr(3) if(1)
	cbr(4) if(2)
	cbr(7) if(3)
	cbr(6) if(4)
	cbr(5) if(5)
	cbr(8) if(6)
	cbr(11) if(7)
	cbr(10) if(8)
	cbr(9) if(9)
	cbr(13) if(10)
	cbr(0) else
)

def(40, sw_building_ground_x_register_sub2) subroutine(sw_building_layout_sub2,
	cbr(1) if(0)
	cbr(3) if(1)
	cbr(5) if(2)
	cbr(6) if(3)
	cbr(7) if(4)
	cbr(8) if(5)
	cbr(9) if(6)
	cbr(10) if(7)
	cbr(11) if(8)
	cbr(12) if(9)
	cbr(0) else
)

def(39, sw_building_ground_y_register_sub2) subroutine(sw_building_layout_sub2,
	cbr(2) if(0)
	cbr(4) if(1)
	cbr(5) if(2)
	cbr(8) if(3)
	cbr(7) if(4)
	cbr(6) if(5)
	cbr(9) if(6)
	cbr(12) if(7)
	cbr(11) if(8)
	cbr(10) if(9)
	cbr(0) else
)

def(45, sw_building_ground_x_register_sub) subroutine(sw_terrain_snow,
	ref(sw_building_ground_x_register_sub2) if(1)
	cbr(0) else
)

def(41, sw_building_ground_y_register_sub) subroutine(sw_terrain_snow,
	ref(sw_building_ground_y_register_sub2) if(1)
	cbr(0) else
)

def(30, sw_building_x_register_sub) calculate({subroutine(sw_building_x_layout_sub) + subroutine(sw_building_register_sub_snow)},
	cbfail() else
)

def(42, sw_building_y_register_sub) calculate({subroutine(sw_building_y_layout_sub) + subroutine(sw_building_register_sub_snow)},
	cbfail() else
)

def(47, sw_building_ground_register) setregisters(REGISTER_BUILDING_GROUND_OFFSET, {sub(sw_building_ground_x_register_sub), sub(sw_building_ground_y_register_sub)}, ref(sw_set_registers))
def(46, sw_building_registers) setregisters(REGISTER_BUILDING_OFFSET, {sub(sw_building_x_register_sub), sub(sw_building_y_register_sub)}, ref(sw_building_ground_register))

// spriteset links
forloop(X, {makestation(X, default(ref(sw_building_registers)))}, BUILDING_LOW .. BUILDING_HIGH)

// modular station overpasses
forloop(X, {
definestation(X, "",
	class(CLASS_BUILDINGS)
)}, BUILDING_LOW_HP_A .. BUILDING_HIGH_LAP_C)


layout(BUILDING_LOW_HP_A, LAYOUT_BUILDING_LOW_HP_A)
layout(BUILDING_LOW_HP_B, LAYOUT_BUILDING_LOW_HP_B)
layout(BUILDING_LOW_HP_C, LAYOUT_BUILDING_LOW_HP_C)

layout(BUILDING_HIGH_HP_A, LAYOUT_BUILDING_HIGH_HP_A)
layout(BUILDING_HIGH_HP_B, LAYOUT_BUILDING_HIGH_HP_B)
layout(BUILDING_HIGH_HP_C, LAYOUT_BUILDING_HIGH_HP_C)

layout(BUILDING_LOW_LP_A, LAYOUT_BUILDING_LOW_LP_A)
layout(BUILDING_LOW_LP_B, LAYOUT_BUILDING_LOW_LP_B)
layout(BUILDING_LOW_LP_C, LAYOUT_BUILDING_LOW_LP_C)

layout(BUILDING_HIGH_LP_A, LAYOUT_BUILDING_HIGH_LP_A)
layout(BUILDING_HIGH_LP_B, LAYOUT_BUILDING_HIGH_LP_B)
layout(BUILDING_HIGH_LP_C, LAYOUT_BUILDING_HIGH_LP_C)

layout(BUILDING_LOW_LAP_A, LAYOUT_BUILDING_LOW_LAP_A)
layout(BUILDING_LOW_LAP_B, LAYOUT_BUILDING_LOW_LAP_B)
layout(BUILDING_LOW_LAP_C, LAYOUT_BUILDING_LOW_LAP_C)

layout(BUILDING_HIGH_LAP_A, LAYOUT_BUILDING_HIGH_LAP_A)
layout(BUILDING_HIGH_LAP_B, LAYOUT_BUILDING_HIGH_LAP_B)
layout(BUILDING_HIGH_LAP_C, LAYOUT_BUILDING_HIGH_LAP_C)

layout(BUILDING_LOW_TRACK, LAYOUT_BUILDING_LOW_TRACK)
layout(BUILDING_HIGH_TRACK, LAYOUT_BUILDING_HIGH_TRACK)

def(29, sw_building_poleA) tinfo_statid(pos(0, -1), shiftmask(0,0x1FF),
	cbr(0) if(0x100+BUILDING_LOW .. 0x100+BUILDING_HIGH)
	cbr(1) else
)
def(28, sw_building_poleB) tinfo_statid(pos(0, 1), shiftmask(0,0x1FF),
	cbr(0) if(0x100+BUILDING_LOW .. 0x100+BUILDING_HIGH)
	cbr(1) else
)
def(27, sw_building_pole_register) setregisters(REGISTER_BUILDING_POLE_SKIP, {sub(sw_building_poleA), sub(sw_building_poleB)}, ref(sw_set_registers))

def(25, sw_building_overpass_register_sub) subroutine(sw_terrain_snow,
	cbr(spr_bdoverpass_low_snow - spr_bdoverpass_low) if(1)
	cbr(0) else
)
def(31, sw_building_overpass_register) setregisters(REGISTER_BUILDING_OVERPASS_OFFSET, sub(sw_building_overpass_register_sub), ref(sw_building_pole_register))

def(30, sw_building_overpass_menu) setregisters(REGISTER_BUILDING_OVERPASS_OFFSET, {0, 1, 1}, ref(sw_set_registers))


forloop(X, {makestation(X, link(ref(sw_building_overpass_menu), MENU) default(ref(sw_building_overpass_register)))}, BUILDING_LOW_HP_A .. BUILDING_HIGH_HP_C)
forloop(X, {makestation(X, link(ref(sw_building_overpass_menu), MENU) default(ref(sw_building_overpass_register)))}, BUILDING_LOW_LP_A .. BUILDING_HIGH_LAP_C)

forloop(X, {makestation(X, link(ref(sw_building_overpass_menu), MENU) default(ref(sw_building_overpass_register)))}, BUILDING_LOW_TRACK .. BUILDING_HIGH_TRACK)

// non-track tiles
forloop(X, {
definestation(X, "",
	class(CLASS_NONTRACK)
	callbacks({CB_LAYOUT})
	nontrack(TTD_ALLTILES)
	nowires(TTD_ALLTILES)
)}, HP_NONTRACK .. LAP_NONTRACK_RF_B)

layout(HP_NONTRACK, LAYOUT_HP_NONTRACK)
layout(HP_NONTRACK_RF_A, LAYOUT_HP_NONTRACK_RF_A)
layout(HP_NONTRACK_RF_B, LAYOUT_HP_NONTRACK_RF_B)

layout(LP_NONTRACK, LAYOUT_LP_NONTRACK)
layout(LP_NONTRACK_RF_A, LAYOUT_LP_NONTRACK_RF_A)
layout(LP_NONTRACK_RF_B, LAYOUT_LP_NONTRACK_RF_B)

layout(LAP_NONTRACK, LAYOUT_LAP_NONTRACK)
layout(LAP_NONTRACK_RF_A, LAYOUT_LAP_NONTRACK_RF_A)
layout(LAP_NONTRACK_RF_B, LAYOUT_LAP_NONTRACK_RF_B)

forloop(X, {makestation(X, default(ref(sw_set_registers)))}, HP_NONTRACK .. HP_NONTRACK_RF_B)

skipif(LAP_NONTRACK_RF_B - LP_NONTRACK + 1, getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
forloop(X, {makestation(X, default(ref(sw_set_registers)))}, LP_NONTRACK .. LAP_NONTRACK_RF_B)


// overpasses
forloop(X, {
definestation(X, "",
	class(CLASS_PLATFORMS)
	callbacks({CB_LAYOUT})
	include_lengths({1,2,3})
)}, OVERPASS_HP_A .. OVERPASS_LAP_B)

forloop(X, {
definestation(X, "",
	class(CLASS_PLATFORMS)
	callbacks({CB_LAYOUT})
	include_lengths({1,2,3})
)}, OVERPASS_HP_A_RF .. OVERPASS_LAP_B_RF)

definestation(OVERPASS_TRACK, {"", ""},
	class(CLASS_PLATFORMS, CLASS_WAYPOINT)
	callbacks({CB_LAYOUT}, {CB_LAYOUT})
	include_lengths(1, 1)
)

layout(OVERPASS_HP_A, LAYOUT_OVERPASS_HP_A)
layout(OVERPASS_HP_B, LAYOUT_OVERPASS_HP_B)
layout(OVERPASS_HP_A_RF, LAYOUT_OVERPASS_HP_A_RF_A)
layout(OVERPASS_HP_B_RF, LAYOUT_OVERPASS_HP_B_RF_A)
layout(OVERPASS_LP_A, LAYOUT_OVERPASS_LP_A)
layout(OVERPASS_LP_B, LAYOUT_OVERPASS_LP_B)
layout(OVERPASS_LP_A_RF, LAYOUT_OVERPASS_LP_A_RF_A)
layout(OVERPASS_LP_B_RF, LAYOUT_OVERPASS_LP_B_RF_A)
layout(OVERPASS_LAP_A, LAYOUT_OVERPASS_LAP_A)
layout(OVERPASS_LAP_B, LAYOUT_OVERPASS_LAP_B)
layout(OVERPASS_LAP_A_RF, LAYOUT_OVERPASS_LAP_A_RF_A)
layout(OVERPASS_LAP_B_RF, LAYOUT_OVERPASS_LAP_B_RF_A)
layout(OVERPASS_TRACK, LAYOUT_OVERPASS_TRACK)

copylayout(OVERPASS_TRACK, OVERPASS_TRACK_WAYP)

def(33) plt_posrev(
	self(
		cbr(2) if(0)
		cbr(4) else
	)
)

def(32, sw_overpass_platform_layout) plt_midpos(
	self(
		cbr(0) if(0)
		ref(33) else
	)
)
def(31, sw_overpass_platform_snow) calculate({subroutine(sw_terrain_snow) * 6 + subroutine(sw_overpass_platform_layout)},
	cbfail() else
)

def(30, sw_overpass_platform_cb) callback(
	ref(sw_overpass_platform_snow) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

def(29, sw_overpass_track_snow) calculate({subroutine(sw_terrain_snow) * 2},
	cbfail() else
)

def(28, sw_overpass_track_cb) callback(
	ref(sw_overpass_track_snow) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

forloop(X, {makestation(X, default(ref(sw_overpass_platform_cb)))}, OVERPASS_HP_A .. OVERPASS_HP_B_RF)
forloop(X, {makestation(X, default(ref(sw_overpass_platform_cb)))}, OVERPASS_LP_A .. OVERPASS_LAP_B_RF)

forloop(X, {makestation(X, default(ref(sw_overpass_track_cb)))}, OVERPASS_TRACK .. OVERPASS_TRACK_WAYP)

forloop(X, {
definestation(X, "",
	class(CLASS_FACILITIES)
	callbacks({CB_LAYOUT})
)}, LED_HP_A_RF_A .. LED_LAP_C_RF_B)

forloop(X, {
definestation(X, "",
	class(CLASS_FACILITIES)
	callbacks({CB_LAYOUT})
)}, SIGN_B_HP_B_RF_A .. SIGN_B_LAP_C_RF_B)

forloop(X, {
definestation(X, "",
	class(CLASS_FACILITIES)
	callbacks({CB_LAYOUT})
)}, SIGN_A_HP_B .. SIGN_A_LAP_B)

forloop(X, {
definestation(X, "",
	class(CLASS_FACILITIES)
	callbacks({CB_LAYOUT})
)}, WAITINGROOM_HP_A .. WAITINGROOM_HP_B)

forloop(X, {
definestation(X, "",
	class(CLASS_FACILITIES)
	callbacks({CB_LAYOUT})
)}, WAITINGROOM_LP_A .. WAITINGROOM_LP_B)

forloop(X, {
definestation(X, "",
	class(CLASS_FACILITIES)
	callbacks({CB_LAYOUT})
)}, WAITINGROOM_LAP_A .. WAITINGROOM_LAP_B_RF)

layout(SIGN_A_HP_A, LAYOUT_SIGN_A_HP_A)
layout(SIGN_A_HP_B, LAYOUT_SIGN_A_HP_B)

layout(SIGN_A_LP_A, LAYOUT_SIGN_A_LP_A)
layout(SIGN_A_LP_B, LAYOUT_SIGN_A_LP_B)

layout(SIGN_A_LAP_A, LAYOUT_SIGN_A_LAP_A)
layout(SIGN_A_LAP_B, LAYOUT_SIGN_A_LAP_B)

layout(SIGN_B_HP_B_RF_A, LAYOUT_SIGN_B_HP_B_RF_A)
layout(SIGN_B_HP_C_RF_A, LAYOUT_SIGN_B_HP_C_RF_A)
layout(SIGN_B_HP_B_RF_B, LAYOUT_SIGN_B_HP_B_RF_B)
layout(SIGN_B_HP_C_RF_B, LAYOUT_SIGN_B_HP_C_RF_B)

layout(SIGN_B_LP_B_RF_A, LAYOUT_SIGN_B_LP_B_RF_A)
layout(SIGN_B_LP_C_RF_A, LAYOUT_SIGN_B_LP_C_RF_A)
layout(SIGN_B_LP_B_RF_B, LAYOUT_SIGN_B_LP_B_RF_B)
layout(SIGN_B_LP_C_RF_B, LAYOUT_SIGN_B_LP_C_RF_B)

layout(SIGN_B_LAP_B_RF_A, LAYOUT_SIGN_B_LAP_B_RF_A)
layout(SIGN_B_LAP_C_RF_A, LAYOUT_SIGN_B_LAP_C_RF_A)
layout(SIGN_B_LAP_B_RF_B, LAYOUT_SIGN_B_LAP_B_RF_B)
layout(SIGN_B_LAP_C_RF_B, LAYOUT_SIGN_B_LAP_C_RF_B)


layout(LED_HP_A_RF_A, LAYOUT_LED_HP_A_RF_A)
layout(LED_HP_B_RF_A, LAYOUT_LED_HP_B_RF_A)
layout(LED_HP_C_RF_A, LAYOUT_LED_HP_C_RF_A)
layout(LED_HP_A_RF_B, LAYOUT_LED_HP_A_RF_B)
layout(LED_HP_B_RF_B, LAYOUT_LED_HP_B_RF_B)
layout(LED_HP_C_RF_B, LAYOUT_LED_HP_C_RF_B)

layout(LED_LP_A_RF_A, LAYOUT_LED_LP_A_RF_A)
layout(LED_LP_B_RF_A, LAYOUT_LED_LP_B_RF_A)
layout(LED_LP_C_RF_A, LAYOUT_LED_LP_C_RF_A)
layout(LED_LP_A_RF_B, LAYOUT_LED_LP_A_RF_B)
layout(LED_LP_B_RF_B, LAYOUT_LED_LP_B_RF_B)
layout(LED_LP_C_RF_B, LAYOUT_LED_LP_C_RF_B)

layout(LED_LAP_A_RF_A, LAYOUT_LED_LAP_A_RF_A)
layout(LED_LAP_B_RF_A, LAYOUT_LED_LAP_B_RF_A)
layout(LED_LAP_C_RF_A, LAYOUT_LED_LAP_C_RF_A)
layout(LED_LAP_A_RF_B, LAYOUT_LED_LAP_A_RF_B)
layout(LED_LAP_B_RF_B, LAYOUT_LED_LAP_B_RF_B)
layout(LED_LAP_C_RF_B, LAYOUT_LED_LAP_C_RF_B)


layout(WAITINGROOM_HP_A, LAYOUT_WAITINGROOM_HP_A)
layout(WAITINGROOM_HP_B, LAYOUT_WAITINGROOM_HP_B)

layout(WAITINGROOM_HP_A_RF, LAYOUT_WAITINGROOM_HP_A_RF_A)
layout(WAITINGROOM_HP_B_RF, LAYOUT_WAITINGROOM_HP_B_RF_A)

layout(WAITINGROOM_LP_A, LAYOUT_WAITINGROOM_LP_A)
layout(WAITINGROOM_LP_B, LAYOUT_WAITINGROOM_LP_B)

layout(WAITINGROOM_LP_A_RF, LAYOUT_WAITINGROOM_LP_A_RF_A)
layout(WAITINGROOM_LP_B_RF, LAYOUT_WAITINGROOM_LP_B_RF_A)

layout(WAITINGROOM_LAP_A, LAYOUT_WAITINGROOM_LAP_A)
layout(WAITINGROOM_LAP_B, LAYOUT_WAITINGROOM_LAP_B)

layout(WAITINGROOM_LAP_A_RF, LAYOUT_WAITINGROOM_LAP_A_RF_A)
layout(WAITINGROOM_LAP_B_RF, LAYOUT_WAITINGROOM_LAP_B_RF_A)


// Platform + Sign A Start
def(39, sw_check_stasignA_pB) tinfo_statid(pos(0, 1), shiftmask(0,0x1FF),
	cbr(2) if(0x100+SIGN_A_HP_A, 0x100+SIGN_A_LP_A, 0x100+SIGN_A_LAP_A)
	cbr(0) else
)

def(38, sw_check_stasignA_pA) tinfo_statid(pos(0, -1), shiftmask(0,0x1FF),
	cbr(1) if(0x100+SIGN_A_HP_B, 0x100+SIGN_A_LP_B, 0x100+SIGN_A_LAP_B)
	cbr(0) else
)

def(37, sw_stasignA_offset) calculate({subroutine(sw_check_stasignA_pB) + subroutine(sw_check_stasignA_pA)},
	cbfail() else
)

def(44, sw_reg_signA_skip) subroutine(sw_check_stasignA_pB,
	cbr(0) if(2)
	cbr(1) else
)

def(43, sw_reg_signA_offset_y) subroutine(sw_check_stasignA_pA,
	cbr(-1) if(1)
	cbr(1) else
)

def(42, sw_set_reg_signA) setregisters(REGISTER_SIGN_A_OFFSET_Y, {sub(sw_reg_signA_offset_y), sub(sw_reg_signA_skip)}, ref(sw_set_registers))

def(33) plt_posrev(
	cbr(2) if(0)
	cbr(1) else
)

def(32) plt_pos(
	cbr(0) if(0)
	ref(33) else
)

def(35, sw_check_stasign_pos) plt_length(
	cbr(1) if(1)
	ref(32) else
)

def(31, sw_stasignA_layout) calculate({subroutine(sw_terrain_snow) * 3 + subroutine(sw_check_stasign_pos) * 2},
	cbfail() else
)

def(30, sw_stasignA_cb) callback(
	ref(sw_stasignA_layout) if(CB_LAYOUT)
	ref(sw_set_reg_signA) else
)

def(36, sw_stasignA_menu_cb) callback(
	cbr(2) if(CB_LAYOUT)
	ref(sw_set_reg_signA) else
)
// Platform + Sign A End

makestation(SIGN_A_HP_A, link(ref(sw_stasignA_menu_cb), MENU) default(ref(sw_stasignA_cb)))
makestation(SIGN_A_HP_B, link(ref(sw_stasignA_menu_cb), MENU) default(ref(sw_stasignA_cb)))
forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, SIGN_B_HP_B_RF_A .. SIGN_B_HP_C_RF_B)
forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, LED_HP_A_RF_A .. LED_HP_C_RF_B)
forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, WAITINGROOM_HP_A .. WAITINGROOM_HP_B)
forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, WAITINGROOM_HP_A_RF .. WAITINGROOM_HP_B_RF)

forloop(X, {makestation(X, link(ref(sw_stasignA_menu_cb), MENU) default(ref(sw_stasignA_cb)))}, SIGN_A_LP_A .. SIGN_A_LAP_B)
forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, SIGN_B_LP_B_RF_A .. SIGN_B_LAP_C_RF_B)
forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, LED_LP_A_RF_A .. LED_LAP_C_RF_B)
forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, WAITINGROOM_LP_A .. WAITINGROOM_LP_B)
forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, WAITINGROOM_LAP_A .. WAITINGROOM_LAP_B)
forloop(X, {makestation(X, default(ref(sw_platform_cb)))}, WAITINGROOM_LP_A_RF .. WAITINGROOM_LAP_B_RF)

// psd

forloop(X, {
definestation(X, "",
	class(CLASS_PSD)
	callbacks({CB_LAYOUT, CB_AFRAME})
	anim_info({7, NOLOOP})
	anim_speed(3)
	anim_triggers({ARRIVE, LEAVE})
)}, PSD_HP_A .. PSD_HP_C_RF_B)

layout(PSD_HP_A, LAYOUT_PSD_HP_A)
layout(PSD_HP_B, LAYOUT_PSD_HP_B)
layout(PSD_HP_C, LAYOUT_PSD_HP_C)
layout(PSD_HP_A_RF_A, LAYOUT_PSD_HP_A_RF_A)
layout(PSD_HP_B_RF_A, LAYOUT_PSD_HP_B_RF_A)
layout(PSD_HP_C_RF_A, LAYOUT_PSD_HP_C_RF_A)
layout(PSD_HP_A_RF_B, LAYOUT_PSD_HP_A_RF_B)
layout(PSD_HP_B_RF_B, LAYOUT_PSD_HP_B_RF_B)
layout(PSD_HP_C_RF_B, LAYOUT_PSD_HP_C_RF_B)

def(33, sw_psd_offset) anim_frame(
	cbr(2) if(1)
	cbr(2) if(5)
	cbr(4) if(2 .. 4)
	cbr(0) else
)

def(37, sw_set_reg_psd) setregisters(REGISTER_PSD_OFFSET, {sub(sw_psd_offset)}, ref(sw_set_registers))

skipif(1, getowngrfparameter(PARAM_FLAGS), BITCLR, PARAM_FLAGS_PSDSFX)
def(32, sw_psd_animframe) anim_frame(
	animframe(A_STOP) if(3)
	animframe(A_NEXT, _S_snd_psd_open) if(1)
	animframe(A_NEXT, _S_snd_psd_close) if(4)
	animframe(A_NEXT) else
)
skipif(1, getowngrfparameter(PARAM_FLAGS), BITSET, PARAM_FLAGS_PSDSFX)
def(32, sw_psd_animframe) anim_frame(
	animframe(A_STOP) if(3)
	animframe(A_NEXT) else
)

def(35, sw_psd_animctrl_leave) anim_frame(
	animcontrol(6) if(0)
	animcontrol(5) if(1)
	animcontrol(4) else
)

def(34, sw_psd_animctrl) anim_trigger(
	animcontrol(1) if(ARRIVE)
	ref(sw_psd_animctrl_leave) if(LEAVE)
	animcontrol(A_NOP) else
)

def(30, sw_psd_cb) callback(
	ref(sw_platform_cb) if(CB_LAYOUT)
	ref(sw_psd_animctrl) if(CB_ACONTROL)
	ref(sw_psd_animframe) if(CB_AFRAME)
	ref(sw_set_reg_psd) else
)

def(36, sw_psd_menu_cb) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_set_reg_psd) else
)

forloop(X, {makestation(X, link(ref(sw_psd_menu_cb), MENU) default(ref(sw_psd_cb)))}, PSD_HP_A .. PSD_HP_C_RF_B)

skipif(13, getowngrfparameter(PARAM_FLAGS), BITCLR, PARAM_FLAGS_BRIDGE)

setproperties(HP_A .. LAP_B_RF_B,
	bridge_height({2,2,2,2})
)

setproperties(HP_C .. LAP_C_RF_B,
	bridge_height({2,2,2,2})
)

setproperties(OVERPASS_HP_A .. OVERPASS_LAP_B,
	bridge_height({3,3,3,3})
)

setproperties(OVERPASS_HP_A_RF .. OVERPASS_LAP_B_RF,
	bridge_height({3,3,3,3})
)

setproperties(OVERPASS_TRACK .. OVERPASS_TRACK_WAYP,
	bridge_height({3,3,3,3})
)

setproperties(PLATFORM_FACILITIES_START .. WAITINGROOM_LAP_C_RF_B,
	bridge_height({2,2,2,2})
)

setproperties(LP_A_CR .. LP_B_CR_RF,
	bridge_height({2,2,2,2})
)

setproperties(TRACK_CR_A .. TRACK_CR_C_WAYP,
	bridge_height({2,2,2,2})
)

setproperties(LED_HP_A_RF_A .. WAITINGROOM_HP_B,
	bridge_height({2,2,2,2})
)

setproperties(WAITINGROOM_LP_A .. WAITINGROOM_LP_B,
	bridge_height({2,2,2,2})
)

setproperties(WAITINGROOM_LAP_A .. WAITINGROOM_LAP_B_RF,
	bridge_height({2,2,2,2})
)

setproperties(PSD_HP_A .. PSD_HP_C_RF_B,
	bridge_height({2,2,2,2})
)

setproperties(HP_NONTRACK .. LAP_NONTRACK_RF_B,
	bridge_height({2,2,2,2})
)


classnames(HP_A, STR_CLASS_PLATFORMS)
classnames(LP_A_CR, STR_CLASS_CROSSINGS)
classnames(BUILDING_LOW_HP_A, STR_CLASS_BUILDINGS)
classnames(HP_NONTRACK, STR_CLASS_NONTRACK)
classnames(LED_HP_A_RF_A, STR_CLASS_FACILITIES)
classnames(PSD_HP_A, STR_CLASS_PSD)

stationnames(HP_A, STR_STRINGS_COMPAT)
stationnames(WAITINGROOM_LAP_A, STR_STRINGS_COMPAT_0x6B)
stationnames(BUILDING_LOW_HP_A, STR_BUILDINGS_COMPAT)
stationnames(HP_NONTRACK, STR_NONTRACK)
stationnames(PSD_HP_A, STR_PSD)