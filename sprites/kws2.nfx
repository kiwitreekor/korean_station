divert(-1)
include(sprites/kws.m4)
include(sprites/kws_func.nfx)

include(sprites/lang/english.nfx)
include(sprites/lang/korean.nfx)
include(sprites/strings.nfx)
divert

setfeature(_STATION)
setpath(sprites/gfx)

textmode_on()
grfinit(GRFID_KWS_PART2,
	grfname(STR_GRF_NAME_PART2)
	grfdescription(STR_GRF_DESC)
	grfurl(ALL, {"https://github.com/kiwitreekor/korean_station/"})
	grfversion(GRF_VERSION)
	grfminversion(GRF_MIN_VERSION)
)
textmode_off()
asl_on()

getothergrfparameter(PARAM_FLAGS, GRFID_KWS_PART1, PARAM_FLAGS)
getothergrfparameter(PARAM_MODE, GRFID_KWS_PART1, PARAM_MODE)
getothergrfparameter(PARAM_ROOF_COLOUR, GRFID_KWS_PART1, PARAM_ROOF_COLOUR)
getothergrfparameter(PARAM_VERSION, GRFID_KWS_PART1, VERSION)

skipif(1, GRFACTIVE, -, GRFID_KWS_PART1)
skipif(1, getowngrfparameter(PARAM_VERSION), ==, GRF_VERSION)
error(FATAL, ALL, 05, "kws1.grf")

include(sprites/sprites.nfx)

def({sprset_default}) spriteset(little(0), lots(0))

setpath(sounds)
soundtable(
	defsnd(snd_psd_open, PSD_open.wav)
	defsnd(snd_psd_close, PSD_close.wav)
)


skipif(1, getowngrfparameter(PARAM_FLAGS), BITCLR, PARAM_FLAGS_SNOW)
def({sw_terrain_snow}) tinfo_terrain(
	cbr(1) if(SNOW)
	cbr(0) else
)

skipif(1, getowngrfparameter(PARAM_FLAGS), BITSET, PARAM_FLAGS_SNOW)
def({sw_terrain_snow}) tinfo_terrain(
	cbr(0) if(SNOW)
	cbr(0) else
)

def({sw_get_param_roof_colour}) calculate({getparameter(PARAM_ROOF_COLOUR,) AND 0xF + 0x307 - 1},
	cbfail() else
)

def({sw_reg_roof_colour}) getparameter(PARAM_ROOF_COLOUR, shiftmask(0, 0xF),
	cbr(0) if(0)
	ref(sw_get_param_roof_colour) else
)

def({sw_set_reg_roof_colour}) setregisters(REGISTER_ROOF_RECOLOUR, {sub(sw_reg_roof_colour)}, ref(sprset_default))

def({sw_reg_roof_overpass}) subroutine(sw_terrain_snow,
	cbr(spr_roofs_overpass_snow - spr_roofs_overpass) if(1)
	cbr(0) else
)

def({sw_reg_overpass_guide}) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_SHADOW, 0x1),
	cbr(spr_overpass_guide_s - spr_overpass_guide) if(1)
	cbr(0) else
)

def({sw_reg_overpass}) subroutine(sw_terrain_snow,
	cbr(spr_overpass_snow - spr_overpass) if(1)
	cbr(0) else
)
def({sw_set_reg_overpass}) setregisters(REGISTER_OVERPASS_OFFSET, {sub(sw_reg_overpass), sub(sw_reg_overpass_guide), sub(sw_reg_roof_overpass)}, ref(sw_set_reg_roof_colour))


def({sw_reg_crossing_shadow}) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_SHADOW, 0x1),
	cbr(spr_platform_cs - spr_platform_c) if(1)
	cbr(0) else
)

def({sw_reg_crossing}) subroutine(sw_terrain_snow,
	cbr(spr_platform_c_snow - spr_platform_c) if(1)
	cbr(0) else
)

def({sw_reg_platform_shadow}) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_SHADOW, 0x1),
	cbr(spr_platform_s - spr_platform) if(1)
	cbr(0) else
)

def({sw_reg_roof}) subroutine(sw_terrain_snow,
	cbr(spr_roofs_snow - spr_roofs) if(1)
	cbr(0) else
)

def({sw_reg_passenger_skip_sub}) cargowaiting(PASS,
	cbr(0) if(0 .. 16)
	cbr(1) else
)

def({sw_reg_passenger_skip}) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_PASSENGER, 0x1),
	ref(sw_reg_passenger_skip_sub) if(1)
	cbr(0) else
)

def({sw_reg_platform}) subroutine(sw_terrain_snow,
	cbr(spr_platform_snow - spr_platform) if(1)
	cbr(0) else
)

def({sw_reg_passenger}) cargowaiting(PASS,
	cbr(0) if(17 .. 128)
	cbr(4) if(129 .. 512)
	cbr(8) if(513 .. 1024)
	cbr(12) else
)
def({sw_set_reg_passenger}) 
setregisters(REGISTER_PASSENGER_OFFSET, 
	{
	sub(sw_reg_passenger), 
	sub(sw_reg_platform), 
	sub(sw_reg_passenger_skip), 
	sub(sw_reg_roof),
	sub(sw_reg_platform_shadow),
	sub(sw_reg_crossing),
	sub(sw_reg_crossing_shadow)
	}, 
	ref(sw_set_reg_overpass)
)

def({sw_ground_nontrack_register_sub}) subroutine(sw_terrain_snow,
	cbr(spr_ground_nontrack_snow - spr_ground_nontrack) if(1)
	cbr(0) else
)
def({sw_ground_nontrack_register}) setregisters(REGISTER_GROUND_NONTRACK_OFFSET, sub(sw_ground_nontrack_register_sub), ref(sw_set_reg_passenger))
def({sw_set_registers}) setregisters(REGISTER_NONE, {0}, ref(sw_ground_nontrack_register))

def({sw_platform_layout}) calculate({subroutine(sw_terrain_snow) * 2},
	cbfail() else
)

def({sw_platform_cb}) callback(
	ref(sw_platform_layout) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

include(sprites/kws_layout.nfx)


// crossings (high)

forloop(X, {
definestation(X, "",
	class(CLASS_CROSSINGS)
	callbacks({CB_LAYOUT, CB_AFRAME})
	anim_triggers({BUILT})
)}, CROSSING_HIGH_START .. CROSSING_HIGH_END)

layout(HP_A_CR, LAYOUT_HP_A_CR)
layout(HP_B_CR, LAYOUT_HP_B_CR)
layout(HP_C_CR, LAYOUT_HP_C_CR)

layout(HP_A_CR_RF_A, LAYOUT_HP_A_CR_RF_A)
layout(HP_B_CR_RF_A, LAYOUT_HP_B_CR_RF_A)
layout(HP_C_CR_RF_A, LAYOUT_HP_C_CR_RF_A)

layout(HP_A_CR_RF_B, LAYOUT_HP_A_CR_RF_B)
layout(HP_B_CR_RF_B, LAYOUT_HP_B_CR_RF_B)
layout(HP_C_CR_RF_B, LAYOUT_HP_C_CR_RF_B)

def({sw_crossing_pos_sub2}) plt_posrev(
	cbr(2) if(0)
	cbr(0) else
)

def({sw_crossing_pos_sub1}) plt_pos(
	cbr(4) if(0)
	ref(sw_crossing_pos_sub2) else
)

def({sw_crossing_pos}) plt_length(
	cbr(0) if(1)
	ref(sw_crossing_pos_sub1) else
)

def({sw_crossing_layout}) calculate({subroutine(sw_terrain_snow) * 6 + subroutine(sw_crossing_pos)},
	cbfail() else
)

def({sw_crossing_cb}) callback(
	ref(sw_crossing_layout) if(CB_LAYOUT)
	ref(sw_crossing_pos) if(CB_ACONTROL, CB_AFRAME)
	ref(sw_set_registers) else
)

forloop(X, {makestation(X, default(ref(sw_crossing_cb)))}, CROSSING_HIGH_START .. CROSSING_HIGH_END)

// psd

forloop(X, {
definestation(X, "",
	class(CLASS_PSD)
	callbacks({CB_LAYOUT, CB_AFRAME})
	anim_info({7, NOLOOP})
	anim_speed(3)
	anim_triggers({ARRIVE, LEAVE})
	include_lengths({1,2,3})
)}, PSD_OVERPASS_START .. PSD_OVERPASS_END)

layout(PSD_OVERPASS_HP_A, LAYOUT_PSD_OVERPASS_HP_A)
layout(PSD_OVERPASS_HP_B, LAYOUT_PSD_OVERPASS_HP_B)
layout(PSD_OVERPASS_HP_C, LAYOUT_PSD_OVERPASS_HP_C)
layout(PSD_OVERPASS_HP_A_RF_A, LAYOUT_PSD_OVERPASS_HP_A_RF_A)
layout(PSD_OVERPASS_HP_B_RF_A, LAYOUT_PSD_OVERPASS_HP_B_RF_A)
layout(PSD_OVERPASS_HP_C_RF_A, LAYOUT_PSD_OVERPASS_HP_C_RF_A)
layout(PSD_OVERPASS_HP_A_RF_B, LAYOUT_PSD_OVERPASS_HP_A_RF_B)
layout(PSD_OVERPASS_HP_B_RF_B, LAYOUT_PSD_OVERPASS_HP_B_RF_B)
layout(PSD_OVERPASS_HP_C_RF_B, LAYOUT_PSD_OVERPASS_HP_C_RF_B)

def({sw_psd_overpass_platform_layout_sub2}) plt_posrev(
	self(
		cbr(2) if(0)
		cbr(4) else
	)
)

def({sw_psd_overpass_platform_layout}) plt_midpos(
	self(
		cbr(0) if(0)
		ref(sw_psd_overpass_platform_layout_sub2) else
	)
)

def({sw_psd_overpass_platform_snow}) calculate({subroutine(sw_terrain_snow) * 6 + subroutine(sw_psd_overpass_platform_layout)},
	cbfail() else
)

def({sw_psd_offset}) anim_frame(
	cbr(2) if(1)
	cbr(2) if(5)
	cbr(4) if(2 .. 4)
	cbr(0) else
)

def({sw_set_reg_psd}) setregisters(REGISTER_PSD_OFFSET, {sub(sw_psd_offset)}, ref(sw_set_registers))

skipif(1, getowngrfparameter(PARAM_FLAGS), BITCLR, PARAM_FLAGS_PSDSFX)
def({sw_psd_animframe}) anim_frame(
	animframe(A_STOP) if(3)
	animframe(A_NEXT, _S_snd_psd_open) if(1)
	animframe(A_NEXT, _S_snd_psd_close) if(4)
	animframe(A_NEXT) else
)
skipif(1, getowngrfparameter(PARAM_FLAGS), BITSET, PARAM_FLAGS_PSDSFX)
def({sw_psd_animframe}) anim_frame(
	animframe(A_STOP) if(3)
	animframe(A_NEXT) else
)

def({sw_psd_animctrl_leave}) anim_frame(
	animcontrol(6) if(0)
	animcontrol(5) if(1)
	animcontrol(4) else
)

def({sw_psd_animctrl}) anim_trigger(
	animcontrol(1) if(ARRIVE)
	ref(sw_psd_animctrl_leave) if(LEAVE)
	animcontrol(A_NOP) else
)

def({sw_psd_overpass_cb}) callback(
	ref(sw_psd_overpass_platform_snow) if(CB_LAYOUT)
	ref(sw_psd_animctrl) if(CB_ACONTROL)
	ref(sw_psd_animframe) if(CB_AFRAME)
	ref(sw_set_reg_psd) else
)

def({sw_psd_overpass_menu_cb}) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_set_reg_psd) else
)

forloop(X, {makestation(X, link(ref(sw_psd_overpass_menu_cb), MENU) default(ref(sw_psd_overpass_cb)))}, PSD_OVERPASS_START .. PSD_OVERPASS_END)


forloop(X, {
definestation(X, "",
	class(CLASS_PSD)
	callbacks({CB_AFRAME})
	anim_info({7, NOLOOP})
	anim_speed(3)
	anim_triggers({ARRIVE, LEAVE})
)}, PSD_BUILDING_START .. PSD_BUILDING_END)

layout(PSD_BUILDING_LOW_HP_A, LAYOUT_PSD_BUILDING_LOW_HP_A)
layout(PSD_BUILDING_LOW_HP_B, LAYOUT_PSD_BUILDING_LOW_HP_B)
layout(PSD_BUILDING_LOW_HP_C, LAYOUT_PSD_BUILDING_LOW_HP_C)
layout(PSD_BUILDING_HIGH_HP_A, LAYOUT_PSD_BUILDING_HIGH_HP_A)
layout(PSD_BUILDING_HIGH_HP_B, LAYOUT_PSD_BUILDING_HIGH_HP_B)
layout(PSD_BUILDING_HIGH_HP_C, LAYOUT_PSD_BUILDING_HIGH_HP_C)

def({sw_psd_building_cb}) callback(
	ref(sw_psd_animctrl) if(CB_ACONTROL)
	ref(sw_psd_animframe) if(CB_AFRAME)
	ref(sw_set_reg_psd) else
)

forloop(X, {makestation(X, link(ref(sw_set_reg_psd), MENU) default(ref(sw_psd_building_cb)))}, PSD_BUILDING_START .. PSD_BUILDING_END)


forloop(X, {
definestation(X, "",
	class(CLASS_PSD)
	callbacks({CB_LAYOUT, CB_AFRAME})
	anim_info({7, NOLOOP})
	anim_speed(3)
	anim_triggers({ARRIVE, LEAVE})
)}, PSD_UNDERPASS_START .. PSD_UNDERPASS_END)

layout(PSD_UNDERPASS_HP_A_RF_A, LAYOUT_PSD_UNDERPASS_HP_A_RF_A)
layout(PSD_UNDERPASS_HP_B_RF_A, LAYOUT_PSD_UNDERPASS_HP_B_RF_A)
layout(PSD_UNDERPASS_HP_C_RF_A, LAYOUT_PSD_UNDERPASS_HP_C_RF_A)
layout(PSD_UNDERPASS_HP_A_RF_B, LAYOUT_PSD_UNDERPASS_HP_A_RF_B)
layout(PSD_UNDERPASS_HP_B_RF_B, LAYOUT_PSD_UNDERPASS_HP_B_RF_B)
layout(PSD_UNDERPASS_HP_C_RF_B, LAYOUT_PSD_UNDERPASS_HP_C_RF_B)

def({sw_psd_underpass_cb}) callback(
	ref(sw_platform_layout) if(CB_LAYOUT)
	ref(sw_psd_animctrl) if(CB_ACONTROL)
	ref(sw_psd_animframe) if(CB_AFRAME)
	ref(sw_set_reg_psd) else
)

def({sw_psd_underpass_menu_cb}) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_set_reg_psd) else
)

forloop(X, {makestation(X, link(ref(sw_psd_underpass_menu_cb), MENU) default(ref(sw_psd_underpass_cb)))}, PSD_UNDERPASS_START .. PSD_UNDERPASS_END)

// buffers

forloop(X, {
definestation(X, "",
	class(CLASS_PLATFORMS)
	callbacks({CB_LAYOUT})
	nontrack(TTD_ALLTILES)
	nowires(TTD_ALLTILES)
)}, PLATFORM_BUFFER_START .. PLATFORM_BUFFER_END)

layout(BUFFER_HP_A, LAYOUT_BUFFER_HP_A)
layout(BUFFER_HP_B, LAYOUT_BUFFER_HP_B)
layout(BUFFER_HP_C, LAYOUT_BUFFER_HP_C)

layout(BUFFER_HP_A_RF_A, LAYOUT_BUFFER_HP_A_RF_A)
layout(BUFFER_HP_B_RF_A, LAYOUT_BUFFER_HP_B_RF_A)
layout(BUFFER_HP_C_RF_A, LAYOUT_BUFFER_HP_C_RF_A)

layout(BUFFER_HP_A_RF_B, LAYOUT_BUFFER_HP_A_RF_B)
layout(BUFFER_HP_B_RF_B, LAYOUT_BUFFER_HP_B_RF_B)
layout(BUFFER_HP_C_RF_B, LAYOUT_BUFFER_HP_C_RF_B)

layout(BUFFER_LP_A, LAYOUT_BUFFER_LP_A)
layout(BUFFER_LP_B, LAYOUT_BUFFER_LP_B)
layout(BUFFER_LP_C, LAYOUT_BUFFER_LP_C)

layout(BUFFER_LP_A_RF_A, LAYOUT_BUFFER_LP_A_RF_A)
layout(BUFFER_LP_B_RF_A, LAYOUT_BUFFER_LP_B_RF_A)
layout(BUFFER_LP_C_RF_A, LAYOUT_BUFFER_LP_C_RF_A)

layout(BUFFER_LP_A_RF_B, LAYOUT_BUFFER_LP_A_RF_B)
layout(BUFFER_LP_B_RF_B, LAYOUT_BUFFER_LP_B_RF_B)
layout(BUFFER_LP_C_RF_B, LAYOUT_BUFFER_LP_C_RF_B)

layout(BUFFER_LAP_A, LAYOUT_BUFFER_LAP_A)
layout(BUFFER_LAP_B, LAYOUT_BUFFER_LAP_B)
layout(BUFFER_LAP_C, LAYOUT_BUFFER_LAP_C)

layout(BUFFER_LAP_A_RF_A, LAYOUT_BUFFER_LAP_A_RF_A)
layout(BUFFER_LAP_B_RF_A, LAYOUT_BUFFER_LAP_B_RF_A)
layout(BUFFER_LAP_C_RF_A, LAYOUT_BUFFER_LAP_C_RF_A)

layout(BUFFER_LAP_A_RF_B, LAYOUT_BUFFER_LAP_A_RF_B)
layout(BUFFER_LAP_B_RF_B, LAYOUT_BUFFER_LAP_B_RF_B)
layout(BUFFER_LAP_C_RF_B, LAYOUT_BUFFER_LAP_C_RF_B)

def({sw_buffer_layout_offset}) tinfo_trackconnect(shiftmask(0, 0x02),
	cbr(0) if(0)
	cbr(2) else
)

def({sw_buffer_shadow_offset}) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_SHADOW, 0x1),
	cbr(spr_platform_buffer_s - spr_platform_buffer) if(1)
	cbr(0) else
)

def({sw_buffer_shadow_layout_offset}) calculate({subroutine(sw_buffer_shadow_offset) + subroutine(sw_buffer_layout_offset)},
	cbfail() else
)

def({sw_set_reg_buffer}) setregisters(REGISTER_BUFFER_OFFSET, {sub(sw_buffer_layout_offset), sub(sw_buffer_shadow_layout_offset)}, ref(sw_set_registers))

def({sw_buffer_cb}) callback(
	ref(sw_platform_layout) if(CB_LAYOUT)
	ref(sw_set_reg_buffer) else
)

forloop(X, {makestation(X, default(ref(sw_buffer_cb)))}, BUFFER_HP_A .. BUFFER_HP_C_RF_B)

skipif(BUFFER_LAP_C_RF_B - BUFFER_LP_A + 1, getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
forloop(X, {makestation(X, default(ref(sw_buffer_cb)))}, BUFFER_LP_A .. BUFFER_LAP_C_RF_B)

skipif(3, getowngrfparameter(PARAM_FLAGS), BITCLR, PARAM_FLAGS_BRIDGE)

setproperties(CROSSING_HIGH_START .. CROSSING_HIGH_END,
	bridge_height({2,2,2,2})
)

setproperties(PSD_OVERPASS_START .. PSD_OVERPASS_END,
	bridge_height({3,3,3,3})
)

setproperties(PLATFORM_BUFFER_START .. PLATFORM_BUFFER_END,
	bridge_height({2,2,2,2})
)

stationnames(CROSSING_HIGH_START, STR_CROSSINGS_HIGH)
stationnames(PSD_ADDITIONAL_START, STR_PSD_ADDITIONAL)
stationnames(PLATFORM_BUFFER_START, STR_PLATFORM_BUFFER)