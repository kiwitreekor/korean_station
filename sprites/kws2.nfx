divert(-1)
include(sprites/kws.m4)
include(sprites/kws_func.nfx)
divert

define({file_index}, 2)

include(sprites/lang/english.nfx)
include(sprites/lang/korean.nfx)

setfeature(_STATION)
setpath(sprites/gfx)

textmode_on()
grfinit(GRFID_KWS_PART2,
	grfname(STR_GRF_NAME_PART2)
	grfdescription(STR_GRF_DESC)
	grfurl(ALL, {"https://github.com/kiwitreekor/korean_station/"})
	grfversion(GRF_VERSION)
	grfminversion(GRF_MIN_VERSION)
)
	
grffeaturetest(
	name("action0_station_prop1B")
	minversion(1)
	setparambit(GRFFEATURE_BRIDGE)
)
textmode_off()
asl_on()

getothergrfparameter(PARAM_FLAGS, GRFID_KWS_PART1, PARAM_FLAGS)
getothergrfparameter(PARAM_MODE, GRFID_KWS_PART1, PARAM_MODE)
getothergrfparameter(PARAM_ROOF_COLOUR, GRFID_KWS_PART1, PARAM_ROOF_COLOUR)
getothergrfparameter(PARAM_VERSION, GRFID_KWS_PART1, VERSION)

skipif(1, GRFACTIVE, -, GRFID_KWS_PART1)
skipif(1, getowngrfparameter(PARAM_VERSION), ==, GRF_VERSION)
error(FATAL, ALL, 05, "kws1.grf")

include(sprites/sprites.nfx)

include({sprites/kws_common.nfx})
include({sprites/layouts/layout.nfx})
deflabel(LABEL_HIGHPLATFORM_MODE)

// crossings (high)

forloop(X, {
definestation(X, "",
	class(CLASS_CROSSINGS)
	callbacks({CB_LAYOUT, CB_AFRAME})
	setcargotriggers({PASS})
	anim_triggers({BUILT})
)}, CROSSING_HIGH_START .. CROSSING_HIGH_END)

layout(CROSSING_HP_A, CROSSING_LAYOUT_HP_A)
layout(CROSSING_HP_B, CROSSING_LAYOUT_HP_B)
layout(CROSSING_HP_C, CROSSING_LAYOUT_HP_C)

layout(CROSSING_HP_A_RF_A, CROSSING_LAYOUT_HP_A_RF_A)
layout(CROSSING_HP_B_RF_A, CROSSING_LAYOUT_HP_B_RF_A)
layout(CROSSING_HP_C_RF_A, CROSSING_LAYOUT_HP_C_RF_A)

layout(CROSSING_HP_A_RF_B, CROSSING_LAYOUT_HP_A_RF_B)
layout(CROSSING_HP_B_RF_B, CROSSING_LAYOUT_HP_B_RF_B)
layout(CROSSING_HP_C_RF_B, CROSSING_LAYOUT_HP_C_RF_B)

def({sw_crossing_pos_sub2}) plt_posrev(
	cbr(2) if(0)
	cbr(0) else
)

def({sw_crossing_pos_sub1}) plt_pos(
	cbr(4) if(0)
	ref(sw_crossing_pos_sub2) else
)

def({sw_crossing_pos}) plt_length(
	cbr(0) if(1)
	ref(sw_crossing_pos_sub1) else
)

def({sw_crossing_layout}) calculate({subroutine(sw_terrain_snow) * 6 + subroutine(sw_crossing_pos)},
	cbfail() else
)

def({sw_crossing_cb}) callback(
	ref(sw_crossing_layout) if(CB_LAYOUT)
	ref(sw_crossing_pos) if(CB_ACONTROL, CB_AFRAME)
	ref(sw_set_registers) else
)

forloop(X, {makestation(X, default(ref(sw_crossing_cb)))}, CROSSING_HIGH_START .. CROSSING_HIGH_END)

// psd

forloop(X, {
definestation(X, "",
	class(CLASS_PSD)
	callbacks({CB_LAYOUT, CB_AFRAME})
	anim_info({7, NOLOOP})
	anim_speed(3)
	setcargotriggers({PASS})
	anim_triggers({ARRIVE, LEAVE})
	include_lengths({1,2,3})
)}, PSD_OVERPASS_START .. PSD_OVERPASS_END)

layout(PSD_OVERPASS_HP_A, LAYOUT_PSD_OVERPASS_HP_A)
layout(PSD_OVERPASS_HP_B, LAYOUT_PSD_OVERPASS_HP_B)
layout(PSD_OVERPASS_HP_C, LAYOUT_PSD_OVERPASS_HP_C)
layout(PSD_OVERPASS_HP_A_RF_A, LAYOUT_PSD_OVERPASS_HP_A_RF_A)
layout(PSD_OVERPASS_HP_B_RF_A, LAYOUT_PSD_OVERPASS_HP_B_RF_A)
layout(PSD_OVERPASS_HP_C_RF_A, LAYOUT_PSD_OVERPASS_HP_C_RF_A)
layout(PSD_OVERPASS_HP_A_RF_B, LAYOUT_PSD_OVERPASS_HP_A_RF_B)
layout(PSD_OVERPASS_HP_B_RF_B, LAYOUT_PSD_OVERPASS_HP_B_RF_B)
layout(PSD_OVERPASS_HP_C_RF_B, LAYOUT_PSD_OVERPASS_HP_C_RF_B)

def({sw_psd_overpass_cb}) callback(
	ref(sw_overpass_platform_multi_layout) if(CB_LAYOUT)
	ref(sw_psd_animctrl) if(CB_ACONTROL)
	ref(sw_psd_animframe) if(CB_AFRAME)
	ref(sw_set_reg_psd) else
)

def({sw_psd_overpass_menu_cb}) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_set_reg_psd_menu) else
)

forloop(X, {makestation(X, link(ref(sw_psd_overpass_menu_cb), MENU) default(ref(sw_psd_overpass_cb)))}, PSD_OVERPASS_START .. PSD_OVERPASS_END)


forloop(X, {
definestation(X, "",
	class(CLASS_PSD)
	callbacks({CB_LAYOUT, CB_AFRAME})
	anim_info({7, NOLOOP})
	anim_speed(3)
	setcargotriggers({PASS})
	anim_triggers({ARRIVE, LEAVE})
)}, PSD_MODULAR_START .. PSD_MODULAR_END)

layout(PSD_MODULAR_LOW_HP_A, LAYOUT_PSD_MODULAR_LOW_HP_A)
layout(PSD_MODULAR_LOW_HP_B, LAYOUT_PSD_MODULAR_LOW_HP_B)
layout(PSD_MODULAR_LOW_HP_C, LAYOUT_PSD_MODULAR_LOW_HP_C)
layout(PSD_MODULAR_HIGH_HP_A, LAYOUT_PSD_MODULAR_HIGH_HP_A)
layout(PSD_MODULAR_HIGH_HP_B, LAYOUT_PSD_MODULAR_HIGH_HP_B)
layout(PSD_MODULAR_HIGH_HP_C, LAYOUT_PSD_MODULAR_HIGH_HP_C)

def({sw_psd_modular_cb}) callback(
	ref(sw_modular_overpass_multi_layout) if(CB_LAYOUT)
	ref(sw_psd_animctrl) if(CB_ACONTROL)
	ref(sw_psd_animframe) if(CB_AFRAME)
	ref(sw_set_reg_psd) else
)

def({sw_psd_modular_menu_cb}) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_set_reg_psd_menu) else
)

forloop(X, {makestation(X, link(ref(sw_psd_modular_menu_cb), MENU) default(ref(sw_psd_modular_cb)))}, PSD_MODULAR_START .. PSD_MODULAR_END)


forloop(X, {
definestation(X, "",
	class(CLASS_PSD)
	callbacks({CB_LAYOUT, CB_AFRAME})
	anim_info({7, NOLOOP})
	anim_speed(3)
	anim_triggers({ARRIVE, LEAVE})
)}, PSD_UNDERPASS_START .. PSD_UNDERPASS_END)

layout(PSD_UNDERPASS_HP_A_RF_A, LAYOUT_PSD_UNDERPASS_HP_A_RF_A)
layout(PSD_UNDERPASS_HP_B_RF_A, LAYOUT_PSD_UNDERPASS_HP_B_RF_A)
layout(PSD_UNDERPASS_HP_C_RF_A, LAYOUT_PSD_UNDERPASS_HP_C_RF_A)
layout(PSD_UNDERPASS_HP_A_RF_B, LAYOUT_PSD_UNDERPASS_HP_A_RF_B)
layout(PSD_UNDERPASS_HP_B_RF_B, LAYOUT_PSD_UNDERPASS_HP_B_RF_B)
layout(PSD_UNDERPASS_HP_C_RF_B, LAYOUT_PSD_UNDERPASS_HP_C_RF_B)

def({sw_psd_underpass_cb}) callback(
	ref(sw_platform_multi_layout) if(CB_LAYOUT)
	ref(sw_psd_animctrl) if(CB_ACONTROL)
	ref(sw_psd_animframe) if(CB_AFRAME)
	ref(sw_set_reg_psd) else
)

def({sw_psd_underpass_menu_cb}) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_set_reg_psd_menu) else
)

forloop(X, {makestation(X, link(ref(sw_psd_underpass_menu_cb), MENU) default(ref(sw_psd_underpass_cb)))}, PSD_UNDERPASS_START .. PSD_UNDERPASS_END)

// buffers

forloop(X, {
definestation(X, "",
	class(CLASS_BUFFERS)
	callbacks({CB_LAYOUT})
	nontrack(TTD_ALLTILES)
	setcargotriggers({PASS})
)}, PLATFORM_BUFFER_START .. PLATFORM_BUFFER_END)

definestation(BUFFER_TRACK, "",
	class(CLASS_BUFFERS)
	callbacks({CB_LAYOUT})
	nontrack(TTD_ALLTILES)
	setcargotriggers({PASS})
)

layout(BUFFER_HP_A, LAYOUT_BUFFER_HP_A)
layout(BUFFER_HP_B, LAYOUT_BUFFER_HP_B)
layout(BUFFER_HP_C, LAYOUT_BUFFER_HP_C)

layout(BUFFER_HP_A_RF_A, LAYOUT_BUFFER_HP_A_RF_A)
layout(BUFFER_HP_B_RF_A, LAYOUT_BUFFER_HP_B_RF_A)
layout(BUFFER_HP_C_RF_A, LAYOUT_BUFFER_HP_C_RF_A)

layout(BUFFER_HP_A_RF_B, LAYOUT_BUFFER_HP_A_RF_B)
layout(BUFFER_HP_B_RF_B, LAYOUT_BUFFER_HP_B_RF_B)
layout(BUFFER_HP_C_RF_B, LAYOUT_BUFFER_HP_C_RF_B)

layout(BUFFER_LP_A, LAYOUT_BUFFER_LP_A)
layout(BUFFER_LP_B, LAYOUT_BUFFER_LP_B)
layout(BUFFER_LP_C, LAYOUT_BUFFER_LP_C)

layout(BUFFER_LP_A_RF_A, LAYOUT_BUFFER_LP_A_RF_A)
layout(BUFFER_LP_B_RF_A, LAYOUT_BUFFER_LP_B_RF_A)
layout(BUFFER_LP_C_RF_A, LAYOUT_BUFFER_LP_C_RF_A)

layout(BUFFER_LP_A_RF_B, LAYOUT_BUFFER_LP_A_RF_B)
layout(BUFFER_LP_B_RF_B, LAYOUT_BUFFER_LP_B_RF_B)
layout(BUFFER_LP_C_RF_B, LAYOUT_BUFFER_LP_C_RF_B)

layout(BUFFER_LAP_A, LAYOUT_BUFFER_LAP_A)
layout(BUFFER_LAP_B, LAYOUT_BUFFER_LAP_B)
layout(BUFFER_LAP_C, LAYOUT_BUFFER_LAP_C)

layout(BUFFER_LAP_A_RF_A, LAYOUT_BUFFER_LAP_A_RF_A)
layout(BUFFER_LAP_B_RF_A, LAYOUT_BUFFER_LAP_B_RF_A)
layout(BUFFER_LAP_C_RF_A, LAYOUT_BUFFER_LAP_C_RF_A)

layout(BUFFER_LAP_A_RF_B, LAYOUT_BUFFER_LAP_A_RF_B)
layout(BUFFER_LAP_B_RF_B, LAYOUT_BUFFER_LAP_B_RF_B)
layout(BUFFER_LAP_C_RF_B, LAYOUT_BUFFER_LAP_C_RF_B)

layout(BUFFER_TRACK, LAYOUT_BUFFER_TRACK)

def({sw_buffer_end_offset}) subroutine(sw_terrain_snow,
	cbr(spr_platform_buffer_end_snow - spr_platform_buffer_end) if(1)
	cbr(0) else
)

def({sw_buffer_shadow_offset}) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_SHADOW, 0x1),
	cbr(spr_platform_buffer_s - spr_platform_buffer) if(1)
	cbr(0) else
)

def({sw_buffer_offset}) subroutine(sw_terrain_snow,
	cbr(spr_platform_buffer_snow - spr_platform_buffer) if(1)
	cbr(0) else
)

def({sw_set_reg_buffer}) setregisters(REGISTER_BUFFER_OFFSET, {sub(sw_buffer_offset), sub(sw_buffer_shadow_offset), sub(sw_buffer_end_offset)}, ref(sw_set_registers))

def({sw_buffer_layout_sub2_4}) tinfo_statid(pos(0, -1), shiftmask(0, 0xFF),
	cbr(0) if(BUFFER_PLATFORM_A_PART2)
	cbr(0) if(BUFFER_PLATFORM_C_PART2)
	cbr(2) else
)

def({sw_buffer_layout_sub2_3}) tinfo_statid(pos(0, -1), shiftmask(0, 0x100),
	ref(sw_buffer_layout_sub2_4) if(0x100)
	cbr(2) else
)

def({sw_buffer_layout_sub2_2}) tinfo_statid(pos(0, 1), shiftmask(0, 0xFF),
	cbr(0) if(BUFFER_PLATFORM_B_PART2)
	cbr(0) if(BUFFER_PLATFORM_C_PART2)
	cbr(2) else
)

def({sw_buffer_layout_sub2_1}) tinfo_statid(pos(0, 1), shiftmask(0, 0x100),
	ref(sw_buffer_layout_sub2_2) if(0x100)
	cbr(2) else
)

def({sw_buffer_layout_sub2}) tinfo_statid(pos(0, 0), shiftmask(0, 0xFF),
	ref(sw_buffer_layout_sub2_1) if(BUFFER_PLATFORM_A_PART2)
	ref(sw_buffer_layout_sub2_3) if(BUFFER_PLATFORM_B_PART2)
	cbr(0) else
)

def({sw_buffer_layout_sub1}) tinfo_trackconnect(shiftmask(0, 0x02),
	cbr(0) if(0)
	cbr(2) else
)

def({sw_buffer_layout}) calculate({subroutine(sw_terrain_snow) * 4 + subroutine(sw_buffer_layout_sub2) * 2 + subroutine(sw_buffer_layout_sub1)},
	cbfail() else
)

def({sw_buffer_cb}) callback(
	ref(sw_buffer_layout) if(CB_LAYOUT)
	ref(sw_set_reg_buffer) else
)

def({sw_buffer_track_layout}) calculate({subroutine(sw_terrain_snow) * 4 + subroutine(sw_buffer_layout_sub1)},
	cbfail() else
)

def({sw_buffer_track_cb}) callback(
	ref(sw_buffer_track_layout) if(CB_LAYOUT)
	ref(sw_set_reg_buffer) else
)

forloop(X, {makestation(X, default(ref(sw_buffer_cb)))}, BUFFER_HP_A .. BUFFER_HP_C_RF_B)

skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, default(ref(sw_buffer_cb)))}, BUFFER_LP_A .. BUFFER_LAP_C_RF_B)
placelabel(LABEL_HIGHPLATFORM_MODE)

makestation(BUFFER_TRACK, default(ref(sw_buffer_track_cb)))

// Seoul Stn.
// Seoul Stn. (old)

definestation(SEOUL_STATION_OLD, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT})
	nontrack(TTD_ALLTILES)
	nowires(TTD_ALLTILES)
	include_lengths({4})
	include_widths({2})
)

layout(SEOUL_STATION_OLD, LAYOUT_SEOUL_STATION_OLD)


def({sw_seoul_old_layout_road1}) plt_axis(
	cbr(8) if(0)
	cbr(12) else
)

def({sw_seoul_old_layout}) plt_index(
	self(
		cbr(0) if(nibble(3,0))
		cbr(2) if(nibble(2,0))
		cbr(4) if(nibble(1,0))
		cbr(6) if(nibble(0,0))
		ref(sw_seoul_old_layout_road1) if(nibble(3,1))
		cbr(10) if(nibble(0,1))
		cbr(14) if(nibble(1,1), nibble(2,1))
		cbr(16) else
	)
)

def({sw_seoul_old_snow}) subroutine(sw_terrain_snow,
	cbr(spr_seoul_old_snow - spr_seoul_old) if(1)
	cbr(0) else
)

def({sw_set_reg_seoul_old}) setregisters(REGISTER_SEOUL_OLD_SNOW_OFFSET, sub(sw_seoul_old_snow), ref(sw_set_registers))

def({sw_seoul_old_cb}) callback(
	ref(sw_seoul_old_layout) if(CB_LAYOUT)
	ref(sw_set_reg_seoul_old) else
)

def({sw_seoul_old_cb_purchase}) callback(
	reftile(tile_seoul_old_purchase) if(CB_LAYOUT)
	ref(sw_set_reg_seoul_old) else
)

makestation(SEOUL_STATION_OLD, link(ref(sw_seoul_old_cb_purchase), MENU) default(ref(sw_seoul_old_cb)))

// Seoul Stn. (new)

definestation(SEOUL_STATION_BUILDING, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT})
	nontrack(TTD_ALLTILES)
	nowires(TTD_ALLTILES)
	setcargotriggers({PASS})
	include_lengths({6})
	include_widths({3})
)

layout(SEOUL_STATION_BUILDING, LAYOUT_SEOUL_STATION_BUILDING)


def({sw_seoul_building_layout}) plt_index(
	self(
		cbr(0) if(nibble(5,0))
		cbr(2) if(nibble(4,1))
		cbr(4) if(nibble(3,1))
		cbr(6) if(nibble(2,1))
		cbr(8) if(nibble(1,1))
		cbr(10) if(nibble(0,1))
		cbr(12) if(nibble(5,2))
		cbr(14) if(nibble(4,2))
		cbr(16) if(nibble(3,2))
		cbr(18) if(nibble(2,2))
		cbr(20) if(nibble(1,2))
		cbr(20) if(nibble(0,2))
		cbr(22) else
	)
)

def({sw_seoul_building_cb}) callback(
	ref(sw_seoul_building_layout) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

def({sw_seoul_building_cb_purchase}) callback(
	reftile(tile_seoul_purchase) if(CB_LAYOUT)
	ref(sw_set_registers) else
)


def({sw_seoul_cars_cargo}) cargowaiting(PASS,
	cbr(16) if(17 .. 256)
	cbr(8) if(257 .. 2048)
	cbr(0) else
)
def({sw_seoul_cars_random}) random(ARRIVE, 16, cbr(0), cbr(2), cbr(4), cbr(6))
def({sw_seoul_cars_offset}) calculate({subroutine(sw_seoul_cars_random) + subroutine(sw_seoul_cars_cargo)},
	cbfail() else
)

def({sw_set_reg_seoul_cars}) setregisters(REGISTER_CARS_OFFSET, sub(sw_seoul_cars_offset), ref(sw_set_registers))

// Seoul Stn. (new) pt.1

forloop(X, {
definestation(X, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT})
	include_lengths({7})
	setcargotriggers({PASS})
	nowires(TTD_ALLTILES)
)}, SEOUL_STATION_PART1_HP_A .. SEOUL_STATION_PART1_TRACK)

layout(SEOUL_STATION_PART1_HP_A, LAYOUT_SEOUL_STATION_PART1_HP_A)
layout(SEOUL_STATION_PART1_HP_B, LAYOUT_SEOUL_STATION_PART1_HP_B)
layout(SEOUL_STATION_PART1_LP_A, LAYOUT_SEOUL_STATION_PART1_LP_A)
layout(SEOUL_STATION_PART1_LP_B, LAYOUT_SEOUL_STATION_PART1_LP_B)
layout(SEOUL_STATION_PART1_TRACK, LAYOUT_SEOUL_STATION_PART1_TRACK)

def({sw_seoul_part1_layout2}) plt_pos(
	self(
		cbr(0) if(5)
		cbr(2) if(4)
		cbr(4) if(3)
		cbr(6) if(2)
		cbr(8) if(1)
		cbr(10) if(0)
		cbr(12) if(6)
		cbr(0) else
	)
)

def({sw_seoul_part1_layout}) plt_size(
	self(
		cbr(12) if(nibble(1,1))
		ref(sw_seoul_part1_layout2) else
	)
)

def({sw_seoul_part1_cb}) callback(
	ref(sw_seoul_part1_layout) if(CB_LAYOUT)
	ref(sw_set_reg_seoul_cars) else
)

// Seoul Stn. (new) pt.2

definestation(SEOUL_STATION_PART2, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT})
	nontrack({2,3})
	nowires({2,3})
	setcargotriggers({PASS})
	include_lengths({2})
)

layout(SEOUL_STATION_PART2, LAYOUT_SEOUL_STATION_PART2)

def({sw_seoul_part2_1_layout}) plt_pos(
	self(
		cbr(2) if(0)
		cbr(0) else
	)
)

def({sw_seoul_part2_2_layout}) plt_pos(
	self(
		cbr(6) if(0)
		cbr(4) else
	)
)

def({sw_seoul_part2_layout}) plt_numrev(
	self(
		ref(sw_seoul_part2_2_layout) if(0)
		ref(sw_seoul_part2_1_layout) else
	)
)

def({sw_seoul_part2_tiletype}) test_numrev(
	cbr(2) if(0)
	cbr(0) else
)

def({sw_seoul_part2_cb}) callback(
	ref(sw_seoul_part2_layout) if(CB_LAYOUT)
	ref(sw_seoul_part2_tiletype) if(CB_TILETYPE)
	ref(sw_set_reg_seoul_cars) else
)

def({sw_seoul_part2_cb_purchase}) callback(
	reftile(tile_seoul_part2_purchase) if(CB_LAYOUT)
	ref(sw_set_reg_seoul_cars) else
)

// Seoul Stn. (new) pt.3

forloop(X, {
definestation(X, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT, CB_AFRAME})
	anim_triggers({BUILT})
	setcargotriggers({PASS})
	include_widths({1})
)}, SEOUL_STATION_PART3A_HP_A .. SEOUL_STATION_PART3B_TRACK)

layout(SEOUL_STATION_PART3A_HP_A, LAYOUT_SEOUL_STATION_PART3A_HP_A)
layout(SEOUL_STATION_PART3A_HP_B, LAYOUT_SEOUL_STATION_PART3A_HP_B)
layout(SEOUL_STATION_PART3A_LP_A, LAYOUT_SEOUL_STATION_PART3A_LP_A)
layout(SEOUL_STATION_PART3A_LP_B, LAYOUT_SEOUL_STATION_PART3A_LP_B)
layout(SEOUL_STATION_PART3A_TRACK, LAYOUT_SEOUL_STATION_PART3A_TRACK)

layout(SEOUL_STATION_PART3B_HP_A, LAYOUT_SEOUL_STATION_PART3B_HP_A)
layout(SEOUL_STATION_PART3B_HP_B, LAYOUT_SEOUL_STATION_PART3B_HP_B)
layout(SEOUL_STATION_PART3B_LP_A, LAYOUT_SEOUL_STATION_PART3B_LP_A)
layout(SEOUL_STATION_PART3B_LP_B, LAYOUT_SEOUL_STATION_PART3B_LP_B)
layout(SEOUL_STATION_PART3B_TRACK, LAYOUT_SEOUL_STATION_PART3B_TRACK)

def({sw_seoul_part3_cb}) callback(
	cbr(0x80) if(CB_ACONTROL, CB_AFRAME)
	ref(sw_set_registers) else
)

forloop(X, {
definestation(X, "",
	class(CLASS_BUILDINGS)
	setcargotriggers({PASS})
)}, SEOUL_STATION_PART3C_HP_A .. SEOUL_STATION_PART3C_TRACK)

layout(SEOUL_STATION_PART3C_HP_A, LAYOUT_SEOUL_STATION_PART3C_HP_A)
layout(SEOUL_STATION_PART3C_HP_B, LAYOUT_SEOUL_STATION_PART3C_HP_B)
layout(SEOUL_STATION_PART3C_LP_A, LAYOUT_SEOUL_STATION_PART3C_LP_A)
layout(SEOUL_STATION_PART3C_LP_B, LAYOUT_SEOUL_STATION_PART3C_LP_B)
layout(SEOUL_STATION_PART3C_TRACK, LAYOUT_SEOUL_STATION_PART3C_TRACK)


// Seoul Stn. (new) pt.4

definestation(SEOUL_STATION_PART4A, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT})
	nontrack(TTD_ALLTILES)
	nowires(TTD_ALLTILES)
	include_lengths({3})
	include_widths({1})
)

layout(SEOUL_STATION_PART4A, LAYOUT_SEOUL_STATION_PART4A)

def({sw_seoul_part4a_layout2}) plt_index(
	self(
		cbr(0) if(nibble(2,0))
		cbr(2) if(nibble(1,0))
		cbr(4) else
	)
)

def({sw_seoul_part4a_layout}) plt_size(
	self(
		ref(sw_seoul_part4a_layout2) if(nibble(3,1))
		cbr(4) else
	)
)

def({sw_seoul_part4a_cb}) callback(
	ref(sw_seoul_part4a_layout) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

def({sw_seoul_part4a_cb_purchase}) callback(
	reftile(tile_seoul_part4a_purchase) if(CB_LAYOUT)
	ref(sw_set_registers) else
)


definestation(SEOUL_STATION_PART4B, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT})
	nontrack(TTD_ALLTILES)
	nowires(TTD_ALLTILES)
	include_lengths({6})
	include_widths({2})
)

layout(SEOUL_STATION_PART4B, LAYOUT_SEOUL_STATION_PART4B)

def({sw_seoul_part4b_layout2}) plt_index(
	self(
		cbr(0) if(nibble(5,0))
		cbr(2) if(nibble(4,0))
		cbr(4) if(nibble(3,0))
		cbr(6) if(nibble(2,0))
		cbr(8) if(nibble(1,0))
		cbr(10) if(nibble(0,0))
		cbr(12) if(nibble(5,1))
		cbr(14) if(nibble(4,1))
		cbr(16) if(nibble(3,1))
		cbr(18) if(nibble(2,1))
		cbr(20) if(nibble(1,1))
		cbr(22) else
	)
)

def({sw_seoul_part4b_layout}) plt_size(
	self(
		ref(sw_seoul_part4b_layout2) if(nibble(6,2))
		cbr(24) else
	)
)

def({sw_seoul_part4b_cb}) callback(
	ref(sw_seoul_part4b_layout) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

def({sw_seoul_part4b_cb_purchase}) callback(
	reftile(tile_seoul_part4b_purchase) if(CB_LAYOUT)
	ref(sw_set_registers) else
)


makestation(SEOUL_STATION_BUILDING, link(ref(sw_seoul_building_cb_purchase), MENU) default(ref(sw_seoul_building_cb)))

forloop(X, {makestation(X, default(ref(sw_seoul_part1_cb)))}, SEOUL_STATION_PART1_HP_A .. SEOUL_STATION_PART1_HP_B)
skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, default(ref(sw_seoul_part1_cb)))}, SEOUL_STATION_PART1_LP_A .. SEOUL_STATION_PART1_LP_B)
placelabel(LABEL_HIGHPLATFORM_MODE)
makestation(SEOUL_STATION_PART1_TRACK, default(ref(sw_seoul_part1_cb)))

makestation(SEOUL_STATION_PART2, link(ref(sw_seoul_part2_cb_purchase), MENU) default(ref(sw_seoul_part2_cb)))

forloop(X, {makestation(X, default(ref(sw_seoul_part3_cb)))}, SEOUL_STATION_PART3A_HP_A .. SEOUL_STATION_PART3A_HP_B)
skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, default(ref(sw_seoul_part3_cb)))}, SEOUL_STATION_PART3A_LP_A .. SEOUL_STATION_PART3A_LP_B)
placelabel(LABEL_HIGHPLATFORM_MODE)
makestation(SEOUL_STATION_PART3A_TRACK, default(ref(sw_seoul_part3_cb)))

forloop(X, {makestation(X, default(ref(sw_seoul_part3_cb)))}, SEOUL_STATION_PART3B_HP_A .. SEOUL_STATION_PART3B_HP_B)
skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, default(ref(sw_seoul_part3_cb)))}, SEOUL_STATION_PART3B_LP_A .. SEOUL_STATION_PART3B_LP_B)
placelabel(LABEL_HIGHPLATFORM_MODE)
makestation(SEOUL_STATION_PART3B_TRACK, default(ref(sw_seoul_part3_cb)))

forloop(X, {makestation(X, default(ref(sw_set_registers)))}, SEOUL_STATION_PART3C_HP_A .. SEOUL_STATION_PART3C_HP_B)
skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, default(ref(sw_set_registers)))}, SEOUL_STATION_PART3C_LP_A .. SEOUL_STATION_PART3C_LP_B)
placelabel(LABEL_HIGHPLATFORM_MODE)
makestation(SEOUL_STATION_PART3C_TRACK, default(ref(sw_set_registers)))

makestation(SEOUL_STATION_PART4A, link(ref(sw_seoul_part4a_cb_purchase), MENU) default(ref(sw_seoul_part4a_cb)))
makestation(SEOUL_STATION_PART4B, link(ref(sw_seoul_part4b_cb_purchase), MENU) default(ref(sw_seoul_part4b_cb)))

// Gangneung Stn.

definestation(GANGNEUNG_HP, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT})
	nowires(TTD_ALLTILES)
	include_lengths({4})
	include_widths({4})
	setcargotriggers({PASS})
	tiletypelayout(
		tiletypes({{0,0,0,2},{0,0,0,2},{0,0,0,2},{0,0,0,2}})
	)
)

definestation(GANGNEUNG_LP, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT})
	nowires(TTD_ALLTILES)
	include_lengths({4})
	include_widths({4})
	setcargotriggers({PASS})
	tiletypelayout(
		tiletypes({{0,0,0,2},{0,0,0,2},{0,0,0,2},{0,0,0,2}})
	)
)

layout(GANGNEUNG_HP, LAYOUT_GANGNEUNG_HP)
layout(GANGNEUNG_LP, LAYOUT_GANGNEUNG_LP)

def({sw_gangneung_layout_road1}) plt_axis(
	cbr(24) if(0)
	cbr(26) else
)

def({sw_gangneung_layout_road2}) plt_axis(
	cbr(32) if(0)
	cbr(34) else
)

def({sw_gangneung_layout}) plt_index(
	self(
		cbr(0) if(nibble(2,0))
		cbr(2) if(nibble(1,0))
		cbr(4) if(nibble(0,0))
		cbr(6) if(nibble(2,1))
		cbr(8) if(nibble(1,1))
		cbr(10) if(nibble(0,1))
		cbr(12) if(nibble(2,2))
		cbr(14) if(nibble(1,2))
		cbr(16) if(nibble(0,2))
		cbr(18) if(nibble(2,3))
		cbr(20) if(nibble(1,3))
		cbr(22) if(nibble(0,3))
		ref(sw_gangneung_layout_road1) if(nibble(3,0))
		cbr(28) if(nibble(3,1))
		cbr(30) if(nibble(3,2))
		ref(sw_gangneung_layout_road2) else
	)
)

def({sw_gangneung_tiletype}) test_pos(
	cbr(2) if(0)
	cbr(0) else
)

def({sw_gangneung_cb}) callback(
	ref(sw_gangneung_layout) if(CB_LAYOUT)
	ref(sw_gangneung_tiletype) if(CB_TILETYPE)
	ref(sw_set_registers) else
)

def({sw_gangneung_cb_purchase}) callback(
	reftile(tile_gangneung_purchase) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

makestation(GANGNEUNG_HP, link(ref(sw_gangneung_cb_purchase), MENU) default(ref(sw_gangneung_cb)))
skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	makestation(GANGNEUNG_LP, link(ref(sw_gangneung_cb_purchase), MENU) default(ref(sw_gangneung_cb)))
placelabel(LABEL_HIGHPLATFORM_MODE)

// Gwangmyeong Stn.

definestation(GWANGMYEONG_STN_PART1, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT})
	include_widths({4,6,8})
	exclude_lengths({1})
	setcargotriggers({PASS})
)


forloop(X, {
definestation(X, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT})
	flags({FOUNDATIONS})
	include_widths({1,2})
	setcargotriggers({PASS})
	nontrack(TTD_ALLTILES)
	nowires(TTD_ALLTILES)
)}, GWANGMYEONG_STN_PART2A .. GWANGMYEONG_STN_PART2B)

skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	layout(GWANGMYEONG_STN_PART1, LAYOUT_GWANGMYEONG)
placelabel(LABEL_HIGHPLATFORM_MODE)

skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), !=, PARAM_MODE_HIGHPLATFORM)
	layout(GWANGMYEONG_STN_PART1, LAYOUT_GWANGMYEONG_HP_ONLY)
placelabel(LABEL_HIGHPLATFORM_MODE)

layout(GWANGMYEONG_STN_PART2A, LAYOUT_GWANGMYEONG_PART2A)
layout(GWANGMYEONG_STN_PART2B, LAYOUT_GWANGMYEONG_PART2B)

def({sw_gwangmyeong_reg_offset_rev}) plt_posrev(
	self(
		cbr(16) if(0)
		cbr(8) else
	)
)

def({sw_gwangmyeong_reg_offset}) plt_pos(
	self(
		cbr(0) if(0)
		ref(sw_gwangmyeong_reg_offset_rev) else
	)
)

def({sw_gwangmyeong_reg_skip}) subroutine(sw_gwangmyeong_reg_offset,
	cbr(0) if(8)
	cbr(1) else
)

def({sw_gwangmyeong_reg}) setregisters(REGISTER_GWANGMYEONG_FRAME_SKIP, {sub(sw_gwangmyeong_reg_skip), sub(sw_gwangmyeong_reg_offset)}, ref(sw_set_registers))
def({sw_gwangmyeong_reg_menu}) setregisters(REGISTER_GWANGMYEONG_FRAME_SKIP, {1, 16}, ref(sw_set_registers))

def({sw_gwangmyeong_part1_layout_size_8}) plt_numrev(
	self(
		cbr(0)  if(0)
		cbr(2)  if(1)
		cbr(4)  if(2)
		cbr(6)  if(3)
		cbr(8)  if(4)
		cbr(10) if(5)
		cbr(12) if(6)
		cbr(14) else
	)
)

def({sw_gwangmyeong_part1_layout_size_6}) plt_numrev(
	self(
		cbr(16) if(0)
		cbr(18) if(1)
		cbr(20) if(2)
		cbr(22) if(3)
		cbr(24) if(4)
		cbr(26) else
	)
)

def({sw_gwangmyeong_part1_layout_size_4}) plt_numrev(
	self(
		cbr(28) if(0)
		cbr(30) if(1)
		cbr(32) if(2)
		cbr(34) else
	)
)

def({sw_gwangmyeong_part1_layout}) plt_total(
	self(
		ref(sw_gwangmyeong_part1_layout_size_4) if(0..4)
		ref(sw_gwangmyeong_part1_layout_size_6) if(5..6)
		ref(sw_gwangmyeong_part1_layout_size_8) else
	)
)

def({sw_gwangmyeong_part1_cb}) callback(
	ref(sw_gwangmyeong_part1_layout) if(CB_LAYOUT)
	ref(sw_gwangmyeong_reg) else
)

def({sw_gwangmyeong_part1_cb_purchase}) callback(
	cbr(28) if(CB_LAYOUT)
	ref(sw_gwangmyeong_reg_menu) else
)

def({sw_gwangmyeong_part2_sprtype}) spritetype(
	ref(sprset_gwangmyeong_foundation) if(2)
	ref(sw_gwangmyeong_reg) else
)

def({sw_gwangmyeong_part2a_layout_size_2}) plt_num(
	self(
		cbr(2) if(0)
		cbr(0) else
	)
)

def({sw_gwangmyeong_part2a_layout}) plt_total(
	self(
		cbr(4) if(1)
		ref(sw_gwangmyeong_part2a_layout_size_2) else
	)
)

def({sw_gwangmyeong_part2a_cb}) callback(
	ref(sw_gwangmyeong_part2a_layout) if(CB_LAYOUT)
	ref(sw_gwangmyeong_part2_sprtype) else
)

def({sw_gwangmyeong_part2a_cb_purchase}) callback(
	cbr(4) if(CB_LAYOUT)
	ref(sw_gwangmyeong_reg_menu) else
)

def({sw_gwangmyeong_part2b_layout_size_2}) plt_num(
	self(
		cbr(2) if(0)
		cbr(0) else
	)
)

def({sw_gwangmyeong_part2b_layout}) plt_total(
	self(
		cbr(4) if(1)
		ref(sw_gwangmyeong_part2b_layout_size_2) else
	)
)

def({sw_gwangmyeong_part2b_cb}) callback(
	ref(sw_gwangmyeong_part2b_layout) if(CB_LAYOUT)
	ref(sw_gwangmyeong_part2_sprtype) else
)

def({sw_gwangmyeong_part2b_cb_purchase}) callback(
	cbr(4) if(CB_LAYOUT)
	ref(sw_gwangmyeong_reg_menu) else
)

makestation(GWANGMYEONG_STN_PART1, link(ref(sw_gwangmyeong_part1_cb_purchase), MENU) default(ref(sw_gwangmyeong_part1_cb)))

makestation(GWANGMYEONG_STN_PART2A, link(ref(sw_gwangmyeong_part2a_cb_purchase), MENU) default(ref(sw_gwangmyeong_part2a_cb)))
makestation(GWANGMYEONG_STN_PART2B, link(ref(sw_gwangmyeong_part2b_cb_purchase), MENU) default(ref(sw_gwangmyeong_part2b_cb)))

// metro platforms
forloop(X, {
definestation(X, "",
	class(CLASS_METRO)
	callbacks({CB_LAYOUT})
	setcargotriggers({PASS})
	nowires(TTD_ALLTILES)
)}, METRO_HP_A .. METRO_TRACK)

forloop(X, {
definestation(X, "",
	class(CLASS_METRO)
	callbacks({CB_LAYOUT, CB_AFRAME})
	setcargotriggers({PASS})
	nowires(TTD_ALLTILES)
	anim_info({13, NOLOOP})
	anim_speed(4)
	anim_triggers({PERIODIC, LEAVE})
	include_widths({1})
	include_lengths({1})
)}, METRO_EXIT_SOUTH_HP_A .. METRO_EXIT_NORTH_TRACK)

forloop(X, {
definestation(X, "",
	class(CLASS_METRO)
	callbacks({CB_LAYOUT})
	setcargotriggers({PASS})
	nowires(TTD_ALLTILES)
)}, METRO_PARK_HP_A .. METRO_TREE_TRACK)

forloop(X, {
definestation(X, "",
	class(CLASS_METRO)
	callbacks({CB_LAYOUT})
	setcargotriggers({PASS})
	nowires(TTD_ALLTILES)
	nontrack(TTD_ALLTILES)
	include_widths({1})
	include_lengths({1})
)}, METRO_EXIT_SOUTH_NONTRACK .. METRO_EXIT_NORTH_NONTRACK)

layout(METRO_HP_A, LAYOUT_METRO_HP_A)
layout(METRO_HP_B, LAYOUT_METRO_HP_B)
layout(METRO_HP_C, LAYOUT_METRO_HP_C)

layout(METRO_LP_A, LAYOUT_METRO_LP_A)
layout(METRO_LP_B, LAYOUT_METRO_LP_B)
layout(METRO_LP_C, LAYOUT_METRO_LP_C)

layout(METRO_TRACK, LAYOUT_METRO_TRACK)

layout(METRO_EXIT_SOUTH_HP_A, LAYOUT_METRO_EXIT_SOUTH_HP_A)
layout(METRO_EXIT_SOUTH_HP_B, LAYOUT_METRO_EXIT_SOUTH_HP_B)
layout(METRO_EXIT_SOUTH_HP_C, LAYOUT_METRO_EXIT_SOUTH_HP_C)

layout(METRO_EXIT_SOUTH_LP_A, LAYOUT_METRO_EXIT_SOUTH_LP_A)
layout(METRO_EXIT_SOUTH_LP_B, LAYOUT_METRO_EXIT_SOUTH_LP_B)
layout(METRO_EXIT_SOUTH_LP_C, LAYOUT_METRO_EXIT_SOUTH_LP_C)

layout(METRO_EXIT_SOUTH_TRACK, LAYOUT_METRO_EXIT_SOUTH_TRACK)

layout(METRO_EXIT_NORTH_HP_A, LAYOUT_METRO_EXIT_NORTH_HP_A)
layout(METRO_EXIT_NORTH_HP_B, LAYOUT_METRO_EXIT_NORTH_HP_B)
layout(METRO_EXIT_NORTH_HP_C, LAYOUT_METRO_EXIT_NORTH_HP_C)

layout(METRO_EXIT_NORTH_LP_A, LAYOUT_METRO_EXIT_NORTH_LP_A)
layout(METRO_EXIT_NORTH_LP_B, LAYOUT_METRO_EXIT_NORTH_LP_B)
layout(METRO_EXIT_NORTH_LP_C, LAYOUT_METRO_EXIT_NORTH_LP_C)

layout(METRO_EXIT_NORTH_TRACK, LAYOUT_METRO_EXIT_NORTH_TRACK)

layout(METRO_PARK_HP_A, LAYOUT_METRO_PARK_HP_A)
layout(METRO_PARK_HP_B, LAYOUT_METRO_PARK_HP_B)
layout(METRO_PARK_HP_C, LAYOUT_METRO_PARK_HP_C)

layout(METRO_PARK_LP_A, LAYOUT_METRO_PARK_LP_A)
layout(METRO_PARK_LP_B, LAYOUT_METRO_PARK_LP_B)
layout(METRO_PARK_LP_C, LAYOUT_METRO_PARK_LP_C)

layout(METRO_PARK_TRACK, LAYOUT_METRO_PARK_TRACK)

layout(METRO_TREE_HP_A, LAYOUT_METRO_TREE_HP_A)
layout(METRO_TREE_HP_B, LAYOUT_METRO_TREE_HP_B)
layout(METRO_TREE_HP_C, LAYOUT_METRO_TREE_HP_C)

layout(METRO_TREE_LP_A, LAYOUT_METRO_TREE_LP_A)
layout(METRO_TREE_LP_B, LAYOUT_METRO_TREE_LP_B)
layout(METRO_TREE_LP_C, LAYOUT_METRO_TREE_LP_C)

layout(METRO_TREE_TRACK, LAYOUT_METRO_TREE_TRACK)

layout(METRO_EXIT_SOUTH_NONTRACK, LAYOUT_METRO_EXIT_SOUTH_NONTRACK)
layout(METRO_EXIT_NORTH_NONTRACK, LAYOUT_METRO_EXIT_NORTH_NONTRACK)

def({sw_metro_overlap_back_slope_sub2}) tinfo_slope(pos(2, 0),
	cbr(6) if(SOUTH+WEST)
	cbr(0) else
)

def({sw_metro_overlap_back_slope_sub}) tinfo_slope(pos(1, 0),
	cbr(0) if(NORTH+EAST, NORTH, EAST)
	ref(sw_metro_overlap_back_slope_sub2) else
)

def({sw_metro_overlap_back_len_sub}) tinfo_lclass(pos(2, 0),
	ref(sw_metro_overlap_back_slope_sub) if(LC_TUNNELBRIDGE)
	cbr(0) else
)

def({sw_metro_overlap_back_slope}) tinfo_slope(pos(1, 0),
	cbr(2) if(SOUTH+WEST)
	ref(sw_metro_overlap_back_len_sub) else
)

def({sw_metro_overlap_back_len}) tinfo_lclass(pos(1, 0),
	ref(sw_metro_overlap_back_slope) if(LC_TUNNELBRIDGE)
	ref(sw_metro_overlap_back_len_sub) else
)

def({sw_metro_overlap_front_slope_sub2}) tinfo_slope(pos(-2, 0),
	cbr(8) if(NORTH+EAST)
	cbr(0) else
)

def({sw_metro_overlap_front_slope_sub}) tinfo_slope(pos(-1, 0),
	cbr(0) if(SOUTH+WEST, SOUTH, WEST)
	ref(sw_metro_overlap_front_slope_sub2) else
)

def({sw_metro_overlap_front_len_sub}) tinfo_lclass(pos(-2, 0),
	ref(sw_metro_overlap_front_slope_sub) if(LC_TUNNELBRIDGE)
	cbr(0) else
)

def({sw_metro_overlap_front_slope}) tinfo_slope(pos(-1, 0),
	cbr(4) if(NORTH+EAST)
	ref(sw_metro_overlap_front_len_sub) else
)

def({sw_metro_overlap_front_len}) tinfo_lclass(pos(-1, 0),
	ref(sw_metro_overlap_front_slope) if(LC_TUNNELBRIDGE)
	ref(sw_metro_overlap_front_len_sub) else
)

def({sw_metro_overlap_back}) plt_posrev(
	ref(sw_metro_overlap_back_len) if(0)
	cbr(0) else
)

def({sw_metro_overlap_front}) plt_pos(
	ref(sw_metro_overlap_front_len) if(0)
	ref(sw_metro_overlap_back) else
)

def({sw_metro_layout}) plt_length(
	cbr(0) if(1)
	ref(sw_metro_overlap_front) else
)

// multi-platform calculation
def({sw_metro_platformA_multi_layout}) calculate({subroutine(sw_platformA_check_opposite) * 10 + subroutine(sw_metro_layout)},
	cbfail() else
)

def({sw_metro_platformB_multi_layout}) calculate({subroutine(sw_platformB_check_opposite) * 10 + subroutine(sw_metro_layout)},
	cbfail() else
)

def({sw_metro_multi_layout}) subroutine(sw_platform_multi_check,
	ref(sw_metro_platformA_multi_layout) if(1)
	ref(sw_metro_platformB_multi_layout) if(2)
	ref(sw_metro_layout) else
)

def({sw_metro_exit_animframe}) anim_frame(
	animframe(0) if(8,12)
	animframe(A_STOP) if(0)
	animframe(A_NEXT) else
)

def({sw_metro_exit_animctrl_sub}) anim_frame(
	animcontrol(A_NOP) if(1 .. 8)
	animcontrol(9) else
)

def({sw_metro_exit_animctrl}) anim_trigger(
	animcontrol(1) if(LEAVE)
	ref(sw_metro_exit_animctrl_sub) if(PERIODIC)
	animcontrol(A_NOP) else
)

// m4nfo bug :(
def({sw_anim_frame}) anim_frame(
	cbfail() else
)

def({sw_metro_exit_frame}) calculate({subroutine(sw_anim_frame) * 4},
	cbfail() else
)

def({sw_metro_tree_type}) random(BUILT, 18, cbr(0), cbr(1))

def({sw_metro_tree_offset}) calculate({subroutine(sw_metro_tree_type) * 2 + subroutine(sw_terrain_snow)},
	cbfail() else
)

def({sw_metro_snow_random}) random(BUILT, 16, cbr(0), cbr(1))

def({sw_metro_reg}) setregisters(REGISTER_METRO_EXIT_OFFSET, {sub(sw_metro_exit_frame), sub(sw_metro_tree_offset), sub(sw_terrain_snow), sub(sw_metro_snow_random)}, ref(sw_set_registers))
def({sw_metro_reg_menu}) setregisters(REGISTER_METRO_EXIT_OFFSET, {0, 0, 0, 0}, ref(sw_set_registers))

def({sw_metro_cb}) callback(
	ref(sw_metro_multi_layout) if(CB_LAYOUT)
	ref(sw_metro_reg) else
)

def({sw_metro_cb_menu}) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_metro_reg_menu) else
)

def({sw_metro_exit_cb}) callback(
	ref(sw_metro_exit_animctrl) if(CB_ACONTROL)
	ref(sw_metro_exit_animframe) if(CB_AFRAME)
	ref(sw_metro_multi_layout) if(CB_LAYOUT)
	ref(sw_metro_reg) else
)

def({sw_metro_exit_cb_menu}) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_metro_reg_menu) else
)

forloop(X, {makestation(X, link(ref(sw_metro_cb_menu), MENU) default(ref(sw_metro_cb)))}, METRO_HP_A .. METRO_HP_C)

skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, link(ref(sw_metro_cb_menu), MENU) default(ref(sw_metro_cb)))}, METRO_LP_A .. METRO_LP_C)
placelabel(LABEL_HIGHPLATFORM_MODE)

makestation(METRO_TRACK, link(ref(sw_metro_cb_menu), MENU) default(ref(sw_metro_cb)))

forloop(X, {makestation(X, link(ref(sw_metro_exit_cb_menu), MENU) default(ref(sw_metro_exit_cb)))}, METRO_EXIT_SOUTH_HP_A .. METRO_EXIT_SOUTH_HP_C)

skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, link(ref(sw_metro_exit_cb_menu), MENU) default(ref(sw_metro_exit_cb)))}, METRO_EXIT_SOUTH_LP_A .. METRO_EXIT_SOUTH_LP_C)
placelabel(LABEL_HIGHPLATFORM_MODE)

makestation(METRO_EXIT_SOUTH_TRACK, link(ref(sw_metro_exit_cb_menu), MENU) default(ref(sw_metro_exit_cb)))

forloop(X, {makestation(X, link(ref(sw_metro_exit_cb_menu), MENU) default(ref(sw_metro_exit_cb)))}, METRO_EXIT_NORTH_HP_A .. METRO_EXIT_NORTH_HP_C)

skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, link(ref(sw_metro_exit_cb_menu), MENU) default(ref(sw_metro_exit_cb)))}, METRO_EXIT_NORTH_LP_A .. METRO_EXIT_NORTH_LP_C)
placelabel(LABEL_HIGHPLATFORM_MODE)

makestation(METRO_EXIT_NORTH_TRACK, link(ref(sw_metro_exit_cb_menu), MENU) default(ref(sw_metro_exit_cb)))

forloop(X, {makestation(X, link(ref(sw_metro_cb_menu), MENU) default(ref(sw_metro_cb)))}, METRO_EXIT_SOUTH_NONTRACK .. METRO_EXIT_NORTH_NONTRACK)

forloop(X, {makestation(X, link(ref(sw_metro_cb_menu), MENU) default(ref(sw_metro_cb)))}, METRO_PARK_HP_A .. METRO_PARK_HP_C)

skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, link(ref(sw_metro_cb_menu), MENU) default(ref(sw_metro_cb)))}, METRO_PARK_LP_A .. METRO_PARK_LP_C)
placelabel(LABEL_HIGHPLATFORM_MODE)

makestation(METRO_PARK_TRACK, link(ref(sw_metro_cb_menu), MENU) default(ref(sw_metro_cb)))

forloop(X, {makestation(X, link(ref(sw_metro_cb_menu), MENU) default(ref(sw_metro_cb)))}, METRO_TREE_HP_A .. METRO_TREE_HP_C)

skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, link(ref(sw_metro_cb_menu), MENU) default(ref(sw_metro_cb)))}, METRO_TREE_LP_A .. METRO_TREE_LP_C)
placelabel(LABEL_HIGHPLATFORM_MODE)

makestation(METRO_TREE_TRACK, link(ref(sw_metro_cb_menu), MENU) default(ref(sw_metro_cb)))

// Suseo Stn.

forloop(X, {
definestation(X, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT})
	nowires(TTD_ALLTILES)
	include_lengths({4})
	include_widths({2})
)}, SUSEO_NONTRACK .. SUSEO_LP)

setproperties(SUSEO_NONTRACK,
	nontrack(TTD_ALLTILES)
)

forloop(X, {
definestation(X, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT})
	nowires(TTD_ALLTILES)
)}, SUSEO_PARKING_LOT_NONTRACK .. SUSEO_PARKING_LOT_TRACK)

setproperties(SUSEO_PARKING_LOT_NONTRACK,
	nontrack(TTD_ALLTILES)
)

layout(SUSEO_NONTRACK, LAYOUT_SUSEO_NONTRACK)
layout(SUSEO_HP, LAYOUT_SUSEO_HP)
layout(SUSEO_LP, LAYOUT_SUSEO_LP)

layout(SUSEO_PARKING_LOT_NONTRACK, LAYOUT_SUSEO_PARKING_LOT_NONTRACK)

layout(SUSEO_PARKING_LOT_HP_A, LAYOUT_SUSEO_PARKING_LOT_HP_A)
layout(SUSEO_PARKING_LOT_HP_B, LAYOUT_SUSEO_PARKING_LOT_HP_B)
layout(SUSEO_PARKING_LOT_HP_C, LAYOUT_SUSEO_PARKING_LOT_HP_C)

layout(SUSEO_PARKING_LOT_LP_A, LAYOUT_SUSEO_PARKING_LOT_LP_A)
layout(SUSEO_PARKING_LOT_LP_B, LAYOUT_SUSEO_PARKING_LOT_LP_B)
layout(SUSEO_PARKING_LOT_LP_C, LAYOUT_SUSEO_PARKING_LOT_LP_C)

layout(SUSEO_PARKING_LOT_TRACK, LAYOUT_SUSEO_PARKING_LOT_TRACK)

def({sw_suseo_layout}) plt_index(
	self(
		cbr(0) if(nibble(0,1))
		cbr(2) if(nibble(1,1))
		cbr(4) if(nibble(2,1))
		cbr(6) if(nibble(3,1))
		cbr(8) if(nibble(0,0))
		cbr(10) if(nibble(1,0))
		cbr(12) if(nibble(2,0))
		cbr(14) if(nibble(3,0))
		cbr(0) else
	)
)

def({sw_suseo_cb}) callback(
	ref(sw_suseo_layout) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

def({sw_suseo_cb_purchase}) callback(
	cbr(16) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

def({sw_suseo_parking_lotA_multi_layout}) calculate({subroutine(sw_platformA_check_opposite) * 2},
	cbfail() else
)

def({sw_suseo_parking_lotB_multi_layout}) calculate({subroutine(sw_platformB_check_opposite) * 2},
	cbfail() else
)

def({sw_suseo_parking_lot_multi_layout}) subroutine(sw_platform_multi_check,
	ref(sw_suseo_parking_lotA_multi_layout) if(1)
	ref(sw_suseo_parking_lotB_multi_layout) if(2)
	cbr(0) else
)

def({sw_suseo_parking_lot_cb}) callback(
	ref(sw_suseo_parking_lot_multi_layout) if(CB_LAYOUT)
	ref(sw_set_reg_seoul_cars) else
)

def({sw_suseo_parking_lot_cb_purchase}) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

forloop(X, {makestation(X, link(ref(sw_suseo_cb_purchase), MENU) default(ref(sw_suseo_cb)))}, SUSEO_NONTRACK .. SUSEO_HP)
skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	makestation(SUSEO_LP, link(ref(sw_suseo_cb_purchase), MENU) default(ref(sw_suseo_cb)))
placelabel(LABEL_HIGHPLATFORM_MODE)

forloop(X, {makestation(X, link(ref(sw_suseo_parking_lot_cb_purchase), MENU) default(ref(sw_suseo_parking_lot_cb)))}, SUSEO_PARKING_LOT_NONTRACK .. SUSEO_PARKING_LOT_HP_C)
skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, link(ref(sw_suseo_parking_lot_cb_purchase), MENU) default(ref(sw_suseo_parking_lot_cb)))}, SUSEO_PARKING_LOT_LP_A .. SUSEO_PARKING_LOT_LP_C)
placelabel(LABEL_HIGHPLATFORM_MODE)
makestation(SUSEO_PARKING_LOT_TRACK, link(ref(sw_suseo_parking_lot_cb_purchase), MENU) default(ref(sw_suseo_parking_lot_cb)))

// Overpass Stairs

forloop(X, {
definestation(X, "",
	class(CLASS_MODULAR)
	callbacks({CB_LAYOUT})
	include_lengths({1})
	setcargotriggers({PASS})
)}, OVERPASS_STAIR_START .. OVERPASS_STAIR_END)

layout(OVERPASS_STAIR_HP_A, LAYOUT_OVERPASS_STAIR_HP_A)
layout(OVERPASS_STAIR_HP_B, LAYOUT_OVERPASS_STAIR_HP_B)
layout(OVERPASS_STAIR_HP_C, LAYOUT_OVERPASS_STAIR_HP_C)
layout(OVERPASS_STAIR_HP_A_RF_A, LAYOUT_OVERPASS_STAIR_HP_A_RF_A)
layout(OVERPASS_STAIR_HP_B_RF_A, LAYOUT_OVERPASS_STAIR_HP_B_RF_A)
layout(OVERPASS_STAIR_HP_C_RF_A, LAYOUT_OVERPASS_STAIR_HP_C_RF_A)
layout(OVERPASS_STAIR_HP_A_RF_B, LAYOUT_OVERPASS_STAIR_HP_A_RF_B)
layout(OVERPASS_STAIR_HP_B_RF_B, LAYOUT_OVERPASS_STAIR_HP_B_RF_B)
layout(OVERPASS_STAIR_HP_C_RF_B, LAYOUT_OVERPASS_STAIR_HP_C_RF_B)
layout(OVERPASS_STAIR_LP_A, LAYOUT_OVERPASS_STAIR_LP_A)
layout(OVERPASS_STAIR_LP_B, LAYOUT_OVERPASS_STAIR_LP_B)
layout(OVERPASS_STAIR_LP_C, LAYOUT_OVERPASS_STAIR_LP_C)
layout(OVERPASS_STAIR_LP_A_RF_A, LAYOUT_OVERPASS_STAIR_LP_A_RF_A)
layout(OVERPASS_STAIR_LP_B_RF_A, LAYOUT_OVERPASS_STAIR_LP_B_RF_A)
layout(OVERPASS_STAIR_LP_C_RF_A, LAYOUT_OVERPASS_STAIR_LP_C_RF_A)
layout(OVERPASS_STAIR_LP_A_RF_B, LAYOUT_OVERPASS_STAIR_LP_A_RF_B)
layout(OVERPASS_STAIR_LP_B_RF_B, LAYOUT_OVERPASS_STAIR_LP_B_RF_B)
layout(OVERPASS_STAIR_LP_C_RF_B, LAYOUT_OVERPASS_STAIR_LP_C_RF_B)
layout(OVERPASS_STAIR_LAP_A, LAYOUT_OVERPASS_STAIR_LAP_A)
layout(OVERPASS_STAIR_LAP_B, LAYOUT_OVERPASS_STAIR_LAP_B)
layout(OVERPASS_STAIR_LAP_C, LAYOUT_OVERPASS_STAIR_LAP_C)
layout(OVERPASS_STAIR_LAP_A_RF_A, LAYOUT_OVERPASS_STAIR_LAP_A_RF_A)
layout(OVERPASS_STAIR_LAP_B_RF_A, LAYOUT_OVERPASS_STAIR_LAP_B_RF_A)
layout(OVERPASS_STAIR_LAP_C_RF_A, LAYOUT_OVERPASS_STAIR_LAP_C_RF_A)
layout(OVERPASS_STAIR_LAP_A_RF_B, LAYOUT_OVERPASS_STAIR_LAP_A_RF_B)
layout(OVERPASS_STAIR_LAP_B_RF_B, LAYOUT_OVERPASS_STAIR_LAP_B_RF_B)
layout(OVERPASS_STAIR_LAP_C_RF_B, LAYOUT_OVERPASS_STAIR_LAP_C_RF_B)


def({sw_overpass_stair_back_sub}) tinfo_statid(pos(1, 0),
	cbr(2) if(MODULAR_START .. MODULAR_END)
	cbr(0) else
)

def({sw_overpass_stair_back}) tinfo_grfid(pos(1, 0),
	ref(sw_overpass_stair_back_sub) if(VAR_GRFID_KWS_PART1)
	cbr(0) else
)

def({sw_overpass_stair_layout}) calculate({subroutine(sw_terrain_snow) * 4 + subroutine(sw_overpass_stair_back)},
	cbfail() else
)

def({sw_overpass_pA_stair_layout}) calculate({subroutine(sw_platformA_check_opposite) * 8 + subroutine(sw_overpass_stair_layout)},
	cbfail() else
)

def({sw_overpass_pB_stair_layout}) calculate({subroutine(sw_platformB_check_opposite) * 8 + subroutine(sw_overpass_stair_layout)},
	cbfail() else
)

def({sw_overpass_stair_multi_layout}) subroutine(sw_platform_multi_check,
	ref(sw_overpass_pA_stair_layout) if(1)
	ref(sw_overpass_pB_stair_layout) if(2)
	ref(sw_overpass_stair_layout) else
)

def({sw_reg_overpass_stair_offset}) calculate({subroutine(sw_terrain_snow) * 4 + subroutine(sw_overpass_stair_back)},
	cbfail() else
)

def({sw_set_reg_overpass_stair}) setregisters(REGISTER_OVERPASS_STAIR_OFFEST, {sub(sw_reg_overpass_stair_offset)}, ref(sw_set_registers))

def({sw_set_reg_overpass_stair_purchase}) setregisters(REGISTER_OVERPASS_STAIR_OFFEST, {0}, ref(sw_set_registers))

def({sw_overpass_stairs_platform_cb}) callback(
	ref(sw_overpass_stair_layout) if(CB_LAYOUT)
	ref(sw_set_reg_overpass_stair) else
)

def({sw_overpass_stairs_platform_cb_purchase}) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_set_reg_overpass_stair_purchase) else
)

forloop(X, {makestation(X, link(ref(sw_overpass_stairs_platform_cb_purchase), MENU) default(ref(sw_overpass_stairs_platform_cb)))}, OVERPASS_STAIR_HP_A .. OVERPASS_STAIR_HP_C_RF_B)

skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, link(ref(sw_overpass_stairs_platform_cb_purchase), MENU) default(ref(sw_overpass_stairs_platform_cb)))}, OVERPASS_STAIR_LP_A .. OVERPASS_STAIR_LAP_C_RF_B)
placelabel(LABEL_HIGHPLATFORM_MODE)

// bridge_height

deflabel(LABEL_ALLOW_BRIDGE)
skipif(reflabel(LABEL_ALLOW_BRIDGE), PLATFORM, BITCLR, GRFFEATURE_BRIDGE)
skipif(reflabel(LABEL_ALLOW_BRIDGE), getowngrfparameter(PARAM_FLAGS), BITCLR, PARAM_FLAGS_BRIDGE)

setproperties(CROSSING_HP_A .. CROSSING_HP_C, bridge_height({1,1,1,1}))
setproperties(CROSSING_HP_A_RF_A .. CROSSING_HP_C_RF_B, bridge_height({3,3,3,3}))

setproperties(PSD_OVERPASS_START .. PSD_OVERPASS_END, bridge_height({3,3,3,3}))
setproperties(PSD_UNDERPASS_START .. PSD_UNDERPASS_END, bridge_height({3,3,3,3}))

setproperties(BUFFER_HP_A .. BUFFER_HP_C, bridge_height({1,1,1,1}))
setproperties(BUFFER_LP_A .. BUFFER_LP_C, bridge_height({1,1,1,1}))
setproperties(BUFFER_LAP_A .. BUFFER_LAP_C, bridge_height({1,1,1,1}))

setproperties(BUFFER_HP_A_RF_A .. BUFFER_HP_C_RF_B, bridge_height({3,3,3,3}))
setproperties(BUFFER_LP_A_RF_A .. BUFFER_LP_C_RF_B, bridge_height({3,3,3,3}))
setproperties(BUFFER_LAP_A_RF_A .. BUFFER_LAP_C_RF_B, bridge_height({3,3,3,3}))

setproperties(GANGNEUNG_HP .. GANGNEUNG_LP, bridge_height({0,1,0,0}))

setproperties(METRO_HP_A .. METRO_TRACK, bridge_height({1,1,1,1}))
setproperties(METRO_PARK_HP_A .. METRO_PARK_TRACK, bridge_height({1,1,1,1}))

placelabel(LABEL_ALLOW_BRIDGE)
