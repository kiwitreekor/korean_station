divert(-1)
include(sprites/kws.m4)
include(sprites/kws_func.nfx)
divert

define({file_index}, 2)

include(sprites/lang/english.nfx)
include(sprites/lang/korean.nfx)

setfeature(_STATION)
setpath(sprites/gfx)

textmode_on()
grfinit(GRFID_KWS_PART2,
	grfname(STR_GRF_NAME_PART2)
	grfdescription(STR_GRF_DESC)
	grfurl(ALL, {"https://github.com/kiwitreekor/korean_station/"})
	grfversion(GRF_VERSION)
	grfminversion(GRF_MIN_VERSION)
)
textmode_off()
asl_on()

getothergrfparameter(PARAM_FLAGS, GRFID_KWS_PART1, PARAM_FLAGS)
getothergrfparameter(PARAM_MODE, GRFID_KWS_PART1, PARAM_MODE)
getothergrfparameter(PARAM_ROOF_COLOUR, GRFID_KWS_PART1, PARAM_ROOF_COLOUR)
getothergrfparameter(PARAM_VERSION, GRFID_KWS_PART1, VERSION)

skipif(1, GRFACTIVE, -, GRFID_KWS_PART1)
skipif(1, getowngrfparameter(PARAM_VERSION), ==, GRF_VERSION)
error(FATAL, ALL, 05, "kws1.grf")

include(sprites/sprites.nfx)

def({sprset_default}) spriteset(little(0), lots(0))

setpath(sounds)
soundtable(
	defsnd(snd_psd_open, PSD_open.wav)
	defsnd(snd_psd_close, PSD_close.wav)
)


skipif(1, getowngrfparameter(PARAM_FLAGS), BITCLR, PARAM_FLAGS_SNOW)
def({sw_terrain_snow}) tinfo_terrain(
	cbr(1) if(SNOW)
	cbr(0) else
)

skipif(1, getowngrfparameter(PARAM_FLAGS), BITSET, PARAM_FLAGS_SNOW)
def({sw_terrain_snow}) tinfo_terrain(
	cbr(0) if(SNOW)
	cbr(0) else
)

def({sw_get_param_roof_colour}) calculate({getparameter(PARAM_ROOF_COLOUR,) AND 0xF + 0x307 - 1},
	cbfail() else
)

def({sw_reg_roof_colour}) getparameter(PARAM_ROOF_COLOUR, shiftmask(0, 0xF),
	cbr(0) if(0)
	ref(sw_get_param_roof_colour) else
)

def({sw_set_reg_roof_colour}) setregisters(REGISTER_ROOF_RECOLOUR, {sub(sw_reg_roof_colour)}, ref(sprset_default))

def({sw_reg_roof_overpass}) subroutine(sw_terrain_snow,
	cbr(spr_roofs_overpass_snow - spr_roofs_overpass) if(1)
	cbr(0) else
)

def({sw_reg_overpass_guide}) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_SHADOW, 0x1),
	cbr(spr_overpass_guide_s - spr_overpass_guide) if(1)
	cbr(0) else
)

def({sw_reg_overpass}) subroutine(sw_terrain_snow,
	cbr(spr_overpass_snow - spr_overpass) if(1)
	cbr(0) else
)
def({sw_set_reg_overpass}) setregisters(REGISTER_OVERPASS_OFFSET, {sub(sw_reg_overpass), sub(sw_reg_overpass_guide), sub(sw_reg_roof_overpass)}, ref(sw_set_reg_roof_colour))


def({sw_reg_crossing_shadow}) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_SHADOW, 0x1),
	cbr(spr_platform_cs - spr_platform_c) if(1)
	cbr(0) else
)

def({sw_reg_crossing}) subroutine(sw_terrain_snow,
	cbr(spr_platform_c_snow - spr_platform_c) if(1)
	cbr(0) else
)

def({sw_reg_platform_shadow}) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_SHADOW, 0x1),
	cbr(spr_platform_s - spr_platform) if(1)
	cbr(0) else
)

def({sw_reg_roof}) subroutine(sw_terrain_snow,
	cbr(spr_roofs_snow - spr_roofs) if(1)
	cbr(0) else
)

def({sw_reg_passenger_skip_random1}) random(0, 16, cbr(0), cbr(0), cbr(0), cbr(0), cbr(0), cbr(0), cbr(0), cbr(1))
def({sw_reg_passenger_skip_random2}) random(0, 16, cbr(0), cbr(0), cbr(0), cbr(1))
def({sw_reg_passenger_skip_random3}) random(0, 16, cbr(0), cbr(0), cbr(1), cbr(1))
def({sw_reg_passenger_skip_random4}) random(0, 16, cbr(0), cbr(1), cbr(1), cbr(1), cbr(1), cbr(1), cbr(1), cbr(1))

def({sw_reg_passenger_skip_sub}) cargowaiting(PASS,
	cbr(0) if(0)
	ref(sw_reg_passenger_skip_random1) if(1 .. 7)
	ref(sw_reg_passenger_skip_random2) if(8 .. 15)
	ref(sw_reg_passenger_skip_random3) if(16 .. 31)
	ref(sw_reg_passenger_skip_random4) if(32 .. 63)
	cbr(1) else
)

def({sw_reg_passenger_skip}) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_PASSENGER, 0x1),
	ref(sw_reg_passenger_skip_sub) if(1)
	cbr(0) else
)

def({sw_reg_platform}) subroutine(sw_terrain_snow,
	cbr(spr_platform_snow - spr_platform) if(1)
	cbr(0) else
)

def({sw_reg_passenger5_random}) random(0, 16, cbr(16), cbr(20))

def({sw_reg_passenger_random1}) random(0, 16, cbr(0), cbr(0), cbr(0), cbr(4))
def({sw_reg_passenger_random2}) random(0, 16, cbr(0), cbr(0), cbr(4), cbr(4))
def({sw_reg_passenger_random3}) random(0, 16, cbr(0), cbr(4), cbr(4), cbr(8))
def({sw_reg_passenger_random4}) random(0, 16, cbr(4), cbr(4), cbr(8), cbr(8))
def({sw_reg_passenger_random5}) random(0, 16, cbr(4), cbr(8), cbr(8), cbr(12))
def({sw_reg_passenger_random6}) random(0, 16, cbr(8), cbr(8), cbr(12), cbr(12))
def({sw_reg_passenger_random7}) random(0, 16, cbr(8), cbr(12), cbr(12), ref(sw_reg_passenger5_random))
def({sw_reg_passenger_random8}) random(0, 16, cbr(12), cbr(12), ref(sw_reg_passenger5_random), ref(sw_reg_passenger5_random))

def({sw_reg_passenger}) cargowaiting(PASS,
	cbr(0) if(0 .. 31)
	ref(sw_reg_passenger_random1) if(32 .. 63)
	ref(sw_reg_passenger_random2) if(64 .. 127)
	ref(sw_reg_passenger_random3) if(128 .. 256)
	ref(sw_reg_passenger_random4) if(257 .. 511)
	ref(sw_reg_passenger_random5) if(512 .. 767)
	ref(sw_reg_passenger_random6) if(768 .. 1023)
	ref(sw_reg_passenger_random7) if(1024 .. 2047)
	ref(sw_reg_passenger_random8) if(2048 .. 4095)
	ref(sw_reg_passenger5_random) else
)

def({sw_set_reg_passenger}) 
setregisters(REGISTER_PASSENGER_OFFSET, 
	{
	sub(sw_reg_passenger), 
	sub(sw_reg_platform), 
	sub(sw_reg_passenger_skip), 
	sub(sw_reg_roof),
	sub(sw_reg_platform_shadow),
	sub(sw_reg_crossing),
	sub(sw_reg_crossing_shadow)
	}, 
	ref(sw_set_reg_overpass)
)

// re-randomisation
def({sw_reg_passenger_rerandom}) random(NEWCARGO + ARRIVE + LEAVE + LOADING, 16, 
	ref(sw_set_reg_passenger), 
	ref(sw_set_reg_passenger), 
	ref(sw_set_reg_passenger), 
	ref(sw_set_reg_passenger), 
	ref(sw_set_reg_passenger), 
	ref(sw_set_reg_passenger), 
	ref(sw_set_reg_passenger), 
	ref(sw_set_reg_passenger)
)

def({sw_ground_nontrack_register_sub}) subroutine(sw_terrain_snow,
	cbr(spr_ground_nontrack_snow - spr_ground_nontrack) if(1)
	cbr(0) else
)
def({sw_ground_nontrack_register}) setregisters(REGISTER_GROUND_NONTRACK_OFFSET, sub(sw_ground_nontrack_register_sub), ref(sw_reg_passenger_rerandom))
def({sw_set_registers}) setregisters(REGISTER_NONE, {0}, ref(sw_ground_nontrack_register))

def({sw_platform_layout}) calculate({subroutine(sw_terrain_snow) * 2},
	cbfail() else
)

def({sw_platform_cb}) callback(
	ref(sw_platform_layout) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

include({sprites/layouts/layout.nfx})
deflabel(LABEL_HIGHPLATFORM_MODE)

// crossings (high)

forloop(X, {
definestation(X, "",
	class(CLASS_CROSSINGS)
	callbacks({CB_LAYOUT, CB_AFRAME})
	setcargotriggers({PASS})
	anim_triggers({BUILT})
)}, CROSSING_HIGH_START .. CROSSING_HIGH_END)

layout(HP_A_CR, LAYOUT_HP_A_CR)
layout(HP_B_CR, LAYOUT_HP_B_CR)
layout(HP_C_CR, LAYOUT_HP_C_CR)

layout(HP_A_CR_RF_A, LAYOUT_HP_A_CR_RF_A)
layout(HP_B_CR_RF_A, LAYOUT_HP_B_CR_RF_A)
layout(HP_C_CR_RF_A, LAYOUT_HP_C_CR_RF_A)

layout(HP_A_CR_RF_B, LAYOUT_HP_A_CR_RF_B)
layout(HP_B_CR_RF_B, LAYOUT_HP_B_CR_RF_B)
layout(HP_C_CR_RF_B, LAYOUT_HP_C_CR_RF_B)

def({sw_crossing_pos_sub2}) plt_posrev(
	cbr(2) if(0)
	cbr(0) else
)

def({sw_crossing_pos_sub1}) plt_pos(
	cbr(4) if(0)
	ref(sw_crossing_pos_sub2) else
)

def({sw_crossing_pos}) plt_length(
	cbr(0) if(1)
	ref(sw_crossing_pos_sub1) else
)

def({sw_crossing_layout}) calculate({subroutine(sw_terrain_snow) * 6 + subroutine(sw_crossing_pos)},
	cbfail() else
)

def({sw_crossing_cb}) callback(
	ref(sw_crossing_layout) if(CB_LAYOUT)
	ref(sw_crossing_pos) if(CB_ACONTROL, CB_AFRAME)
	ref(sw_set_registers) else
)

forloop(X, {makestation(X, default(ref(sw_crossing_cb)))}, CROSSING_HIGH_START .. CROSSING_HIGH_END)

// psd

forloop(X, {
definestation(X, "",
	class(CLASS_PSD)
	callbacks({CB_LAYOUT, CB_AFRAME})
	anim_info({7, NOLOOP})
	anim_speed(3)
	setcargotriggers({PASS})
	anim_triggers({ARRIVE, LEAVE})
	include_lengths({1,2,3})
)}, PSD_OVERPASS_START .. PSD_OVERPASS_END)

layout(PSD_OVERPASS_HP_A, LAYOUT_PSD_OVERPASS_HP_A)
layout(PSD_OVERPASS_HP_B, LAYOUT_PSD_OVERPASS_HP_B)
layout(PSD_OVERPASS_HP_C, LAYOUT_PSD_OVERPASS_HP_C)
layout(PSD_OVERPASS_HP_A_RF_A, LAYOUT_PSD_OVERPASS_HP_A_RF_A)
layout(PSD_OVERPASS_HP_B_RF_A, LAYOUT_PSD_OVERPASS_HP_B_RF_A)
layout(PSD_OVERPASS_HP_C_RF_A, LAYOUT_PSD_OVERPASS_HP_C_RF_A)
layout(PSD_OVERPASS_HP_A_RF_B, LAYOUT_PSD_OVERPASS_HP_A_RF_B)
layout(PSD_OVERPASS_HP_B_RF_B, LAYOUT_PSD_OVERPASS_HP_B_RF_B)
layout(PSD_OVERPASS_HP_C_RF_B, LAYOUT_PSD_OVERPASS_HP_C_RF_B)

def({sw_psd_overpass_platform_layout_sub2}) plt_posrev(
	self(
		cbr(2) if(0)
		cbr(4) else
	)
)

def({sw_psd_overpass_platform_layout}) plt_midpos(
	self(
		cbr(0) if(0)
		ref(sw_psd_overpass_platform_layout_sub2) else
	)
)

def({sw_psd_overpass_platform_snow}) calculate({subroutine(sw_terrain_snow) * 6 + subroutine(sw_psd_overpass_platform_layout)},
	cbfail() else
)

def({sw_psd_glass_offset_anim}) anim_frame(
	cbr(2) if(1, 5)
	cbr(4) if(2 .. 4)
	cbr(0) else
)

// check psd start/end, platform A
def({sw_psd_start_pA_kws2}) tinfo_statid(pos(-1, 0), shiftmask(0,0xFF),
	cbr(1) if(PSD_PLATFORM_A_PART2)
	cbr(1) if(PSD_PLATFORM_C_PART2)
	cbr(0) else
)

def({sw_psd_start_pA_kws1}) tinfo_statid(pos(-1, 0), shiftmask(0,0xFF),
	cbr(1) if(PSD_PLATFORM_A_PART1)
	cbr(1) if(PSD_PLATFORM_C_PART1)
	cbr(0) else
)

def({sw_psd_start_pA}) tinfo_grfid(pos(-1, 0),
	cbr(0) if(0)
	ref(sw_psd_start_pA_kws1) if(VAR_GRFID_KWS_PART1)
	ref(sw_psd_start_pA_kws2) if(VAR_GRFID_KWS_PART2)
	cbr(0) else
)

def({sw_psd_end_pA_kws2}) tinfo_statid(pos(1, 0), shiftmask(0,0xFF),
	cbr(2) if(PSD_PLATFORM_A_PART2)
	cbr(2) if(PSD_PLATFORM_C_PART2)
	cbr(0) else
)

def({sw_psd_end_pA_kws1}) tinfo_statid(pos(1, 0), shiftmask(0,0xFF),
	cbr(2) if(PSD_PLATFORM_A_PART1)
	cbr(2) if(PSD_PLATFORM_C_PART1)
	cbr(0) else
)

def({sw_psd_end_pA}) tinfo_grfid(pos(1, 0),
	cbr(0) if(0)
	ref(sw_psd_end_pA_kws1) if(VAR_GRFID_KWS_PART1)
	ref(sw_psd_end_pA_kws2) if(VAR_GRFID_KWS_PART2)
	cbr(0) else
)

def({sw_psd_startend_pA}) calculate({subroutine(sw_psd_start_pA) + subroutine(sw_psd_end_pA)},
	cbfail() else
)

def({sw_psd_offset_pA}) subroutine(sw_psd_startend_pA,
	cbr(4) if(2)
	cbr(8) if(1)
	cbr(0) else
)

def({sw_psd_glass_startend_pA}) subroutine(sw_psd_startend_pA,
	cbr(1) if(2)
	cbr(3) if(1)
	cbr(0) else
)

def({sw_psd_glass_offset_pA}) calculate({subroutine(sw_psd_glass_startend_pA) * 6 + subroutine(sw_psd_glass_offset_anim)},
	cbfail() else
)

// check psd start/end, platform B
def({sw_psd_start_pB_kws2}) tinfo_statid(pos(-1, 0), shiftmask(0,0xFF),
	cbr(1) if(PSD_PLATFORM_B_PART2)
	cbr(1) if(PSD_PLATFORM_C_PART2)
	cbr(0) else
)

def({sw_psd_start_pB_kws1}) tinfo_statid(pos(-1, 0), shiftmask(0,0xFF),
	cbr(1) if(PSD_PLATFORM_B_PART1)
	cbr(1) if(PSD_PLATFORM_C_PART1)
	cbr(0) else
)

def({sw_psd_start_pB}) tinfo_grfid(pos(-1, 0),
	cbr(0) if(0)
	ref(sw_psd_start_pB_kws1) if(VAR_GRFID_KWS_PART1)
	ref(sw_psd_start_pB_kws2) if(VAR_GRFID_KWS_PART2)
	cbr(0) else
)

def({sw_psd_end_pB_kws2}) tinfo_statid(pos(1, 0), shiftmask(0,0xFF),
	cbr(2) if(PSD_PLATFORM_B_PART2)
	cbr(2) if(PSD_PLATFORM_C_PART2)
	cbr(0) else
)

def({sw_psd_end_pB_kws1}) tinfo_statid(pos(1, 0), shiftmask(0,0xFF),
	cbr(2) if(PSD_PLATFORM_B_PART1)
	cbr(2) if(PSD_PLATFORM_C_PART1)
	cbr(0) else
)

def({sw_psd_end_pB}) tinfo_grfid(pos(1, 0),
	cbr(0) if(0)
	ref(sw_psd_end_pB_kws1) if(VAR_GRFID_KWS_PART1)
	ref(sw_psd_end_pB_kws2) if(VAR_GRFID_KWS_PART2)
	cbr(0) else
)

def({sw_psd_startend_pB}) calculate({subroutine(sw_psd_start_pB) + subroutine(sw_psd_end_pB)},
	cbfail() else
)

def({sw_psd_offset_pB}) subroutine(sw_psd_startend_pB,
	cbr(4) if(2)
	cbr(8) if(1)
	cbr(0) else
)

def({sw_psd_glass_startend_pB}) subroutine(sw_psd_startend_pB,
	cbr(2) if(2)
	cbr(4) if(1)
	cbr(0) else
)

def({sw_psd_glass_offset_pB}) calculate({subroutine(sw_psd_glass_startend_pB) * 6 + subroutine(sw_psd_glass_offset_anim)},
	cbfail() else
)

def({sw_set_reg_psd}) setregisters(REGISTER_PSD_GLASS_OFFSET, {sub(sw_psd_glass_offset_pA), sub(sw_psd_glass_offset_pB), sub(sw_psd_offset_pA), sub(sw_psd_offset_pB)}, ref(sw_set_registers))

skipif(1, getowngrfparameter(PARAM_FLAGS), BITCLR, PARAM_FLAGS_PSDSFX)
def({sw_psd_animframe}) anim_frame(
	animframe(A_STOP) if(3)
	animframe(A_NEXT, _S_snd_psd_open) if(1)
	animframe(A_NEXT, _S_snd_psd_close) if(4)
	animframe(A_NEXT) else
)
skipif(1, getowngrfparameter(PARAM_FLAGS), BITSET, PARAM_FLAGS_PSDSFX)
def({sw_psd_animframe}) anim_frame(
	animframe(A_STOP) if(3)
	animframe(A_NEXT) else
)

def({sw_psd_animctrl_leave}) anim_frame(
	animcontrol(6) if(0)
	animcontrol(5) if(1)
	animcontrol(4) else
)

def({sw_psd_animctrl}) anim_trigger(
	animcontrol(1) if(ARRIVE)
	ref(sw_psd_animctrl_leave) if(LEAVE)
	animcontrol(A_NOP) else
)

def({sw_psd_overpass_cb}) callback(
	ref(sw_psd_overpass_platform_snow) if(CB_LAYOUT)
	ref(sw_psd_animctrl) if(CB_ACONTROL)
	ref(sw_psd_animframe) if(CB_AFRAME)
	ref(sw_set_reg_psd) else
)

def({sw_psd_overpass_menu_cb}) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_set_reg_psd) else
)

forloop(X, {makestation(X, link(ref(sw_psd_overpass_menu_cb), MENU) default(ref(sw_psd_overpass_cb)))}, PSD_OVERPASS_START .. PSD_OVERPASS_END)


forloop(X, {
definestation(X, "",
	class(CLASS_PSD)
	callbacks({CB_AFRAME})
	anim_info({7, NOLOOP})
	anim_speed(3)
	setcargotriggers({PASS})
	anim_triggers({ARRIVE, LEAVE})
)}, PSD_MODULAR_START .. PSD_MODULAR_END)

layout(PSD_MODULAR_LOW_HP_A, LAYOUT_PSD_MODULAR_LOW_HP_A)
layout(PSD_MODULAR_LOW_HP_B, LAYOUT_PSD_MODULAR_LOW_HP_B)
layout(PSD_MODULAR_LOW_HP_C, LAYOUT_PSD_MODULAR_LOW_HP_C)
layout(PSD_MODULAR_HIGH_HP_A, LAYOUT_PSD_MODULAR_HIGH_HP_A)
layout(PSD_MODULAR_HIGH_HP_B, LAYOUT_PSD_MODULAR_HIGH_HP_B)
layout(PSD_MODULAR_HIGH_HP_C, LAYOUT_PSD_MODULAR_HIGH_HP_C)

def({sw_psd_building_cb}) callback(
	ref(sw_psd_animctrl) if(CB_ACONTROL)
	ref(sw_psd_animframe) if(CB_AFRAME)
	ref(sw_set_reg_psd) else
)

forloop(X, {makestation(X, link(ref(sw_set_reg_psd), MENU) default(ref(sw_psd_building_cb)))}, PSD_MODULAR_START .. PSD_MODULAR_END)


forloop(X, {
definestation(X, "",
	class(CLASS_PSD)
	callbacks({CB_LAYOUT, CB_AFRAME})
	anim_info({7, NOLOOP})
	anim_speed(3)
	anim_triggers({ARRIVE, LEAVE})
)}, PSD_UNDERPASS_START .. PSD_UNDERPASS_END)

layout(PSD_UNDERPASS_HP_A_RF_A, LAYOUT_PSD_UNDERPASS_HP_A_RF_A)
layout(PSD_UNDERPASS_HP_B_RF_A, LAYOUT_PSD_UNDERPASS_HP_B_RF_A)
layout(PSD_UNDERPASS_HP_C_RF_A, LAYOUT_PSD_UNDERPASS_HP_C_RF_A)
layout(PSD_UNDERPASS_HP_A_RF_B, LAYOUT_PSD_UNDERPASS_HP_A_RF_B)
layout(PSD_UNDERPASS_HP_B_RF_B, LAYOUT_PSD_UNDERPASS_HP_B_RF_B)
layout(PSD_UNDERPASS_HP_C_RF_B, LAYOUT_PSD_UNDERPASS_HP_C_RF_B)

def({sw_psd_underpass_cb}) callback(
	ref(sw_platform_layout) if(CB_LAYOUT)
	ref(sw_psd_animctrl) if(CB_ACONTROL)
	ref(sw_psd_animframe) if(CB_AFRAME)
	ref(sw_set_reg_psd) else
)

def({sw_psd_underpass_menu_cb}) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_set_reg_psd) else
)

forloop(X, {makestation(X, link(ref(sw_psd_underpass_menu_cb), MENU) default(ref(sw_psd_underpass_cb)))}, PSD_UNDERPASS_START .. PSD_UNDERPASS_END)

// buffers

forloop(X, {
definestation(X, "",
	class(CLASS_BUFFERS)
	callbacks({CB_LAYOUT})
	nontrack(TTD_ALLTILES)
	setcargotriggers({PASS})
)}, PLATFORM_BUFFER_START .. PLATFORM_BUFFER_END)

definestation(BUFFER_TRACK, "",
	class(CLASS_BUFFERS)
	callbacks({CB_LAYOUT})
	nontrack(TTD_ALLTILES)
	setcargotriggers({PASS})
)

layout(BUFFER_HP_A, LAYOUT_BUFFER_HP_A)
layout(BUFFER_HP_B, LAYOUT_BUFFER_HP_B)
layout(BUFFER_HP_C, LAYOUT_BUFFER_HP_C)

layout(BUFFER_HP_A_RF_A, LAYOUT_BUFFER_HP_A_RF_A)
layout(BUFFER_HP_B_RF_A, LAYOUT_BUFFER_HP_B_RF_A)
layout(BUFFER_HP_C_RF_A, LAYOUT_BUFFER_HP_C_RF_A)

layout(BUFFER_HP_A_RF_B, LAYOUT_BUFFER_HP_A_RF_B)
layout(BUFFER_HP_B_RF_B, LAYOUT_BUFFER_HP_B_RF_B)
layout(BUFFER_HP_C_RF_B, LAYOUT_BUFFER_HP_C_RF_B)

layout(BUFFER_LP_A, LAYOUT_BUFFER_LP_A)
layout(BUFFER_LP_B, LAYOUT_BUFFER_LP_B)
layout(BUFFER_LP_C, LAYOUT_BUFFER_LP_C)

layout(BUFFER_LP_A_RF_A, LAYOUT_BUFFER_LP_A_RF_A)
layout(BUFFER_LP_B_RF_A, LAYOUT_BUFFER_LP_B_RF_A)
layout(BUFFER_LP_C_RF_A, LAYOUT_BUFFER_LP_C_RF_A)

layout(BUFFER_LP_A_RF_B, LAYOUT_BUFFER_LP_A_RF_B)
layout(BUFFER_LP_B_RF_B, LAYOUT_BUFFER_LP_B_RF_B)
layout(BUFFER_LP_C_RF_B, LAYOUT_BUFFER_LP_C_RF_B)

layout(BUFFER_LAP_A, LAYOUT_BUFFER_LAP_A)
layout(BUFFER_LAP_B, LAYOUT_BUFFER_LAP_B)
layout(BUFFER_LAP_C, LAYOUT_BUFFER_LAP_C)

layout(BUFFER_LAP_A_RF_A, LAYOUT_BUFFER_LAP_A_RF_A)
layout(BUFFER_LAP_B_RF_A, LAYOUT_BUFFER_LAP_B_RF_A)
layout(BUFFER_LAP_C_RF_A, LAYOUT_BUFFER_LAP_C_RF_A)

layout(BUFFER_LAP_A_RF_B, LAYOUT_BUFFER_LAP_A_RF_B)
layout(BUFFER_LAP_B_RF_B, LAYOUT_BUFFER_LAP_B_RF_B)
layout(BUFFER_LAP_C_RF_B, LAYOUT_BUFFER_LAP_C_RF_B)

layout(BUFFER_TRACK, LAYOUT_BUFFER_TRACK)

def({sw_buffer_end_offset}) subroutine(sw_terrain_snow,
	cbr(spr_platform_buffer_end_snow - spr_platform_buffer_end) if(1)
	cbr(0) else
)

def({sw_buffer_shadow_offset}) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_SHADOW, 0x1),
	cbr(spr_platform_buffer_s - spr_platform_buffer) if(1)
	cbr(0) else
)

def({sw_buffer_offset}) subroutine(sw_terrain_snow,
	cbr(spr_platform_buffer_snow - spr_platform_buffer) if(1)
	cbr(0) else
)

def({sw_set_reg_buffer}) setregisters(REGISTER_BUFFER_OFFSET, {sub(sw_buffer_offset), sub(sw_buffer_shadow_offset), sub(sw_buffer_end_offset)}, ref(sw_set_registers))

def({sw_buffer_layout_sub2_4}) tinfo_statid(pos(0, -1), shiftmask(0, 0xFF),
	cbr(0) if(BUFFER_PLATFORM_A_PART2)
	cbr(0) if(BUFFER_PLATFORM_C_PART2)
	cbr(2) else
)

def({sw_buffer_layout_sub2_3}) tinfo_statid(pos(0, -1), shiftmask(0, 0x100),
	ref(sw_buffer_layout_sub2_4) if(0x100)
	cbr(2) else
)

def({sw_buffer_layout_sub2_2}) tinfo_statid(pos(0, 1), shiftmask(0, 0xFF),
	cbr(0) if(BUFFER_PLATFORM_B_PART2)
	cbr(0) if(BUFFER_PLATFORM_C_PART2)
	cbr(2) else
)

def({sw_buffer_layout_sub2_1}) tinfo_statid(pos(0, 1), shiftmask(0, 0x100),
	ref(sw_buffer_layout_sub2_2) if(0x100)
	cbr(2) else
)

def({sw_buffer_layout_sub2}) tinfo_statid(pos(0, 0), shiftmask(0, 0xFF),
	ref(sw_buffer_layout_sub2_1) if(BUFFER_PLATFORM_A_PART2)
	ref(sw_buffer_layout_sub2_3) if(BUFFER_PLATFORM_B_PART2)
	cbr(0) else
)

def({sw_buffer_layout_sub1}) tinfo_trackconnect(shiftmask(0, 0x02),
	cbr(0) if(0)
	cbr(2) else
)

def({sw_buffer_layout}) calculate({subroutine(sw_terrain_snow) * 4 + subroutine(sw_buffer_layout_sub2) * 2 + subroutine(sw_buffer_layout_sub1)},
	cbfail() else
)

def({sw_buffer_cb}) callback(
	ref(sw_buffer_layout) if(CB_LAYOUT)
	ref(sw_set_reg_buffer) else
)

def({sw_buffer_track_layout}) calculate({subroutine(sw_terrain_snow) * 4 + subroutine(sw_buffer_layout_sub1)},
	cbfail() else
)

def({sw_buffer_track_cb}) callback(
	ref(sw_buffer_track_layout) if(CB_LAYOUT)
	ref(sw_set_reg_buffer) else
)

forloop(X, {makestation(X, default(ref(sw_buffer_cb)))}, BUFFER_HP_A .. BUFFER_HP_C_RF_B)

skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, default(ref(sw_buffer_cb)))}, BUFFER_LP_A .. BUFFER_LAP_C_RF_B)
placelabel(LABEL_HIGHPLATFORM_MODE)

makestation(BUFFER_TRACK, default(ref(sw_buffer_track_cb)))

// Seoul Stn.
// Seoul Stn. (old)

definestation(SEOUL_STATION_OLD, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT})
	nontrack(TTD_ALLTILES)
	nowires(TTD_ALLTILES)
	include_lengths({4})
	include_widths({2})
)

layout(SEOUL_STATION_OLD, LAYOUT_SEOUL_STATION_OLD)


def({sw_seoul_old_layout_road1}) plt_axis(
	cbr(8) if(0)
	cbr(12) else
)

def({sw_seoul_old_layout}) plt_index(
	self(
		cbr(0) if(nibble(3,0))
		cbr(2) if(nibble(2,0))
		cbr(4) if(nibble(1,0))
		cbr(6) if(nibble(0,0))
		ref(sw_seoul_old_layout_road1) if(nibble(3,1))
		cbr(10) if(nibble(0,1))
		cbr(14) if(nibble(1,1), nibble(2,1))
		cbr(16) else
	)
)

def({sw_seoul_old_snow}) subroutine(sw_terrain_snow,
	cbr(spr_seoul_old_snow - spr_seoul_old) if(1)
	cbr(0) else
)

def({sw_set_reg_seoul_old}) setregisters(REGISTER_SEOUL_OLD_SNOW_OFFSET, sub(sw_seoul_old_snow), ref(sw_set_registers))

def({sw_seoul_old_cb}) callback(
	ref(sw_seoul_old_layout) if(CB_LAYOUT)
	ref(sw_set_reg_seoul_old) else
)

def({sw_seoul_old_cb_purchase}) callback(
	reftile(tile_seoul_old_purchase) if(CB_LAYOUT)
	ref(sw_set_reg_seoul_old) else
)

makestation(SEOUL_STATION_OLD, link(ref(sw_seoul_old_cb_purchase), MENU) default(ref(sw_seoul_old_cb)))

// Seoul Stn. (new)

definestation(SEOUL_STATION_BUILDING, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT})
	nontrack(TTD_ALLTILES)
	nowires(TTD_ALLTILES)
	setcargotriggers({PASS})
	include_lengths({6})
	include_widths({3})
)

layout(SEOUL_STATION_BUILDING, LAYOUT_SEOUL_STATION_BUILDING)


def({sw_seoul_building_layout}) plt_index(
	self(
		cbr(0) if(nibble(5,0))
		cbr(2) if(nibble(4,1))
		cbr(4) if(nibble(3,1))
		cbr(6) if(nibble(2,1))
		cbr(8) if(nibble(1,1))
		cbr(10) if(nibble(0,1))
		cbr(12) if(nibble(5,2))
		cbr(14) if(nibble(4,2))
		cbr(16) if(nibble(3,2))
		cbr(18) if(nibble(2,2))
		cbr(20) if(nibble(1,2))
		cbr(20) if(nibble(0,2))
		cbr(22) else
	)
)

def({sw_seoul_building_cb}) callback(
	ref(sw_seoul_building_layout) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

def({sw_seoul_building_cb_purchase}) callback(
	reftile(tile_seoul_purchase) if(CB_LAYOUT)
	ref(sw_set_registers) else
)


def({sw_seoul_cars_cargo}) cargowaiting(PASS,
	cbr(16) if(17 .. 256)
	cbr(8) if(257 .. 2048)
	cbr(0) else
)
def({sw_seoul_cars_random}) random(ARRIVE, 16, cbr(0), cbr(2), cbr(4), cbr(6))
def({sw_seoul_cars_offset}) calculate({subroutine(sw_seoul_cars_random) + subroutine(sw_seoul_cars_cargo)},
	cbfail() else
)

def({sw_set_reg_seoul_cars}) setregisters(REGISTER_CARS_OFFSET, sub(sw_seoul_cars_offset), ref(sw_set_registers))

// Seoul Stn. (new) pt.1

forloop(X, {
definestation(X, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT})
	include_lengths({7})
	setcargotriggers({PASS})
	nowires(TTD_ALLTILES)
)}, SEOUL_STATION_PART1_HP_A .. SEOUL_STATION_PART1_TRACK)

layout(SEOUL_STATION_PART1_HP_A, LAYOUT_SEOUL_STATION_PART1_HP_A)
layout(SEOUL_STATION_PART1_HP_B, LAYOUT_SEOUL_STATION_PART1_HP_B)
layout(SEOUL_STATION_PART1_LP_A, LAYOUT_SEOUL_STATION_PART1_LP_A)
layout(SEOUL_STATION_PART1_LP_B, LAYOUT_SEOUL_STATION_PART1_LP_B)
layout(SEOUL_STATION_PART1_TRACK, LAYOUT_SEOUL_STATION_PART1_TRACK)

def({sw_seoul_part1_layout2}) plt_pos(
	self(
		cbr(0) if(5)
		cbr(2) if(4)
		cbr(4) if(3)
		cbr(6) if(2)
		cbr(8) if(1)
		cbr(10) if(0)
		cbr(12) if(6)
		cbr(0) else
	)
)

def({sw_seoul_part1_layout}) plt_size(
	self(
		cbr(12) if(nibble(1,1))
		ref(sw_seoul_part1_layout2) else
	)
)

def({sw_seoul_part1_cb}) callback(
	ref(sw_seoul_part1_layout) if(CB_LAYOUT)
	ref(sw_set_reg_seoul_cars) else
)

// Seoul Stn. (new) pt.2

definestation(SEOUL_STATION_PART2, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT})
	nontrack({2,3})
	nowires({2,3})
	setcargotriggers({PASS})
	include_lengths({2})
)

layout(SEOUL_STATION_PART2, LAYOUT_SEOUL_STATION_PART2)

def({sw_seoul_part2_1_layout}) plt_pos(
	self(
		cbr(2) if(0)
		cbr(0) else
	)
)

def({sw_seoul_part2_2_layout}) plt_pos(
	self(
		cbr(6) if(0)
		cbr(4) else
	)
)

def({sw_seoul_part2_layout}) plt_numrev(
	self(
		ref(sw_seoul_part2_2_layout) if(0)
		ref(sw_seoul_part2_1_layout) else
	)
)

def({sw_seoul_part2_tiletype}) test_numrev(
	cbr(2) if(0)
	cbr(0) else
)

def({sw_seoul_part2_cb}) callback(
	ref(sw_seoul_part2_layout) if(CB_LAYOUT)
	ref(sw_seoul_part2_tiletype) if(CB_TILETYPE)
	ref(sw_set_reg_seoul_cars) else
)

def({sw_seoul_part2_cb_purchase}) callback(
	reftile(tile_seoul_part2_purchase) if(CB_LAYOUT)
	ref(sw_set_reg_seoul_cars) else
)

// Seoul Stn. (new) pt.3

forloop(X, {
definestation(X, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT, CB_AFRAME})
	anim_triggers({BUILT})
	setcargotriggers({PASS})
	include_widths({1})
)}, SEOUL_STATION_PART3A_HP_A .. SEOUL_STATION_PART3B_TRACK)

layout(SEOUL_STATION_PART3A_HP_A, LAYOUT_SEOUL_STATION_PART3A_HP_A)
layout(SEOUL_STATION_PART3A_HP_B, LAYOUT_SEOUL_STATION_PART3A_HP_B)
layout(SEOUL_STATION_PART3A_LP_A, LAYOUT_SEOUL_STATION_PART3A_LP_A)
layout(SEOUL_STATION_PART3A_LP_B, LAYOUT_SEOUL_STATION_PART3A_LP_B)
layout(SEOUL_STATION_PART3A_TRACK, LAYOUT_SEOUL_STATION_PART3A_TRACK)

layout(SEOUL_STATION_PART3B_HP_A, LAYOUT_SEOUL_STATION_PART3B_HP_A)
layout(SEOUL_STATION_PART3B_HP_B, LAYOUT_SEOUL_STATION_PART3B_HP_B)
layout(SEOUL_STATION_PART3B_LP_A, LAYOUT_SEOUL_STATION_PART3B_LP_A)
layout(SEOUL_STATION_PART3B_LP_B, LAYOUT_SEOUL_STATION_PART3B_LP_B)
layout(SEOUL_STATION_PART3B_TRACK, LAYOUT_SEOUL_STATION_PART3B_TRACK)

def({sw_seoul_part3_cb}) callback(
	cbr(0x80) if(CB_ACONTROL, CB_AFRAME)
	ref(sw_set_registers) else
)

forloop(X, {
definestation(X, "",
	class(CLASS_BUILDINGS)
	setcargotriggers({PASS})
)}, SEOUL_STATION_PART3C_HP_A .. SEOUL_STATION_PART3C_TRACK)

layout(SEOUL_STATION_PART3C_HP_A, LAYOUT_SEOUL_STATION_PART3C_HP_A)
layout(SEOUL_STATION_PART3C_HP_B, LAYOUT_SEOUL_STATION_PART3C_HP_B)
layout(SEOUL_STATION_PART3C_LP_A, LAYOUT_SEOUL_STATION_PART3C_LP_A)
layout(SEOUL_STATION_PART3C_LP_B, LAYOUT_SEOUL_STATION_PART3C_LP_B)
layout(SEOUL_STATION_PART3C_TRACK, LAYOUT_SEOUL_STATION_PART3C_TRACK)


// Seoul Stn. (new) pt.4

definestation(SEOUL_STATION_PART4A, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT})
	nontrack(TTD_ALLTILES)
	nowires(TTD_ALLTILES)
	include_lengths({3})
	include_widths({1})
)

layout(SEOUL_STATION_PART4A, LAYOUT_SEOUL_STATION_PART4A)

def({sw_seoul_part4a_layout2}) plt_index(
	self(
		cbr(0) if(nibble(2,0))
		cbr(2) if(nibble(1,0))
		cbr(4) else
	)
)

def({sw_seoul_part4a_layout}) plt_size(
	self(
		ref(sw_seoul_part4a_layout2) if(nibble(3,1))
		cbr(4) else
	)
)

def({sw_seoul_part4a_cb}) callback(
	ref(sw_seoul_part4a_layout) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

def({sw_seoul_part4a_cb_purchase}) callback(
	reftile(tile_seoul_part4a_purchase) if(CB_LAYOUT)
	ref(sw_set_registers) else
)


definestation(SEOUL_STATION_PART4B, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT})
	nontrack(TTD_ALLTILES)
	nowires(TTD_ALLTILES)
	include_lengths({6})
	include_widths({2})
)

layout(SEOUL_STATION_PART4B, LAYOUT_SEOUL_STATION_PART4B)

def({sw_seoul_part4b_layout2}) plt_index(
	self(
		cbr(0) if(nibble(5,0))
		cbr(2) if(nibble(4,0))
		cbr(4) if(nibble(3,0))
		cbr(6) if(nibble(2,0))
		cbr(8) if(nibble(1,0))
		cbr(10) if(nibble(0,0))
		cbr(12) if(nibble(5,1))
		cbr(14) if(nibble(4,1))
		cbr(16) if(nibble(3,1))
		cbr(18) if(nibble(2,1))
		cbr(20) if(nibble(1,1))
		cbr(22) else
	)
)

def({sw_seoul_part4b_layout}) plt_size(
	self(
		ref(sw_seoul_part4b_layout2) if(nibble(6,2))
		cbr(24) else
	)
)

def({sw_seoul_part4b_cb}) callback(
	ref(sw_seoul_part4b_layout) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

def({sw_seoul_part4b_cb_purchase}) callback(
	reftile(tile_seoul_part4b_purchase) if(CB_LAYOUT)
	ref(sw_set_registers) else
)


makestation(SEOUL_STATION_BUILDING, link(ref(sw_seoul_building_cb_purchase), MENU) default(ref(sw_seoul_building_cb)))

forloop(X, {makestation(X, default(ref(sw_seoul_part1_cb)))}, SEOUL_STATION_PART1_HP_A .. SEOUL_STATION_PART1_HP_B)
skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, default(ref(sw_seoul_part1_cb)))}, SEOUL_STATION_PART1_LP_A .. SEOUL_STATION_PART1_LP_B)
placelabel(LABEL_HIGHPLATFORM_MODE)
makestation(SEOUL_STATION_PART1_TRACK, default(ref(sw_seoul_part1_cb)))

makestation(SEOUL_STATION_PART2, link(ref(sw_seoul_part2_cb_purchase), MENU) default(ref(sw_seoul_part2_cb)))

forloop(X, {makestation(X, default(ref(sw_seoul_part3_cb)))}, SEOUL_STATION_PART3A_HP_A .. SEOUL_STATION_PART3A_HP_B)
skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, default(ref(sw_seoul_part3_cb)))}, SEOUL_STATION_PART3A_LP_A .. SEOUL_STATION_PART3A_LP_B)
placelabel(LABEL_HIGHPLATFORM_MODE)
makestation(SEOUL_STATION_PART3A_TRACK, default(ref(sw_seoul_part3_cb)))

forloop(X, {makestation(X, default(ref(sw_seoul_part3_cb)))}, SEOUL_STATION_PART3B_HP_A .. SEOUL_STATION_PART3B_HP_B)
skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, default(ref(sw_seoul_part3_cb)))}, SEOUL_STATION_PART3B_LP_A .. SEOUL_STATION_PART3B_LP_B)
placelabel(LABEL_HIGHPLATFORM_MODE)
makestation(SEOUL_STATION_PART3B_TRACK, default(ref(sw_seoul_part3_cb)))

forloop(X, {makestation(X, default(ref(sw_set_registers)))}, SEOUL_STATION_PART3C_HP_A .. SEOUL_STATION_PART3C_HP_B)
skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, default(ref(sw_set_registers)))}, SEOUL_STATION_PART3C_LP_A .. SEOUL_STATION_PART3C_LP_B)
placelabel(LABEL_HIGHPLATFORM_MODE)
makestation(SEOUL_STATION_PART3C_TRACK, default(ref(sw_set_registers)))

makestation(SEOUL_STATION_PART4A, link(ref(sw_seoul_part4a_cb_purchase), MENU) default(ref(sw_seoul_part4a_cb)))
makestation(SEOUL_STATION_PART4B, link(ref(sw_seoul_part4b_cb_purchase), MENU) default(ref(sw_seoul_part4b_cb)))

// Gangneung Stn.

definestation(GANGNEUNG_HP, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT})
	nowires(TTD_ALLTILES)
	include_lengths({4})
	include_widths({4})
	setcargotriggers({PASS})
	tiletypelayout(
		tiletypes({{0,0,0,2},{0,0,0,2},{0,0,0,2},{0,0,0,2}})
	)
)

definestation(GANGNEUNG_LP, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT})
	nowires(TTD_ALLTILES)
	include_lengths({4})
	include_widths({4})
	setcargotriggers({PASS})
	tiletypelayout(
		tiletypes({{0,0,0,2},{0,0,0,2},{0,0,0,2},{0,0,0,2}})
	)
)

layout(GANGNEUNG_HP, LAYOUT_GANGNEUNG_HP)
layout(GANGNEUNG_LP, LAYOUT_GANGNEUNG_LP)

def({sw_gangneung_layout_road1}) plt_axis(
	cbr(24) if(0)
	cbr(26) else
)

def({sw_gangneung_layout_road2}) plt_axis(
	cbr(32) if(0)
	cbr(34) else
)

def({sw_gangneung_layout}) plt_index(
	self(
		cbr(0) if(nibble(2,0))
		cbr(2) if(nibble(1,0))
		cbr(4) if(nibble(0,0))
		cbr(6) if(nibble(2,1))
		cbr(8) if(nibble(1,1))
		cbr(10) if(nibble(0,1))
		cbr(12) if(nibble(2,2))
		cbr(14) if(nibble(1,2))
		cbr(16) if(nibble(0,2))
		cbr(18) if(nibble(2,3))
		cbr(20) if(nibble(1,3))
		cbr(22) if(nibble(0,3))
		ref(sw_gangneung_layout_road1) if(nibble(3,0))
		cbr(28) if(nibble(3,1))
		cbr(30) if(nibble(3,2))
		ref(sw_gangneung_layout_road2) else
	)
)

def({sw_gangneung_tiletype}) test_pos(
	cbr(2) if(0)
	cbr(0) else
)

def({sw_gangneung_cb}) callback(
	ref(sw_gangneung_layout) if(CB_LAYOUT)
	ref(sw_gangneung_tiletype) if(CB_TILETYPE)
	ref(sw_set_registers) else
)

def({sw_gangneung_cb_purchase}) callback(
	reftile(tile_gangneung_purchase) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

makestation(GANGNEUNG_HP, link(ref(sw_gangneung_cb_purchase), MENU) default(ref(sw_gangneung_cb)))
skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	makestation(GANGNEUNG_LP, link(ref(sw_gangneung_cb_purchase), MENU) default(ref(sw_gangneung_cb)))
placelabel(LABEL_HIGHPLATFORM_MODE)

// bridge_height

deflabel(LABEL_ALLOW_BRIDGE)
skipif(reflabel(LABEL_ALLOW_BRIDGE), getowngrfparameter(PARAM_FLAGS), BITCLR, PARAM_FLAGS_BRIDGE)

setproperties(HP_A_CR .. HP_C_CR, bridge_height({1,1,1,1}))
setproperties(HP_A_CR_RF_A .. HP_C_CR_RF_B, bridge_height({3,3,3,3}))

setproperties(PSD_OVERPASS_START .. PSD_OVERPASS_END, bridge_height({3,3,3,3}))
setproperties(PSD_UNDERPASS_START .. PSD_UNDERPASS_END, bridge_height({3,3,3,3}))

setproperties(BUFFER_HP_A .. BUFFER_HP_C, bridge_height({1,1,1,1}))
setproperties(BUFFER_LP_A .. BUFFER_LP_C, bridge_height({1,1,1,1}))
setproperties(BUFFER_LAP_A .. BUFFER_LAP_C, bridge_height({1,1,1,1}))

setproperties(BUFFER_HP_A_RF_A .. BUFFER_HP_C_RF_B, bridge_height({3,3,3,3}))
setproperties(BUFFER_LP_A_RF_A .. BUFFER_LP_C_RF_B, bridge_height({3,3,3,3}))
setproperties(BUFFER_LAP_A_RF_A .. BUFFER_LAP_C_RF_B, bridge_height({3,3,3,3}))

setproperties(GANGNEUNG_HP .. GANGNEUNG_LP, bridge_height({0,1,0,0}))

placelabel(LABEL_ALLOW_BRIDGE)
