setpath(sounds)
soundtable(
	defsnd(snd_psd_open, PSD_open.wav)
	defsnd(snd_psd_close, PSD_close.wav)
)

skipif(1, getowngrfparameter(PARAM_FLAGS), BITCLR, PARAM_FLAGS_SNOW)
def({sw_terrain_snow}) tinfo_terrain(
	cbr(1) if(SNOW)
	cbr(0) else
)

skipif(1, getowngrfparameter(PARAM_FLAGS), BITSET, PARAM_FLAGS_SNOW)
def({sw_terrain_snow}) tinfo_terrain(
	cbr(0) if(SNOW)
	cbr(0) else
)

def({sw_get_param_roof_colour}) calculate({getparameter(PARAM_ROOF_COLOUR,) AND 0xF + 0x307 - 1},
	cbfail() else
)

def({sw_reg_roof_colour}) getparameter(PARAM_ROOF_COLOUR, shiftmask(0, 0xF),
	cbr(0) if(0)
	ref(sw_get_param_roof_colour) else
)

def({sw_set_reg_roof_colour}) setregisters(REGISTER_ROOF_RECOLOUR, {sub(sw_reg_roof_colour)}, ref(sprset_default))

def({sw_reg_roof_overpass}) subroutine(sw_terrain_snow,
	cbr(spr_roofs_overpass_snow - spr_roofs_overpass) if(1)
	cbr(0) else
)

def({sw_reg_overpass_guide}) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_SHADOW, 0x1),
	cbr(spr_overpass_guide_s - spr_overpass_guide) if(1)
	cbr(0) else
)

def({sw_reg_overpass}) subroutine(sw_terrain_snow,
	cbr(spr_overpass_snow - spr_overpass) if(1)
	cbr(0) else
)
def({sw_set_reg_overpass}) setregisters(REGISTER_OVERPASS_OFFSET, {sub(sw_reg_overpass), sub(sw_reg_overpass_guide), sub(sw_reg_roof_overpass)}, ref(sw_set_reg_roof_colour))


def({sw_reg_crossing_shadow}) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_SHADOW, 0x1),
	cbr(spr_platform_cs - spr_platform_c) if(1)
	cbr(0) else
)

def({sw_reg_crossing}) subroutine(sw_terrain_snow,
	cbr(spr_platform_c_snow - spr_platform_c) if(1)
	cbr(0) else
)

def({sw_reg_platform_shadow}) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_SHADOW, 0x1),
	cbr(spr_platform_s - spr_platform) if(1)
	cbr(0) else
)

def({sw_reg_roof}) subroutine(sw_terrain_snow,
	cbr(spr_roofs_snow - spr_roofs) if(1)
	cbr(0) else
)

def({sw_reg_passenger_skip_random1}) random(NEWCARGO + ARRIVE + LEAVE, 16, cbr(0), cbr(0), cbr(0), cbr(0), cbr(0), cbr(0), cbr(0), cbr(1))
def({sw_reg_passenger_skip_random2}) random(NEWCARGO + ARRIVE + LEAVE, 16, cbr(0), cbr(0), cbr(0), cbr(1))
def({sw_reg_passenger_skip_random3}) random(NEWCARGO + ARRIVE + LEAVE, 16, cbr(0), cbr(0), cbr(1), cbr(1))
def({sw_reg_passenger_skip_random4}) random(NEWCARGO + ARRIVE + LEAVE, 16, cbr(0), cbr(1), cbr(1), cbr(1), cbr(1), cbr(1), cbr(1), cbr(1))

def({sw_reg_passenger_skip_sub}) cargowaiting(PASS,
	cbr(0) if(0)
	ref(sw_reg_passenger_skip_random1) if(1 .. 7)
	ref(sw_reg_passenger_skip_random2) if(8 .. 15)
	ref(sw_reg_passenger_skip_random3) if(16 .. 31)
	ref(sw_reg_passenger_skip_random4) if(32 .. 63)
	cbr(1) else
)

def({sw_reg_passenger_skip}) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_PASSENGER, 0x1),
	ref(sw_reg_passenger_skip_sub) if(1)
	cbr(0) else
)

def({sw_reg_platform}) subroutine(sw_terrain_snow,
	cbr(spr_platform_snow - spr_platform) if(1)
	cbr(0) else
)

def({sw_reg_passenger5_random}) random(NEWCARGO + ARRIVE + LEAVE + LOADING, 16, cbr(16), cbr(20))

def({sw_reg_passenger_random1}) random(NEWCARGO + ARRIVE + LEAVE + LOADING, 16, cbr(0), cbr(0), cbr(0), cbr(4))
def({sw_reg_passenger_random2}) random(NEWCARGO + ARRIVE + LEAVE + LOADING, 16, cbr(0), cbr(0), cbr(4), cbr(4))
def({sw_reg_passenger_random3}) random(NEWCARGO + ARRIVE + LEAVE + LOADING, 16, cbr(0), cbr(4), cbr(4), cbr(8))
def({sw_reg_passenger_random4}) random(NEWCARGO + ARRIVE + LEAVE + LOADING, 16, cbr(4), cbr(4), cbr(8), cbr(8))
def({sw_reg_passenger_random5}) random(NEWCARGO + ARRIVE + LEAVE + LOADING, 16, cbr(4), cbr(8), cbr(8), cbr(12))
def({sw_reg_passenger_random6}) random(NEWCARGO + ARRIVE + LEAVE + LOADING, 16, cbr(8), cbr(8), cbr(12), cbr(12))
def({sw_reg_passenger_random7}) random(NEWCARGO + ARRIVE + LEAVE + LOADING, 16, cbr(8), cbr(12), cbr(12), ref(sw_reg_passenger5_random))
def({sw_reg_passenger_random8}) random(NEWCARGO + ARRIVE + LEAVE + LOADING, 16, cbr(12), cbr(12), ref(sw_reg_passenger5_random), ref(sw_reg_passenger5_random))

def({sw_reg_passenger}) cargowaiting(PASS,
	cbr(0) if(0 .. 31)
	ref(sw_reg_passenger_random1) if(32 .. 63)
	ref(sw_reg_passenger_random2) if(64 .. 127)
	ref(sw_reg_passenger_random3) if(128 .. 256)
	ref(sw_reg_passenger_random4) if(257 .. 511)
	ref(sw_reg_passenger_random5) if(512 .. 767)
	ref(sw_reg_passenger_random6) if(768 .. 1023)
	ref(sw_reg_passenger_random7) if(1024 .. 2047)
	ref(sw_reg_passenger_random8) if(2048 .. 4095)
	ref(sw_reg_passenger5_random) else
)

def({sw_set_reg_passenger}) 
setregisters(REGISTER_PASSENGER_OFFSET, 
	{
	sub(sw_reg_passenger), 
	sub(sw_reg_platform), 
	sub(sw_reg_passenger_skip), 
	sub(sw_reg_roof),
	sub(sw_reg_platform_shadow),
	sub(sw_reg_crossing),
	sub(sw_reg_crossing_shadow)
	}, 
	ref(sw_set_reg_overpass)
)

// re-randomisation
def({sw_reg_passenger_rerandom}) random(NEWCARGO + ARRIVE + LEAVE + LOADING, 16, 
	ref(sw_set_reg_passenger), 
	ref(sw_set_reg_passenger), 
	ref(sw_set_reg_passenger), 
	ref(sw_set_reg_passenger), 
	ref(sw_set_reg_passenger), 
	ref(sw_set_reg_passenger), 
	ref(sw_set_reg_passenger), 
	ref(sw_set_reg_passenger)
)

def({sw_ground_nontrack_register_sub}) subroutine(sw_terrain_snow,
	cbr(spr_ground_nontrack_snow - spr_ground_nontrack) if(1)
	cbr(0) else
)
def({sw_ground_nontrack_register}) setregisters(REGISTER_GROUND_NONTRACK_OFFSET, sub(sw_ground_nontrack_register_sub), ref(sw_reg_passenger_rerandom))
def({sw_set_registers}) setregisters(REGISTER_NONE, {0}, ref(sw_ground_nontrack_register))

def({sw_platform_layout}) calculate({subroutine(sw_terrain_snow) * 2},
	cbfail() else
)

def({sw_platform_cb}) callback(
	ref(sw_platform_layout) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

// multi-platform detection
def({sw_platformA_check_opposite_part1}) tinfo_statid(pos(0, 1), shiftmask(0, 0xFF),
	cbr(1) if(HIGH_PLATFORM_A_PART1)
	cbr(1) if(HIGH_PLATFORM_C_PART1)
	cbr(2) if(LOW_PLATFORM_A_PART1)
	cbr(2) if(LOW_PLATFORM_C_PART1)
	cbr(3) if(LOW_ASPHALT_PLATFORM_A_PART1)
	cbr(3) if(LOW_ASPHALT_PLATFORM_C_PART1)
	cbr(0) else
)

def({sw_platformA_check_opposite_part2}) tinfo_statid(pos(0, 1), shiftmask(0, 0xFF),
	cbr(1) if(HIGH_PLATFORM_A_PART2)
	cbr(1) if(HIGH_PLATFORM_C_PART2)
	cbr(2) if(LOW_PLATFORM_A_PART2)
	cbr(2) if(LOW_PLATFORM_C_PART2)
	cbr(3) if(LOW_ASPHALT_PLATFORM_A_PART2)
	cbr(3) if(LOW_ASPHALT_PLATFORM_C_PART2)
	cbr(0) else
)

def({sw_platformA_check_opposite}) tinfo_grfid(pos(0, 1),
	ref(sw_platformA_check_opposite_part1) if(VAR_GRFID_KWS_PART1)
	ref(sw_platformA_check_opposite_part2) if(VAR_GRFID_KWS_PART2)
	cbr(0) else
)

def({sw_platformB_check_opposite_part1}) tinfo_statid(pos(0, -1), shiftmask(0, 0xFF),
	cbr(1) if(HIGH_PLATFORM_B_PART1)
	cbr(1) if(HIGH_PLATFORM_C_PART1)
	cbr(2) if(LOW_PLATFORM_B_PART1)
	cbr(2) if(LOW_PLATFORM_C_PART1)
	cbr(3) if(LOW_ASPHALT_PLATFORM_B_PART1)
	cbr(3) if(LOW_ASPHALT_PLATFORM_C_PART1)
	cbr(0) else
)

def({sw_platformB_check_opposite_part2}) tinfo_statid(pos(0, -1), shiftmask(0, 0xFF),
	cbr(1) if(HIGH_PLATFORM_B_PART2)
	cbr(1) if(HIGH_PLATFORM_C_PART2)
	cbr(2) if(LOW_PLATFORM_B_PART2)
	cbr(2) if(LOW_PLATFORM_C_PART2)
	cbr(3) if(LOW_ASPHALT_PLATFORM_B_PART2)
	cbr(3) if(LOW_ASPHALT_PLATFORM_C_PART2)
	cbr(0) else
)

def({sw_platformB_check_opposite}) tinfo_grfid(pos(0, -1),
	ref(sw_platformB_check_opposite_part1) if(VAR_GRFID_KWS_PART1)
	ref(sw_platformB_check_opposite_part2) if(VAR_GRFID_KWS_PART2)
	cbr(0) else
)

def({sw_platform_multi_check_part1}) tinfo_statid(pos(0, 0), shiftmask(0, 0xFF),
	cbr(1) if(HIGH_PLATFORM_A_PART1)
	cbr(2) if(HIGH_PLATFORM_B_PART1)
	cbr(1) if(LOW_PLATFORM_A_PART1)
	cbr(2) if(LOW_PLATFORM_B_PART1)
	cbr(1) if(LOW_ASPHALT_PLATFORM_A_PART1)
	cbr(2) if(LOW_ASPHALT_PLATFORM_B_PART1)
	cbr(0) else
)

def({sw_platform_multi_check_part2}) tinfo_statid(pos(0, 0), shiftmask(0, 0xFF),
	cbr(1) if(HIGH_PLATFORM_A_PART2)
	cbr(2) if(HIGH_PLATFORM_B_PART2)
	cbr(1) if(LOW_PLATFORM_A_PART2)
	cbr(2) if(LOW_PLATFORM_B_PART2)
	cbr(1) if(LOW_ASPHALT_PLATFORM_A_PART2)
	cbr(2) if(LOW_ASPHALT_PLATFORM_B_PART2)
	cbr(0) else
)

def({sw_platform_multi_check}) tinfo_grfid(pos(0, 0),
	ref(sw_platform_multi_check_part1) if(VAR_GRFID_KWS_PART1)
	ref(sw_platform_multi_check_part2) if(VAR_GRFID_KWS_PART2)
	cbr(0) else
)