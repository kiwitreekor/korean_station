setpath(sounds)
soundtable(
	defsnd(snd_psd_open, PSD_open.wav)
	defsnd(snd_psd_close, PSD_close.wav)
)

skipif(1, getowngrfparameter(PARAM_FLAGS), BITCLR, PARAM_FLAGS_SNOW)
def({sw_terrain_snow}) tinfo_terrain(
	cbr(1) if(SNOW)
	cbr(0) else
)

skipif(1, getowngrfparameter(PARAM_FLAGS), BITSET, PARAM_FLAGS_SNOW)
def({sw_terrain_snow}) tinfo_terrain(
	cbr(0) if(SNOW)
	cbr(0) else
)

def({sw_get_param_roof_colour}) calculate({getparameter(PARAM_ROOF_COLOUR,) AND 0xF + 0x307 - 1},
	cbfail() else
)

def({sw_reg_roof_colour}) getparameter(PARAM_ROOF_COLOUR, shiftmask(0, 0xF),
	cbr(0) if(0)
	ref(sw_get_param_roof_colour) else
)

def({sw_set_reg_roof_colour}) setregisters(REGISTER_ROOF_RECOLOUR, {sub(sw_reg_roof_colour)}, ref(sprset_default))

def({sw_reg_overpass_guide}) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_SHADOW, 0x1),
	cbr(spr_overpass_guide_s - spr_overpass_guide) if(1)
	cbr(0) else
)

def({sw_reg_overpass}) subroutine(sw_terrain_snow,
	cbr(spr_overpass_snow - spr_overpass) if(1)
	cbr(0) else
)
def({sw_set_reg_overpass}) setregisters(REGISTER_OVERPASS_OFFSET, {sub(sw_reg_overpass), sub(sw_reg_overpass_guide)}, ref(sw_set_reg_roof_colour))


def({sw_reg_crossing_shadow}) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_SHADOW, 0x1),
	cbr(spr_platform_cs - spr_platform_c) if(1)
	cbr(0) else
)

def({sw_reg_crossing}) subroutine(sw_terrain_snow,
	cbr(spr_platform_c_snow - spr_platform_c) if(1)
	cbr(0) else
)

def({sw_reg_platform_shadow}) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_SHADOW, 0x1),
	cbr(spr_platform_s - spr_platform) if(1)
	cbr(0) else
)

def({sw_reg_roof}) subroutine(sw_terrain_snow,
	cbr(spr_roofA_snow - spr_roofA) if(1)
	cbr(0) else
)

def({sw_reg_passenger_skip_random1}) random(NEWCARGO + ARRIVE + LEAVE, 16, cbr(0), cbr(0), cbr(0), cbr(0), cbr(0), cbr(0), cbr(0), cbr(1))
def({sw_reg_passenger_skip_random2}) random(NEWCARGO + ARRIVE + LEAVE, 16, cbr(0), cbr(0), cbr(0), cbr(1))
def({sw_reg_passenger_skip_random3}) random(NEWCARGO + ARRIVE + LEAVE, 16, cbr(0), cbr(0), cbr(1), cbr(1))
def({sw_reg_passenger_skip_random4}) random(NEWCARGO + ARRIVE + LEAVE, 16, cbr(0), cbr(1), cbr(1), cbr(1), cbr(1), cbr(1), cbr(1), cbr(1))

def({sw_reg_passenger_skip_sub}) cargowaiting(PASS,
	cbr(0) if(0)
	ref(sw_reg_passenger_skip_random1) if(1 .. 7)
	ref(sw_reg_passenger_skip_random2) if(8 .. 15)
	ref(sw_reg_passenger_skip_random3) if(16 .. 31)
	ref(sw_reg_passenger_skip_random4) if(32 .. 63)
	cbr(1) else
)

def({sw_reg_passenger_skip}) getparameter(PARAM_FLAGS, shiftmask(PARAM_FLAGS_PASSENGER, 0x1),
	ref(sw_reg_passenger_skip_sub) if(1)
	cbr(0) else
)

def({sw_reg_platform}) subroutine(sw_terrain_snow,
	cbr(spr_platform_snow - spr_platform) if(1)
	cbr(0) else
)

def({sw_reg_passenger5_random}) random(NEWCARGO + ARRIVE + LEAVE + LOADING, 16, cbr(16), cbr(20))

def({sw_reg_passenger_random1}) random(NEWCARGO + ARRIVE + LEAVE + LOADING, 16, cbr(0), cbr(0), cbr(0), cbr(4))
def({sw_reg_passenger_random2}) random(NEWCARGO + ARRIVE + LEAVE + LOADING, 16, cbr(0), cbr(0), cbr(4), cbr(4))
def({sw_reg_passenger_random3}) random(NEWCARGO + ARRIVE + LEAVE + LOADING, 16, cbr(0), cbr(4), cbr(4), cbr(8))
def({sw_reg_passenger_random4}) random(NEWCARGO + ARRIVE + LEAVE + LOADING, 16, cbr(4), cbr(4), cbr(8), cbr(8))
def({sw_reg_passenger_random5}) random(NEWCARGO + ARRIVE + LEAVE + LOADING, 16, cbr(4), cbr(8), cbr(8), cbr(12))
def({sw_reg_passenger_random6}) random(NEWCARGO + ARRIVE + LEAVE + LOADING, 16, cbr(8), cbr(8), cbr(12), cbr(12))
def({sw_reg_passenger_random7}) random(NEWCARGO + ARRIVE + LEAVE + LOADING, 16, cbr(8), cbr(12), cbr(12), ref(sw_reg_passenger5_random))
def({sw_reg_passenger_random8}) random(NEWCARGO + ARRIVE + LEAVE + LOADING, 16, cbr(12), cbr(12), ref(sw_reg_passenger5_random), ref(sw_reg_passenger5_random))

def({sw_reg_passenger}) cargowaiting(PASS,
	cbr(0) if(0 .. 31)
	ref(sw_reg_passenger_random1) if(32 .. 63)
	ref(sw_reg_passenger_random2) if(64 .. 127)
	ref(sw_reg_passenger_random3) if(128 .. 256)
	ref(sw_reg_passenger_random4) if(257 .. 511)
	ref(sw_reg_passenger_random5) if(512 .. 767)
	ref(sw_reg_passenger_random6) if(768 .. 1023)
	ref(sw_reg_passenger_random7) if(1024 .. 2047)
	ref(sw_reg_passenger_random8) if(2048 .. 4095)
	ref(sw_reg_passenger5_random) else
)

def({sw_set_reg_passenger}) 
setregisters(REGISTER_PASSENGER_OFFSET, 
	{
	sub(sw_reg_passenger), 
	sub(sw_reg_platform), 
	sub(sw_reg_passenger_skip), 
	sub(sw_reg_roof),
	sub(sw_reg_platform_shadow),
	sub(sw_reg_crossing),
	sub(sw_reg_crossing_shadow)
	}, 
	ref(sw_set_reg_overpass)
)

// re-randomisation
def({sw_reg_passenger_rerandom}) random(NEWCARGO + ARRIVE + LEAVE + LOADING, 16, 
	ref(sw_set_reg_passenger), 
	ref(sw_set_reg_passenger), 
	ref(sw_set_reg_passenger), 
	ref(sw_set_reg_passenger), 
	ref(sw_set_reg_passenger), 
	ref(sw_set_reg_passenger), 
	ref(sw_set_reg_passenger), 
	ref(sw_set_reg_passenger)
)

def({sw_ground_nontrack_register_sub}) subroutine(sw_terrain_snow,
	cbr(spr_ground_nontrack_snow - spr_ground_nontrack) if(1)
	cbr(0) else
)
def({sw_ground_nontrack_register}) setregisters(REGISTER_GROUND_NONTRACK_OFFSET, sub(sw_ground_nontrack_register_sub), ref(sw_reg_passenger_rerandom))
def({sw_set_registers}) setregisters(REGISTER_NONE, {0}, ref(sw_ground_nontrack_register))

def({sw_platform_layout}) calculate({subroutine(sw_terrain_snow) * 2},
	cbfail() else
)

def({sw_platform_cb}) callback(
	ref(sw_platform_layout) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

// slope detection
def({sw_check_right_self_slope}) tinfo_slope(pos(0, 0), shiftmask(0, NORTH+WEST+SOUTH+EAST),
	cbr(1) if(0, SOUTH+EAST, SOUTH+EAST+NORTH, SOUTH+EAST+WEST)
	cbr(2) if(NORTH+WEST, NORTH+WEST+EAST, NORTH+WEST+SOUTH)
	cbr(3) if(NORTH+WEST+EAST, NORTH+WEST+SOUTH, SOUTH+EAST+NORTH, SOUTH+EAST+WEST, NORTH+SOUTH, WEST+EAST)
	cbr(0) else
)

def({sw_check_right_slope_flat}) calculate({register(REGISTER_FUNCTION_PARAM) RESTORE tinfo_slope(REGISTER,) AND 0xF},
	cbr(1) if(NORTH+WEST, NORTH+WEST+EAST, NORTH+WEST+SOUTH, NORTH+SOUTH, WEST+EAST, 0)
	cbr(0) else
)

def({sw_check_right_slope_sloped}) calculate({register(REGISTER_FUNCTION_PARAM) RESTORE tinfo_slope(REGISTER,) AND 0xF},
	cbr(1) if(SOUTH+EAST, SOUTH+EAST+NORTH, SOUTH+EAST+WEST, NORTH+SOUTH, WEST+EAST)
	cbr(0) else
)

def({sw_check_right_slope}) subroutine(sw_check_right_self_slope,
	ref(sw_check_right_slope_flat) if(1)
	ref(sw_check_right_slope_sloped) if(2)
	cbr(1) if(3)
	cbr(0) else
)

def({sw_check_left_self_slope}) tinfo_slope(pos(0, 0), shiftmask(0, NORTH+SOUTH+EAST+WEST),
	cbr(1) if(0, NORTH+WEST)
	cbr(2) if(SOUTH+EAST)
	cbr(3) if(NORTH+WEST+EAST, NORTH+WEST+SOUTH, SOUTH+EAST+NORTH, SOUTH+EAST+WEST, NORTH+SOUTH, WEST+EAST)
	cbr(0) else
)

def({sw_check_left_slope_flat}) calculate({register(REGISTER_FUNCTION_PARAM) RESTORE tinfo_slope(REGISTER,) AND 0xF},
	cbr(1) if(SOUTH+EAST, SOUTH+EAST+NORTH, SOUTH+EAST+WEST, NORTH+SOUTH, WEST+EAST, 0)
	cbr(0) else
)

def({sw_check_left_slope_sloped}) calculate({register(REGISTER_FUNCTION_PARAM) RESTORE tinfo_slope(REGISTER,) AND 0xF},
	cbr(1) if(NORTH+WEST, NORTH+WEST+EAST, NORTH+WEST+SOUTH, NORTH+SOUTH, WEST+EAST)
	cbr(0) else
)

def({sw_check_left_slope}) subroutine(sw_check_left_self_slope,
	ref(sw_check_left_slope_flat) if(1)
	ref(sw_check_left_slope_sloped) if(2)
	cbr(1) if(3)
	cbr(0) else
)

def({sw_check_slope}) calculate({register(REGISTER_FUNCTION_PARAM) AND 0xF0},
	ref(sw_check_left_slope) if(0xF0)
	ref(sw_check_right_slope) if(0x10)
	cbr(0) else
)

// multi-platform detection
def({sw_platformA_check_opposite_part1}) tinfo_statid(pos(0, 1), shiftmask(0, 0xFF),
	cbr(1) if(HIGH_PLATFORM_A_PART1)
	cbr(1) if(HIGH_PLATFORM_C_PART1)
	cbr(2) if(LOW_PLATFORM_A_PART1)
	cbr(2) if(LOW_PLATFORM_C_PART1)
	cbr(3) if(LOW_ASPHALT_PLATFORM_A_PART1)
	cbr(3) if(LOW_ASPHALT_PLATFORM_C_PART1)
	cbr(0) else
)

def({sw_platformA_check_opposite_part2}) tinfo_statid(pos(0, 1), shiftmask(0, 0xFF),
	cbr(1) if(HIGH_PLATFORM_A_PART2)
	cbr(1) if(HIGH_PLATFORM_C_PART2)
	cbr(2) if(LOW_PLATFORM_A_PART2)
	cbr(2) if(LOW_PLATFORM_C_PART2)
	cbr(3) if(LOW_ASPHALT_PLATFORM_A_PART2)
	cbr(3) if(LOW_ASPHALT_PLATFORM_C_PART2)
	cbr(0) else
)

def({sw_platformA_check_opposite_sub}) tinfo_grfid(pos(0, 1),
	ref(sw_platformA_check_opposite_part1) if(VAR_GRFID_KWS_PART1)
	ref(sw_platformA_check_opposite_part2) if(VAR_GRFID_KWS_PART2)
	cbr(0) else
)

def({sw_platformA_check_opposite_slope}) calculate({0x10 store(REGISTER_FUNCTION_PARAM) subroutine(sw_check_slope)},
	ref(sw_platformA_check_opposite_sub) if(1)
	cbr(0) else
)

def({sw_platformA_check_opposite}) tinfo_statid(pos(0, 1), shiftmask(11, 0x1),
	ref(sw_platformA_check_opposite_slope) if(0)
	cbr(0) else
)

def({sw_platformB_check_opposite_part1}) tinfo_statid(pos(0, -1), shiftmask(0, 0xFF),
	cbr(1) if(HIGH_PLATFORM_B_PART1)
	cbr(1) if(HIGH_PLATFORM_C_PART1)
	cbr(2) if(LOW_PLATFORM_B_PART1)
	cbr(2) if(LOW_PLATFORM_C_PART1)
	cbr(3) if(LOW_ASPHALT_PLATFORM_B_PART1)
	cbr(3) if(LOW_ASPHALT_PLATFORM_C_PART1)
	cbr(0) else
)

def({sw_platformB_check_opposite_part2}) tinfo_statid(pos(0, -1), shiftmask(0, 0xFF),
	cbr(1) if(HIGH_PLATFORM_B_PART2)
	cbr(1) if(HIGH_PLATFORM_C_PART2)
	cbr(2) if(LOW_PLATFORM_B_PART2)
	cbr(2) if(LOW_PLATFORM_C_PART2)
	cbr(3) if(LOW_ASPHALT_PLATFORM_B_PART2)
	cbr(3) if(LOW_ASPHALT_PLATFORM_C_PART2)
	cbr(0) else
)

def({sw_platformB_check_opposite_sub}) tinfo_grfid(pos(0, -1),
	ref(sw_platformB_check_opposite_part1) if(VAR_GRFID_KWS_PART1)
	ref(sw_platformB_check_opposite_part2) if(VAR_GRFID_KWS_PART2)
	cbr(0) else
)

def({sw_platformB_check_opposite_slope}) calculate({0xF0 store(REGISTER_FUNCTION_PARAM) subroutine(sw_check_slope)},
	ref(sw_platformB_check_opposite_sub) if(1)
	cbr(0) else
)

def({sw_platformB_check_opposite}) tinfo_statid(pos(0, -1), shiftmask(11, 0x1),
	ref(sw_platformB_check_opposite_slope) if(0)
	cbr(0) else
)

def({sw_platform_multi_check_part1}) tinfo_statid(pos(0, 0), shiftmask(0, 0xFF),
	cbr(1) if(HIGH_PLATFORM_A_PART1)
	cbr(2) if(HIGH_PLATFORM_B_PART1)
	cbr(1) if(LOW_PLATFORM_A_PART1)
	cbr(2) if(LOW_PLATFORM_B_PART1)
	cbr(1) if(LOW_ASPHALT_PLATFORM_A_PART1)
	cbr(2) if(LOW_ASPHALT_PLATFORM_B_PART1)
	cbr(0) else
)

def({sw_platform_multi_check_part2}) tinfo_statid(pos(0, 0), shiftmask(0, 0xFF),
	cbr(1) if(HIGH_PLATFORM_A_PART2)
	cbr(2) if(HIGH_PLATFORM_B_PART2)
	cbr(1) if(LOW_PLATFORM_A_PART2)
	cbr(2) if(LOW_PLATFORM_B_PART2)
	cbr(1) if(LOW_ASPHALT_PLATFORM_A_PART2)
	cbr(2) if(LOW_ASPHALT_PLATFORM_B_PART2)
	cbr(0) else
)

def({sw_platform_multi_check}) tinfo_grfid(pos(0, 0),
	ref(sw_platform_multi_check_part1) if(VAR_GRFID_KWS_PART1)
	ref(sw_platform_multi_check_part2) if(VAR_GRFID_KWS_PART2)
	cbr(0) else
)

// multi-platform calculation

def({sw_platformA_multi_layout}) calculate({subroutine(sw_platformA_check_opposite) * 4 + subroutine(sw_platform_layout)},
	cbfail() else
)

def({sw_platformB_multi_layout}) calculate({subroutine(sw_platformB_check_opposite) * 4 + subroutine(sw_platform_layout)},
	cbfail() else
)

def({sw_platform_multi_layout}) subroutine(sw_platform_multi_check,
	ref(sw_platformA_multi_layout) if(1)
	ref(sw_platformB_multi_layout) if(2)
	ref(sw_platform_layout) else
)

def({sw_platform_multi_cb}) callback(
	ref(sw_platform_multi_layout) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

// modular stations

def({sw_modular_poleA_part1}) tinfo_statid(pos(0, -1), shiftmask(0,0xFF),
	cbr(0) if(MODULAR_LOW .. MODULAR_HIGH)
	cbr(1) else
)

def({sw_modular_poleA}) tinfo_statid(pos(0, -1), shiftmask(0,0xFF),
	ref(sw_modular_poleA_part1) if(VAR_GRFID_KWS_PART1)
	cbr(1) else
)

def({sw_modular_poleB_part1}) tinfo_statid(pos(0, 1), shiftmask(0,0xFF),
	cbr(0) if(MODULAR_LOW .. MODULAR_HIGH)
	cbr(1) else
)

def({sw_modular_poleB}) tinfo_grfid(pos(0, 1),
	ref(sw_modular_poleB_part1) if(VAR_GRFID_KWS_PART1)
	cbr(1) else
)

def({sw_modular_pole_register}) setregisters(REGISTER_MODULAR_POLE_SKIP, {sub(sw_modular_poleA), sub(sw_modular_poleB)}, ref(sw_set_registers))

def({sw_modular_overpass_register_sub}) subroutine(sw_terrain_snow,
	cbr(spr_bdoverpass_low_snow - spr_bdoverpass_low) if(1)
	cbr(0) else
)
def({sw_modular_overpass_register}) setregisters(REGISTER_MODULAR_OVERPASS_OFFSET, sub(sw_modular_overpass_register_sub), ref(sw_modular_pole_register))

def({sw_modular_overpass_menu}) setregisters(REGISTER_MODULAR_OVERPASS_OFFSET, {0, 1, 1}, ref(sw_set_registers))

// multi-platform calculation
def({sw_modular_overpass_platformA_multi_layout}) calculate({subroutine(sw_platformA_check_opposite) * 2},
	cbfail() else
)

def({sw_modular_overpass_platformB_multi_layout}) calculate({subroutine(sw_platformB_check_opposite) * 2},
	cbfail() else
)

def({sw_modular_overpass_multi_layout}) subroutine(sw_platform_multi_check,
	ref(sw_modular_overpass_platformA_multi_layout) if(1)
	ref(sw_modular_overpass_platformB_multi_layout) if(2)
	ref(sw_platform_layout) else
)

// overpass

def({sw_overpass_platform_layout_sub2}) plt_posrev(
	self(
		cbr(2) if(0)
		cbr(4) else
	)
)

def({sw_overpass_platform_layout_sub1}) plt_midpos(
	self(
		cbr(0) if(0)
		ref(sw_overpass_platform_layout_sub2) else
	)
)
def({sw_overpass_platform_layout}) calculate({subroutine(sw_terrain_snow) * 6 + subroutine(sw_overpass_platform_layout_sub1)},
	cbfail() else
)

// multi-platform calculation
def({sw_overpass_platformA_multi_layout}) calculate({subroutine(sw_platformA_check_opposite) * 12 + subroutine(sw_overpass_platform_layout)},
	cbfail() else
)

def({sw_overpass_platformB_multi_layout}) calculate({subroutine(sw_platformB_check_opposite) * 12 + subroutine(sw_overpass_platform_layout)},
	cbfail() else
)

def({sw_overpass_platform_multi_layout}) subroutine(sw_platform_multi_check,
	ref(sw_overpass_platformA_multi_layout) if(1)
	ref(sw_overpass_platformB_multi_layout) if(2)
	ref(sw_overpass_platform_layout) else
)

// psd

def({sw_psd_glass_offset_anim}) anim_frame(
	cbr(2) if(1, 5)
	cbr(4) if(2 .. 4)
	cbr(0) else
)

// check psd start/end, platform A
def({sw_psd_start_pA_opposite_part1}) tinfo_statid(pos(-1, -1), shiftmask(0, 0xFF),
	cbr(1) if(HIGH_PLATFORM_B_PART1)
	cbr(1) if(HIGH_PLATFORM_C_PART1)
	cbr(0) else
)

def({sw_psd_start_pA_opposite_part2}) tinfo_statid(pos(-1, -1), shiftmask(0, 0xFF),
	cbr(1) if(HIGH_PLATFORM_B_PART2)
	cbr(1) if(HIGH_PLATFORM_C_PART2)
	cbr(0) else
)

def({sw_psd_start_pA_opposite_sub}) tinfo_grfid(pos(-1, -1),
	ref(sw_psd_start_pA_opposite_part1) if(VAR_GRFID_KWS_PART1)
	ref(sw_psd_start_pA_opposite_part2) if(VAR_GRFID_KWS_PART2)
	cbr(0) else
)

// parallel, slope check
def({sw_psd_start_pA_opposite_slope}) calculate({0xFF store(REGISTER_FUNCTION_PARAM) subroutine(sw_check_slope)},
	ref(sw_psd_start_pA_opposite_sub) if(1)
	cbr(0) else
)

def({sw_psd_start_pA_opposite}) tinfo_statid(pos(-1, -1), shiftmask(11, 0x1),
	ref(sw_psd_start_pA_opposite_slope) if(0)
	cbr(0) else
)

def({sw_psd_start_pA_part2}) tinfo_statid(pos(-1, 0), shiftmask(0,0xFF),
	cbr(1) if(PSD_PLATFORM_A_PART2)
	cbr(1) if(PSD_PLATFORM_C_PART2)
	ref(sw_psd_start_pA_opposite) if(PSD_PLATFORM_B_PART2)
	cbr(0) else
)

def({sw_psd_start_pA_part1}) tinfo_statid(pos(-1, 0), shiftmask(0,0xFF),
	cbr(1) if(PSD_PLATFORM_A_PART1)
	cbr(1) if(PSD_PLATFORM_C_PART1)
	ref(sw_psd_start_pA_opposite) if(PSD_PLATFORM_B_PART1)
	cbr(0) else
)

def({sw_psd_start_pA_sub}) tinfo_grfid(pos(-1, 0),
	cbr(0) if(0)
	ref(sw_psd_start_pA_part1) if(VAR_GRFID_KWS_PART1)
	ref(sw_psd_start_pA_part2) if(VAR_GRFID_KWS_PART2)
	cbr(0) else
)

// parallel check
def({sw_psd_start_pA}) tinfo_statid(pos(-1, 0), shiftmask(11, 0x1),
	ref(sw_psd_start_pA_sub) if(0)
	cbr(0) else
)

def({sw_psd_end_pA_opposite_part1}) tinfo_statid(pos(1, -1), shiftmask(0, 0xFF),
	cbr(2) if(HIGH_PLATFORM_B_PART1)
	cbr(2) if(HIGH_PLATFORM_C_PART1)
	cbr(0) else
)

def({sw_psd_end_pA_opposite_part2}) tinfo_statid(pos(1, -1), shiftmask(0, 0xFF),
	cbr(2) if(HIGH_PLATFORM_B_PART2)
	cbr(2) if(HIGH_PLATFORM_C_PART2)
	cbr(0) else
)

def({sw_psd_end_pA_opposite_sub}) tinfo_grfid(pos(1, -1),
	ref(sw_psd_end_pA_opposite_part1) if(VAR_GRFID_KWS_PART1)
	ref(sw_psd_end_pA_opposite_part2) if(VAR_GRFID_KWS_PART2)
	cbr(0) else
)

// parallel, slope check
def({sw_psd_end_pA_opposite_slope}) calculate({0xF1 store(REGISTER_FUNCTION_PARAM) subroutine(sw_check_slope)},
	ref(sw_psd_end_pA_opposite_sub) if(0)
	cbr(0) else
)

def({sw_psd_end_pA_opposite}) tinfo_statid(pos(1, -1), shiftmask(11, 0x1),
	ref(sw_psd_end_pA_opposite_slope) if(0)
	cbr(0) else
)

def({sw_psd_end_pA_part2}) tinfo_statid(pos(1, 0), shiftmask(0,0xFF),
	cbr(2) if(PSD_PLATFORM_A_PART2)
	cbr(2) if(PSD_PLATFORM_C_PART2)
	ref(sw_psd_end_pA_opposite) if(PSD_PLATFORM_B_PART2)
	cbr(0) else
)

def({sw_psd_end_pA_part1}) tinfo_statid(pos(1, 0), shiftmask(0,0xFF),
	cbr(2) if(PSD_PLATFORM_A_PART1)
	cbr(2) if(PSD_PLATFORM_C_PART1)
	ref(sw_psd_end_pA_opposite) if(PSD_PLATFORM_B_PART1)
	cbr(0) else
)

def({sw_psd_end_pA_sub}) tinfo_grfid(pos(1, 0),
	cbr(0) if(0)
	ref(sw_psd_end_pA_part1) if(VAR_GRFID_KWS_PART1)
	ref(sw_psd_end_pA_part2) if(VAR_GRFID_KWS_PART2)
	cbr(0) else
)

// parallel check
def({sw_psd_end_pA}) tinfo_statid(pos(1, 0), shiftmask(11, 0x1),
	ref(sw_psd_end_pA_sub) if(0)
	cbr(0) else
)

def({sw_psd_startend_pA}) calculate({subroutine(sw_psd_start_pA) + subroutine(sw_psd_end_pA)},
	cbfail() else
)

def({sw_psd_offset_pA}) subroutine(sw_psd_startend_pA,
	cbr(4) if(2)
	cbr(8) if(1)
	cbr(0) else
)

def({sw_psd_glass_startend_pA}) subroutine(sw_psd_startend_pA,
	cbr(1) if(2)
	cbr(3) if(1)
	cbr(0) else
)

def({sw_psd_glass_offset_pA}) calculate({subroutine(sw_psd_glass_startend_pA) * 6 + subroutine(sw_psd_glass_offset_anim)},
	cbfail() else
)

// check psd start/end, platform B
def({sw_psd_start_pB_opposite_part1}) tinfo_statid(pos(-1, 1), shiftmask(0, 0xFF),
	cbr(1) if(HIGH_PLATFORM_A_PART1)
	cbr(1) if(HIGH_PLATFORM_C_PART1)
	cbr(0) else
)

def({sw_psd_start_pB_opposite_part2}) tinfo_statid(pos(-1, 1), shiftmask(0, 0xFF),
	cbr(1) if(HIGH_PLATFORM_A_PART2)
	cbr(1) if(HIGH_PLATFORM_C_PART2)
	cbr(0) else
)

def({sw_psd_start_pB_opposite_sub}) tinfo_grfid(pos(-1, 1),
	ref(sw_psd_start_pB_opposite_part1) if(VAR_GRFID_KWS_PART1)
	ref(sw_psd_start_pB_opposite_part2) if(VAR_GRFID_KWS_PART2)
	cbr(0) else
)

// parallel, slope check
def({sw_psd_start_pB_opposite_slope}) calculate({0x1F store(REGISTER_FUNCTION_PARAM) subroutine(sw_check_slope)},
	ref(sw_psd_start_pB_opposite_sub) if(1)
	cbr(0) else
)

def({sw_psd_start_pB_opposite}) tinfo_statid(pos(-1, 1), shiftmask(11, 0x1),
	ref(sw_psd_start_pB_opposite_slope) if(0)
	cbr(0) else
)

def({sw_psd_start_pB_part2}) tinfo_statid(pos(-1, 0), shiftmask(0,0xFF),
	cbr(1) if(PSD_PLATFORM_B_PART2)
	cbr(1) if(PSD_PLATFORM_C_PART2)
	ref(sw_psd_start_pB_opposite) if(PSD_PLATFORM_A_PART2)
	cbr(0) else
)

def({sw_psd_start_pB_part1}) tinfo_statid(pos(-1, 0), shiftmask(0,0xFF),
	cbr(1) if(PSD_PLATFORM_B_PART1)
	cbr(1) if(PSD_PLATFORM_C_PART1)
	ref(sw_psd_start_pB_opposite) if(PSD_PLATFORM_A_PART1)
	cbr(0) else
)

def({sw_psd_start_pB_sub}) tinfo_grfid(pos(-1, 0),
	cbr(0) if(0)
	ref(sw_psd_start_pB_part1) if(VAR_GRFID_KWS_PART1)
	ref(sw_psd_start_pB_part2) if(VAR_GRFID_KWS_PART2)
	cbr(0) else
)

// parallel check
def({sw_psd_start_pB}) tinfo_statid(pos(-1, 0), shiftmask(11, 0x1),
	ref(sw_psd_start_pB_sub) if(0)
	cbr(0) else
)

def({sw_psd_end_pB_opposite_part1}) tinfo_statid(pos(1, 1), shiftmask(0, 0xFF),
	cbr(2) if(HIGH_PLATFORM_A_PART1)
	cbr(2) if(HIGH_PLATFORM_C_PART1)
	cbr(0) else
)

def({sw_psd_end_pB_opposite_part2}) tinfo_statid(pos(1, 1), shiftmask(0, 0xFF),
	cbr(2) if(HIGH_PLATFORM_A_PART2)
	cbr(2) if(HIGH_PLATFORM_C_PART2)
	cbr(0) else
)

def({sw_psd_end_pB_opposite_sub}) tinfo_grfid(pos(1, 1),
	ref(sw_psd_end_pB_opposite_part1) if(VAR_GRFID_KWS_PART1)
	ref(sw_psd_end_pB_opposite_part2) if(VAR_GRFID_KWS_PART2)
	cbr(0) else
)

// parallel, slope check
def({sw_psd_end_pB_opposite_slope}) calculate({0x11 store(REGISTER_FUNCTION_PARAM) subroutine(sw_check_slope)},
	ref(sw_psd_end_pB_opposite_sub) if(0)
	cbr(0) else
)

def({sw_psd_end_pB_opposite}) tinfo_statid(pos(1, 1), shiftmask(11, 0x1),
	ref(sw_psd_end_pB_opposite_slope) if(0)
	cbr(0) else
)

def({sw_psd_end_pB_part2}) tinfo_statid(pos(1, 0), shiftmask(0,0xFF),
	ref(sw_psd_end_pB_opposite) if(PSD_PLATFORM_A_PART2)
	cbr(2) if(PSD_PLATFORM_B_PART2)
	cbr(2) if(PSD_PLATFORM_C_PART2)
	cbr(0) else
)

def({sw_psd_end_pB_part1}) tinfo_statid(pos(1, 0), shiftmask(0,0xFF),
	ref(sw_psd_end_pB_opposite) if(PSD_PLATFORM_A_PART1)
	cbr(2) if(PSD_PLATFORM_B_PART1)
	cbr(2) if(PSD_PLATFORM_C_PART1)
	cbr(0) else
)

def({sw_psd_end_pB_sub}) tinfo_grfid(pos(1, 0),
	cbr(0) if(0)
	ref(sw_psd_end_pB_part1) if(VAR_GRFID_KWS_PART1)
	ref(sw_psd_end_pB_part2) if(VAR_GRFID_KWS_PART2)
	cbr(0) else
)

// parallel check
def({sw_psd_end_pB}) tinfo_statid(pos(1, 0), shiftmask(11, 0x1),
	ref(sw_psd_end_pB_sub) if(0)
	cbr(0) else
)

def({sw_psd_startend_pB}) calculate({subroutine(sw_psd_start_pB) + subroutine(sw_psd_end_pB)},
	cbfail() else
)

def({sw_psd_offset_pB}) subroutine(sw_psd_startend_pB,
	cbr(4) if(2)
	cbr(8) if(1)
	cbr(0) else
)

def({sw_psd_glass_startend_pB}) subroutine(sw_psd_startend_pB,
	cbr(2) if(2)
	cbr(4) if(1)
	cbr(0) else
)

def({sw_psd_glass_offset_pB}) calculate({subroutine(sw_psd_glass_startend_pB) * 6 + subroutine(sw_psd_glass_offset_anim)},
	cbfail() else
)

skipif(2, OTTDVERSION, <, 0x1A000000)
def({sw_set_reg_psd}) setregisters(REGISTER_PSD_GLASS_OFFSET, {sub(sw_psd_glass_offset_pA), sub(sw_psd_glass_offset_pB), sub(sw_psd_offset_pA), sub(sw_psd_offset_pB)}, ref(sw_modular_overpass_register))
def({sw_set_reg_psd_menu}) setregisters(REGISTER_PSD_GLASS_OFFSET, {sub(sw_psd_glass_offset_pA), sub(sw_psd_glass_offset_pB), sub(sw_psd_offset_pA), sub(sw_psd_offset_pB)}, ref(sw_modular_overpass_menu))

skipif(2, OTTDVERSION, >, 0x1A000000)
def({sw_set_reg_psd}) setregisters(REGISTER_PSD_GLASS_OFFSET, {sub(sw_psd_glass_offset_anim), sub(sw_psd_glass_offset_anim), 0, 0}, ref(sw_modular_overpass_register))
def({sw_set_reg_psd_menu}) setregisters(REGISTER_PSD_GLASS_OFFSET, {sub(sw_psd_glass_offset_anim), sub(sw_psd_glass_offset_anim), 0, 0}, ref(sw_modular_overpass_menu))

def({sw_psd_check_sound_part2}) tinfo_statid(pos(-1, 0), shiftmask(0,0xFF),
	cbr(0) if(PSD_PLATFORM_A_PART2)
	cbr(0) if(PSD_PLATFORM_B_PART2)
	cbr(0) if(PSD_PLATFORM_C_PART2)
	cbr(1) else
)

def({sw_psd_check_sound_part1}) tinfo_statid(pos(-1, 0), shiftmask(0,0xFF),
	cbr(0) if(PSD_PLATFORM_A_PART1)
	cbr(0) if(PSD_PLATFORM_B_PART1)
	cbr(0) if(PSD_PLATFORM_C_PART1)
	cbr(1) else
)

def({sw_psd_check_sound}) tinfo_grfid(pos(-1, 0),
	cbr(1) if(0)
	ref(sw_psd_end_pB_part1) if(VAR_GRFID_KWS_PART1)
	ref(sw_psd_end_pB_part2) if(VAR_GRFID_KWS_PART2)
	cbr(1) else
)

def({sw_psd_sound_open}) subroutine(sw_psd_check_sound,
	animframe(A_NEXT, _S_snd_psd_open) if(1)
	animframe(A_NEXT) else
)

def({sw_psd_sound_close}) subroutine(sw_psd_check_sound,
	animframe(A_NEXT, _S_snd_psd_close) if(1)
	animframe(A_NEXT) else
)

skipif(1, getowngrfparameter(PARAM_FLAGS), BITCLR, PARAM_FLAGS_PSDSFX)
def({sw_psd_animframe}) anim_frame(
	animframe(A_STOP) if(3)
	ref(sw_psd_sound_open) if(1)
	ref(sw_psd_sound_close) if(4)
	animframe(A_NEXT) else
)
skipif(1, getowngrfparameter(PARAM_FLAGS), BITSET, PARAM_FLAGS_PSDSFX)
def({sw_psd_animframe}) anim_frame(
	animframe(A_STOP) if(3)
	animframe(A_NEXT) else
)

def({sw_psd_animctrl_leave}) anim_frame(
	animcontrol(6) if(0)
	animcontrol(5) if(1)
	animcontrol(4) else
)

def({sw_psd_animctrl}) anim_trigger(
	animcontrol(1) if(ARRIVE)
	ref(sw_psd_animctrl_leave) if(LEAVE)
	animcontrol(A_NOP) else
)