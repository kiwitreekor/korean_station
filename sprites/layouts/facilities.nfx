define(spritelayout_signA, {
	define({tmp_type}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	ifelse(eval($1 == PLT_TYPE_A || $1 == PLT_TYPE_C || $1 == PLT_TYPE_MULTI), 1, {
		ifelse(tmp_type, 0, {
			regular(spr_signA, xyz(2, 0, get_platform_height($2)), dxdydz(0, 3, 8), aslflags({OFFSET_XY}), registers({ifelse(_ORIENT, ORIENT_NE, {REGISTER_NONE, REGISTER_SIGN_A_OFFSET_Y}, {REGISTER_SIGN_A_OFFSET_Y, REGISTER_NONE})}))
		}, tmp_type, 1, {
			regular(spr_signA+2, xyz(7, 0, get_platform_height($2)), dxdydz(3, 0, 8))
		}, tmp_type, 2, {
			regular(spr_signA, xyz(14, 0, get_platform_height($2)), dxdydz(0, 3, 8), aslflags({OFFSET_XY}), registers({ifelse(_ORIENT, ORIENT_NE, {REGISTER_NONE, REGISTER_SIGN_A_OFFSET_Y}, {REGISTER_SIGN_A_OFFSET_Y, REGISTER_NONE})}))
		})
	})
	ifelse(eval($1 == PLT_TYPE_B || $1 == PLT_TYPE_C || $1 == PLT_TYPE_MULTI), 1, {
		define({tmp_platform_type}, {ifelse($1, PLT_TYPE_MULTI, $3, $2)})
		ifelse(tmp_type, 0, {
			regular(spr_signA, xyz(2, 12, get_platform_height(tmp_platform_type)), dxdydz(0, 3, 8), aslflags({SKIP}), registers({REGISTER_SIGN_A_SKIP}))
		}, tmp_type, 1, {
			regular(spr_signA+2, xyz(7, 16, get_platform_height(tmp_platform_type)), dxdydz(3, 0, 8))
		}, tmp_type, 2, {
			regular(spr_signA, xyz(14, 12, get_platform_height(tmp_platform_type)), dxdydz(0, 3, 8), aslflags({SKIP}), registers({REGISTER_SIGN_A_SKIP}))
		})
	})
})

define(spritelayout_signB, {
	ifelse($2, ROOF_TYPE_A, {
		regular(spr_signB, xyz(6, 16, get_platform_height($1)+5), dxdydz(5, 0, 4))
	}, $2, ROOF_TYPE_B, {
		regular(spr_signB, xyz(6, 13, get_platform_height($1)+4), dxdydz(5, 0, 4))
	})
})

define(spritelayout_signC, {
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	define({tmp_platform_type}, {ifelse($1, PLT_TYPE_MULTI, $3, $2)})
	ifelse(tmp_roof, ROOF_TYPE_A, {
		ifelse(eval($1 == PLT_TYPE_A || $1 == PLT_TYPE_C || $1 == PLT_TYPE_MULTI), 1, {
			regular(spr_signC+4, xyz(16, 0, get_platform_height($2)+7), dxdydz(0, 5, 3))
		})
		ifelse(eval($1 == PLT_TYPE_B || $1 == PLT_TYPE_C || $1 == PLT_TYPE_MULTI), 1, {
			regular(spr_signC+6, xyz(16, 11, get_platform_height(tmp_platform_type)+7), dxdydz(0, 5, 3))
		})
	}, tmp_roof, ROOF_TYPE_B, {
		ifelse(eval($1 == PLT_TYPE_A || $1 == PLT_TYPE_C || $1 == PLT_TYPE_MULTI), 1, {
			regular(spr_signC+4, xyz(16, 0, get_platform_height($2)+9), dxdydz(0, 5, 3))
		})
		ifelse(eval($1 == PLT_TYPE_B || $1 == PLT_TYPE_C || $1 == PLT_TYPE_MULTI), 1, {
			regular(spr_signC+6, xyz(16, 11, get_platform_height(tmp_platform_type)+9), dxdydz(0, 5, 3))
		})
	}, tmp_roof, ROOF_TYPE_NONE, {
		ifelse(eval($1 == PLT_TYPE_A || $1 == PLT_TYPE_C || $1 == PLT_TYPE_MULTI), 1, {
			regular(spr_signC, xyz(8, 0, get_platform_height($2)), dxdydz(0, 5, 18))
		})
		ifelse(eval($1 == PLT_TYPE_B || $1 == PLT_TYPE_C || $1 == PLT_TYPE_MULTI), 1, {
			regular(spr_signC+2, xyz(8, 11, get_platform_height(tmp_platform_type)), dxdydz(0, 5, 18))
		})
	})
})

define(spritelayout_led, {
	define({tmp_platform_type}, {ifelse($1, PLT_TYPE_MULTI, $3, $2)})
	ifelse(eval($1 == PLT_TYPE_A || $1 == PLT_TYPE_C || $1 == PLT_TYPE_MULTI), 1, {
		regular(spr_led, xyz(16, 1, get_platform_height($2)+7), dxdydz(0, 3, 3))
	})
	ifelse(eval($1 == PLT_TYPE_B || $1 == PLT_TYPE_C || $1 == PLT_TYPE_MULTI), 1, {
		regular(spr_led, xyz(16, 12, get_platform_height(tmp_platform_type)+7), dxdydz(0, 3, 3))
	})
})

define(spritelayout_waitingroom, {
	define({tmp_platform_type}, {ifelse($1, PLT_TYPE_MULTI, $3, $2)})
	ifelse(eval($1 == PLT_TYPE_A || $1 == PLT_TYPE_C || $1 == PLT_TYPE_MULTI), 1, {
		regular(spr_waitingroom, xyz(4, 0, get_platform_height($2)), dxdydz(8, 4, 8))
		glass(spr_waitingroom_glass, xyoff(0, 0))
	})
	ifelse(eval($1 == PLT_TYPE_B || $1 == PLT_TYPE_C || $1 == PLT_TYPE_MULTI), 1, {
		regular(spr_waitingroom, xyz(4, 12, get_platform_height(tmp_platform_type)), dxdydz(8, 4, 8))
		glass(spr_waitingroom_glass, xyoff(0, 0))
	})
})

define(spritelayout_underpass, {
	define({tmp_platform_type}, {ifelse($1, PLT_TYPE_MULTI, $3, $2)})
	ifelse(eval($1 == PLT_TYPE_A || $1 == PLT_TYPE_C || $1 == PLT_TYPE_MULTI), 1, {
		regular(spr_underpass, xyz(3, 0, get_platform_height($2)), dxdydz(10, 3, 3))
	})
	ifelse(eval($1 == PLT_TYPE_B || $1 == PLT_TYPE_C || $1 == PLT_TYPE_MULTI), 1, {
		regular(spr_underpass, xyz(3, 13, get_platform_height(tmp_platform_type)), dxdydz(10, 3, 3))
	})
})

define(spritelayout_light, {
	define({tmp_platform_type}, {ifelse($1, PLT_TYPE_MULTI, $3, $2)})
	ifelse(eval($1 == PLT_TYPE_A || $1 == PLT_TYPE_C || $1 == PLT_TYPE_MULTI), 1, {
		regular(spr_light, xyz(6, 0, get_platform_height($2)), dxdydz(4, 0, 18))
	})
	ifelse(eval($1 == PLT_TYPE_B || $1 == PLT_TYPE_C || $1 == PLT_TYPE_MULTI), 1, {
		regular(spr_light, xyz(6, 16, get_platform_height(tmp_platform_type)), dxdydz(4, 0, 18))
	})
})

define(spritelayout_psd, {
	define({tmp_platform_type}, {ifelse($1, PLT_TYPE_MULTI, $3, $2)})
	ifelse(eval($1 == PLT_TYPE_A || $1 == PLT_TYPE_C || $1 == PLT_TYPE_MULTI), 1, {
		ifelse($2, PLT_TYPE_HIGH, {
			regular(spr_psd, xyz(0, 6, get_platform_height($2)), dxdydz(16, 0, 8), aslflags({OFFSET_SPRITE}), registers({REGISTER_PSD_OFFSET}))
			glass(spr_psd_glass, xyoff(0, 2), aslflags({OFFSET_SPRITE}), registers({REGISTER_PSD_GLASS_OFFSET}))
		})
	})
	ifelse(eval($1 == PLT_TYPE_B || $1 == PLT_TYPE_C || $1 == PLT_TYPE_MULTI), 1, {
		ifelse(tmp_platform_type, PLT_TYPE_HIGH, {
			regular(spr_psd+2, xyz(0, 10, get_platform_height(tmp_platform_type)), dxdydz(16, 0, 8), aslflags({OFFSET_SPRITE}), registers({REGISTER_PSD_OFFSET+1}))
			glass(spr_psd_glass, xyoff(0, 2), aslflags({OFFSET_SPRITE}), registers({REGISTER_PSD_GLASS_OFFSET+1}))
		})
	})
})


define(LAYOUT_TEMPLATE_FACILITIES_SIGN_A_BASE, {
	define({tmp_ground}, {ifelse($1, PLT_TYPE_MULTI, $5, $4)})
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	forloop(X, {
		xtile({
			tmp_ground
			platform_base($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), eval(tmp_roof != ROOF_TYPE_NONE))
			spritelayout_signA($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), X)
			spritelayout_roof(tmp_roof, $1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}))
		})
	}, 0 .. 2)
})

define(LAYOUT_TEMPLATE_FACILITIES_SIGN_A_SINGLE, {
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	LAYOUT_TEMPLATE_FACILITIES_SIGN_A_BASE($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof, {spritelayout_ground()})
	LAYOUT_TEMPLATE_FACILITIES_SIGN_A_BASE($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof, {spritelayout_ground_snow()})
})

define(LAYOUT_TEMPLATE_FACILITIES_SIGN_A, {
	define({tmp_roof}, {ifelse(eval($#>2), 1, $3, ROOF_TYPE_NONE)})
	LAYOUT_TEMPLATE_FACILITIES_SIGN_A_SINGLE($1, $2, tmp_roof)
	ifelse($1, PLT_TYPE_A, {
		LAYOUT_TEMPLATE_FACILITIES_SIGN_A_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_HIGH, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_SIGN_A_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_LOW, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_SIGN_A_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_LOW_ASPHALT, tmp_roof)
	}, $1, PLT_TYPE_B, {
		LAYOUT_TEMPLATE_FACILITIES_SIGN_A_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_HIGH, $2, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_SIGN_A_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_LOW, $2, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_SIGN_A_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_LOW_ASPHALT, $2, tmp_roof)
	})
})

define(LAYOUT_SIGN_A_HP_A, {LAYOUT_TEMPLATE_FACILITIES_SIGN_A(PLT_TYPE_A, PLT_TYPE_HIGH)})
define(LAYOUT_SIGN_A_HP_B, {LAYOUT_TEMPLATE_FACILITIES_SIGN_A(PLT_TYPE_B, PLT_TYPE_HIGH)})
define(LAYOUT_SIGN_A_HP_C, {LAYOUT_TEMPLATE_FACILITIES_SIGN_A(PLT_TYPE_C, PLT_TYPE_HIGH)})

define(LAYOUT_SIGN_A_LP_A, {LAYOUT_TEMPLATE_FACILITIES_SIGN_A(PLT_TYPE_A, PLT_TYPE_LOW)})
define(LAYOUT_SIGN_A_LP_B, {LAYOUT_TEMPLATE_FACILITIES_SIGN_A(PLT_TYPE_B, PLT_TYPE_LOW)})
define(LAYOUT_SIGN_A_LP_C, {LAYOUT_TEMPLATE_FACILITIES_SIGN_A(PLT_TYPE_C, PLT_TYPE_LOW)})

define(LAYOUT_SIGN_A_LAP_A, {LAYOUT_TEMPLATE_FACILITIES_SIGN_A(PLT_TYPE_A, PLT_TYPE_LOW_ASPHALT)})
define(LAYOUT_SIGN_A_LAP_B, {LAYOUT_TEMPLATE_FACILITIES_SIGN_A(PLT_TYPE_B, PLT_TYPE_LOW_ASPHALT)})
define(LAYOUT_SIGN_A_LAP_C, {LAYOUT_TEMPLATE_FACILITIES_SIGN_A(PLT_TYPE_C, PLT_TYPE_LOW_ASPHALT)})


define(LAYOUT_TEMPLATE_FACILITIES_SIGN_B_BASE, {
	define({tmp_ground}, {ifelse($1, PLT_TYPE_MULTI, $5, $4)})
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	xtile({
		tmp_ground
		platform_base($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), eval(tmp_roof != ROOF_TYPE_NONE))
		spritelayout_signB(ifelse($1, PLT_TYPE_MULTI, {$3}, {$2}), tmp_roof)
		spritelayout_roof(tmp_roof, $1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}))
	})
})

define(LAYOUT_TEMPLATE_FACILITIES_SIGN_B_SINGLE, {
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	LAYOUT_TEMPLATE_FACILITIES_SIGN_B_BASE($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof, {spritelayout_ground()})
	LAYOUT_TEMPLATE_FACILITIES_SIGN_B_BASE($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof, {spritelayout_ground_snow()})
})

define(LAYOUT_TEMPLATE_FACILITIES_SIGN_B, {
	define({tmp_roof}, {ifelse(eval($#>2), 1, $3, ROOF_TYPE_NONE)})
	LAYOUT_TEMPLATE_FACILITIES_SIGN_B_SINGLE($1, $2, tmp_roof)
	ifelse($1, PLT_TYPE_A, {
		LAYOUT_TEMPLATE_FACILITIES_SIGN_B_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_HIGH, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_SIGN_B_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_LOW, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_SIGN_B_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_LOW_ASPHALT, tmp_roof)
	}, $1, PLT_TYPE_B, {
		LAYOUT_TEMPLATE_FACILITIES_SIGN_B_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_HIGH, $2, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_SIGN_B_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_LOW, $2, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_SIGN_B_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_LOW_ASPHALT, $2, tmp_roof)
	})
})

define(LAYOUT_SIGN_B_HP_B_RF_A, {LAYOUT_TEMPLATE_FACILITIES_SIGN_B(PLT_TYPE_B, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_SIGN_B_HP_C_RF_A, {LAYOUT_TEMPLATE_FACILITIES_SIGN_B(PLT_TYPE_C, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_SIGN_B_HP_B_RF_B, {LAYOUT_TEMPLATE_FACILITIES_SIGN_B(PLT_TYPE_B, PLT_TYPE_HIGH, ROOF_TYPE_B)})
define(LAYOUT_SIGN_B_HP_C_RF_B, {LAYOUT_TEMPLATE_FACILITIES_SIGN_B(PLT_TYPE_C, PLT_TYPE_HIGH, ROOF_TYPE_B)})

define(LAYOUT_SIGN_B_LP_B_RF_A, {LAYOUT_TEMPLATE_FACILITIES_SIGN_B(PLT_TYPE_B, PLT_TYPE_LOW, ROOF_TYPE_A)})
define(LAYOUT_SIGN_B_LP_C_RF_A, {LAYOUT_TEMPLATE_FACILITIES_SIGN_B(PLT_TYPE_C, PLT_TYPE_LOW, ROOF_TYPE_A)})
define(LAYOUT_SIGN_B_LP_B_RF_B, {LAYOUT_TEMPLATE_FACILITIES_SIGN_B(PLT_TYPE_B, PLT_TYPE_LOW, ROOF_TYPE_B)})
define(LAYOUT_SIGN_B_LP_C_RF_B, {LAYOUT_TEMPLATE_FACILITIES_SIGN_B(PLT_TYPE_C, PLT_TYPE_LOW, ROOF_TYPE_B)})

define(LAYOUT_SIGN_B_LAP_B_RF_A, {LAYOUT_TEMPLATE_FACILITIES_SIGN_B(PLT_TYPE_B, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_A)})
define(LAYOUT_SIGN_B_LAP_C_RF_A, {LAYOUT_TEMPLATE_FACILITIES_SIGN_B(PLT_TYPE_C, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_A)})
define(LAYOUT_SIGN_B_LAP_B_RF_B, {LAYOUT_TEMPLATE_FACILITIES_SIGN_B(PLT_TYPE_B, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_B)})
define(LAYOUT_SIGN_B_LAP_C_RF_B, {LAYOUT_TEMPLATE_FACILITIES_SIGN_B(PLT_TYPE_C, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_B)})


define(LAYOUT_TEMPLATE_FACILITIES_SIGN_C_BASE, {
	define({tmp_ground}, {ifelse($1, PLT_TYPE_MULTI, $5, $4)})
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	xtile({
		tmp_ground
		platform_base($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), eval(tmp_roof != ROOF_TYPE_NONE))
		spritelayout_signC($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof)
		spritelayout_roof(tmp_roof, $1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}))
	})
})

define(LAYOUT_TEMPLATE_FACILITIES_SIGN_C_SINGLE, {
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	LAYOUT_TEMPLATE_FACILITIES_SIGN_C_BASE($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof, {spritelayout_ground()})
	LAYOUT_TEMPLATE_FACILITIES_SIGN_C_BASE($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof, {spritelayout_ground_snow()})
})

define(LAYOUT_TEMPLATE_FACILITIES_SIGN_C, {
	define({tmp_roof}, {ifelse(eval($#>2), 1, $3, ROOF_TYPE_NONE)})
	LAYOUT_TEMPLATE_FACILITIES_SIGN_C_SINGLE($1, $2, tmp_roof)
	ifelse($1, PLT_TYPE_A, {
		LAYOUT_TEMPLATE_FACILITIES_SIGN_C_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_HIGH, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_SIGN_C_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_LOW, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_SIGN_C_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_LOW_ASPHALT, tmp_roof)
	}, $1, PLT_TYPE_B, {
		LAYOUT_TEMPLATE_FACILITIES_SIGN_C_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_HIGH, $2, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_SIGN_C_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_LOW, $2, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_SIGN_C_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_LOW_ASPHALT, $2, tmp_roof)
	})
})

define(LAYOUT_SIGN_C_HP_A, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_A, PLT_TYPE_HIGH)})
define(LAYOUT_SIGN_C_HP_B, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_B, PLT_TYPE_HIGH)})
define(LAYOUT_SIGN_C_HP_C, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_C, PLT_TYPE_HIGH)})
define(LAYOUT_SIGN_C_HP_A_RF_A, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_A, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_SIGN_C_HP_B_RF_A, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_B, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_SIGN_C_HP_C_RF_A, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_C, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_SIGN_C_HP_A_RF_B, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_A, PLT_TYPE_HIGH, ROOF_TYPE_B)})
define(LAYOUT_SIGN_C_HP_B_RF_B, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_B, PLT_TYPE_HIGH, ROOF_TYPE_B)})
define(LAYOUT_SIGN_C_HP_C_RF_B, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_C, PLT_TYPE_HIGH, ROOF_TYPE_B)})
define(LAYOUT_SIGN_C_LP_A, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_A, PLT_TYPE_LOW)})
define(LAYOUT_SIGN_C_LP_B, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_B, PLT_TYPE_LOW)})
define(LAYOUT_SIGN_C_LP_C, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_C, PLT_TYPE_LOW)})
define(LAYOUT_SIGN_C_LP_A_RF_A, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_A, PLT_TYPE_LOW, ROOF_TYPE_A)})
define(LAYOUT_SIGN_C_LP_B_RF_A, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_B, PLT_TYPE_LOW, ROOF_TYPE_A)})
define(LAYOUT_SIGN_C_LP_C_RF_A, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_C, PLT_TYPE_LOW, ROOF_TYPE_A)})
define(LAYOUT_SIGN_C_LP_A_RF_B, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_A, PLT_TYPE_LOW, ROOF_TYPE_B)})
define(LAYOUT_SIGN_C_LP_B_RF_B, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_B, PLT_TYPE_LOW, ROOF_TYPE_B)})
define(LAYOUT_SIGN_C_LP_C_RF_B, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_C, PLT_TYPE_LOW, ROOF_TYPE_B)})
define(LAYOUT_SIGN_C_LAP_A, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_A, PLT_TYPE_LOW_ASPHALT)})
define(LAYOUT_SIGN_C_LAP_B, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_B, PLT_TYPE_LOW_ASPHALT)})
define(LAYOUT_SIGN_C_LAP_C, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_C, PLT_TYPE_LOW_ASPHALT)})
define(LAYOUT_SIGN_C_LAP_A_RF_A, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_A, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_A)})
define(LAYOUT_SIGN_C_LAP_B_RF_A, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_B, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_A)})
define(LAYOUT_SIGN_C_LAP_C_RF_A, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_C, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_A)})
define(LAYOUT_SIGN_C_LAP_A_RF_B, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_A, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_B)})
define(LAYOUT_SIGN_C_LAP_B_RF_B, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_B, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_B)})
define(LAYOUT_SIGN_C_LAP_C_RF_B, {LAYOUT_TEMPLATE_FACILITIES_SIGN_C(PLT_TYPE_C, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_B)})


define(LAYOUT_TEMPLATE_FACILITIES_LED_BASE, {
	define({tmp_ground}, {ifelse($1, PLT_TYPE_MULTI, $5, $4)})
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	xtile({
		tmp_ground
		platform_base($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), eval(tmp_roof != ROOF_TYPE_NONE))
		spritelayout_led($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof)
		spritelayout_roof(tmp_roof, $1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}))
	})
})

define(LAYOUT_TEMPLATE_FACILITIES_LED_SINGLE, {
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	LAYOUT_TEMPLATE_FACILITIES_LED_BASE($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof, {spritelayout_ground()})
	LAYOUT_TEMPLATE_FACILITIES_LED_BASE($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof, {spritelayout_ground_snow()})
})

define(LAYOUT_TEMPLATE_FACILITIES_LED, {
	define({tmp_roof}, {ifelse(eval($#>2), 1, $3, ROOF_TYPE_NONE)})
	LAYOUT_TEMPLATE_FACILITIES_LED_SINGLE($1, $2, tmp_roof)
	ifelse($1, PLT_TYPE_A, {
		LAYOUT_TEMPLATE_FACILITIES_LED_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_HIGH, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_LED_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_LOW, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_LED_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_LOW_ASPHALT, tmp_roof)
	}, $1, PLT_TYPE_B, {
		LAYOUT_TEMPLATE_FACILITIES_LED_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_HIGH, $2, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_LED_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_LOW, $2, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_LED_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_LOW_ASPHALT, $2, tmp_roof)
	})
})

define(LAYOUT_LED_HP_A_RF_A, {LAYOUT_TEMPLATE_FACILITIES_LED(PLT_TYPE_A, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_LED_HP_B_RF_A, {LAYOUT_TEMPLATE_FACILITIES_LED(PLT_TYPE_B, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_LED_HP_C_RF_A, {LAYOUT_TEMPLATE_FACILITIES_LED(PLT_TYPE_C, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_LED_HP_A_RF_B, {LAYOUT_TEMPLATE_FACILITIES_LED(PLT_TYPE_A, PLT_TYPE_HIGH, ROOF_TYPE_B)})
define(LAYOUT_LED_HP_B_RF_B, {LAYOUT_TEMPLATE_FACILITIES_LED(PLT_TYPE_B, PLT_TYPE_HIGH, ROOF_TYPE_B)})
define(LAYOUT_LED_HP_C_RF_B, {LAYOUT_TEMPLATE_FACILITIES_LED(PLT_TYPE_C, PLT_TYPE_HIGH, ROOF_TYPE_B)})
define(LAYOUT_LED_LP_A_RF_A, {LAYOUT_TEMPLATE_FACILITIES_LED(PLT_TYPE_A, PLT_TYPE_LOW, ROOF_TYPE_A)})
define(LAYOUT_LED_LP_B_RF_A, {LAYOUT_TEMPLATE_FACILITIES_LED(PLT_TYPE_B, PLT_TYPE_LOW, ROOF_TYPE_A)})
define(LAYOUT_LED_LP_C_RF_A, {LAYOUT_TEMPLATE_FACILITIES_LED(PLT_TYPE_C, PLT_TYPE_LOW, ROOF_TYPE_A)})
define(LAYOUT_LED_LP_A_RF_B, {LAYOUT_TEMPLATE_FACILITIES_LED(PLT_TYPE_A, PLT_TYPE_LOW, ROOF_TYPE_B)})
define(LAYOUT_LED_LP_B_RF_B, {LAYOUT_TEMPLATE_FACILITIES_LED(PLT_TYPE_B, PLT_TYPE_LOW, ROOF_TYPE_B)})
define(LAYOUT_LED_LP_C_RF_B, {LAYOUT_TEMPLATE_FACILITIES_LED(PLT_TYPE_C, PLT_TYPE_LOW, ROOF_TYPE_B)})
define(LAYOUT_LED_LAP_A_RF_A, {LAYOUT_TEMPLATE_FACILITIES_LED(PLT_TYPE_A, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_A)})
define(LAYOUT_LED_LAP_B_RF_A, {LAYOUT_TEMPLATE_FACILITIES_LED(PLT_TYPE_B, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_A)})
define(LAYOUT_LED_LAP_C_RF_A, {LAYOUT_TEMPLATE_FACILITIES_LED(PLT_TYPE_C, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_A)})
define(LAYOUT_LED_LAP_A_RF_B, {LAYOUT_TEMPLATE_FACILITIES_LED(PLT_TYPE_A, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_B)})
define(LAYOUT_LED_LAP_B_RF_B, {LAYOUT_TEMPLATE_FACILITIES_LED(PLT_TYPE_B, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_B)})
define(LAYOUT_LED_LAP_C_RF_B, {LAYOUT_TEMPLATE_FACILITIES_LED(PLT_TYPE_C, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_B)})


define(LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM_BASE, {
	define({tmp_ground}, {ifelse($1, PLT_TYPE_MULTI, $5, $4)})
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	xtile({
		tmp_ground
		platform_base($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), eval(tmp_roof != ROOF_TYPE_NONE))
		spritelayout_waitingroom($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof)
		spritelayout_roof(tmp_roof, $1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}))
	})
})

define(LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM_SINGLE, {
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM_BASE($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof, {spritelayout_ground()})
	LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM_BASE($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof, {spritelayout_ground_snow()})
})

define(LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM, {
	define({tmp_roof}, {ifelse(eval($#>2), 1, $3, ROOF_TYPE_NONE)})
	LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM_SINGLE($1, $2, tmp_roof)
	ifelse($1, PLT_TYPE_A, {
		LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_HIGH, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_LOW, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_LOW_ASPHALT, tmp_roof)
	}, $1, PLT_TYPE_B, {
		LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_HIGH, $2, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_LOW, $2, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_LOW_ASPHALT, $2, tmp_roof)
	})
})

define(LAYOUT_WAITINGROOM_HP_A, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_A, PLT_TYPE_HIGH)})
define(LAYOUT_WAITINGROOM_HP_B, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_B, PLT_TYPE_HIGH)})
define(LAYOUT_WAITINGROOM_HP_C, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_C, PLT_TYPE_HIGH)})
define(LAYOUT_WAITINGROOM_HP_A_RF_A, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_A, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_WAITINGROOM_HP_B_RF_A, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_B, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_WAITINGROOM_HP_C_RF_A, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_C, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_WAITINGROOM_HP_A_RF_B, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_A, PLT_TYPE_HIGH, ROOF_TYPE_B)})
define(LAYOUT_WAITINGROOM_HP_B_RF_B, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_B, PLT_TYPE_HIGH, ROOF_TYPE_B)})
define(LAYOUT_WAITINGROOM_HP_C_RF_B, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_C, PLT_TYPE_HIGH, ROOF_TYPE_B)})
define(LAYOUT_WAITINGROOM_LP_A, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_A, PLT_TYPE_LOW)})
define(LAYOUT_WAITINGROOM_LP_B, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_B, PLT_TYPE_LOW)})
define(LAYOUT_WAITINGROOM_LP_C, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_C, PLT_TYPE_LOW)})
define(LAYOUT_WAITINGROOM_LP_A_RF_A, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_A, PLT_TYPE_LOW, ROOF_TYPE_A)})
define(LAYOUT_WAITINGROOM_LP_B_RF_A, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_B, PLT_TYPE_LOW, ROOF_TYPE_A)})
define(LAYOUT_WAITINGROOM_LP_C_RF_A, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_C, PLT_TYPE_LOW, ROOF_TYPE_A)})
define(LAYOUT_WAITINGROOM_LP_A_RF_B, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_A, PLT_TYPE_LOW, ROOF_TYPE_B)})
define(LAYOUT_WAITINGROOM_LP_B_RF_B, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_B, PLT_TYPE_LOW, ROOF_TYPE_B)})
define(LAYOUT_WAITINGROOM_LP_C_RF_B, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_C, PLT_TYPE_LOW, ROOF_TYPE_B)})
define(LAYOUT_WAITINGROOM_LAP_A, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_A, PLT_TYPE_LOW_ASPHALT)})
define(LAYOUT_WAITINGROOM_LAP_B, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_B, PLT_TYPE_LOW_ASPHALT)})
define(LAYOUT_WAITINGROOM_LAP_C, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_C, PLT_TYPE_LOW_ASPHALT)})
define(LAYOUT_WAITINGROOM_LAP_A_RF_A, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_A, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_A)})
define(LAYOUT_WAITINGROOM_LAP_B_RF_A, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_B, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_A)})
define(LAYOUT_WAITINGROOM_LAP_C_RF_A, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_C, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_A)})
define(LAYOUT_WAITINGROOM_LAP_A_RF_B, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_A, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_B)})
define(LAYOUT_WAITINGROOM_LAP_B_RF_B, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_B, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_B)})
define(LAYOUT_WAITINGROOM_LAP_C_RF_B, {LAYOUT_TEMPLATE_FACILITIES_WAITINGROOM(PLT_TYPE_C, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_B)})


define(LAYOUT_TEMPLATE_FACILITIES_LIGHT_BASE, {
	define({tmp_ground}, {ifelse($1, PLT_TYPE_MULTI, $5, $4)})
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	xtile({
		tmp_ground
		platform_base($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), eval(tmp_roof != ROOF_TYPE_NONE))
		spritelayout_light($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof)
		spritelayout_roof(tmp_roof, $1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}))
	})
})

define(LAYOUT_TEMPLATE_FACILITIES_LIGHT_SINGLE, {
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	LAYOUT_TEMPLATE_FACILITIES_LIGHT_BASE($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof, {spritelayout_ground()})
	LAYOUT_TEMPLATE_FACILITIES_LIGHT_BASE($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof, {spritelayout_ground_snow()})
})

define(LAYOUT_TEMPLATE_FACILITIES_LIGHT, {
	define({tmp_roof}, {ifelse(eval($#>2), 1, $3, ROOF_TYPE_NONE)})
	LAYOUT_TEMPLATE_FACILITIES_LIGHT_SINGLE($1, $2, tmp_roof)
	ifelse($1, PLT_TYPE_A, {
		LAYOUT_TEMPLATE_FACILITIES_LIGHT_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_HIGH, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_LIGHT_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_LOW, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_LIGHT_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_LOW_ASPHALT, tmp_roof)
	}, $1, PLT_TYPE_B, {
		LAYOUT_TEMPLATE_FACILITIES_LIGHT_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_HIGH, $2, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_LIGHT_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_LOW, $2, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_LIGHT_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_LOW_ASPHALT, $2, tmp_roof)
	})
})

define(LAYOUT_LIGHT_HP_A, {LAYOUT_TEMPLATE_FACILITIES_LIGHT(PLT_TYPE_A, PLT_TYPE_HIGH)})
define(LAYOUT_LIGHT_HP_B, {LAYOUT_TEMPLATE_FACILITIES_LIGHT(PLT_TYPE_B, PLT_TYPE_HIGH)})
define(LAYOUT_LIGHT_HP_C, {LAYOUT_TEMPLATE_FACILITIES_LIGHT(PLT_TYPE_C, PLT_TYPE_HIGH)})
define(LAYOUT_LIGHT_LP_A, {LAYOUT_TEMPLATE_FACILITIES_LIGHT(PLT_TYPE_A, PLT_TYPE_LOW)})
define(LAYOUT_LIGHT_LP_B, {LAYOUT_TEMPLATE_FACILITIES_LIGHT(PLT_TYPE_B, PLT_TYPE_LOW)})
define(LAYOUT_LIGHT_LP_C, {LAYOUT_TEMPLATE_FACILITIES_LIGHT(PLT_TYPE_C, PLT_TYPE_LOW)})
define(LAYOUT_LIGHT_LAP_A, {LAYOUT_TEMPLATE_FACILITIES_LIGHT(PLT_TYPE_A, PLT_TYPE_LOW_ASPHALT)})
define(LAYOUT_LIGHT_LAP_B, {LAYOUT_TEMPLATE_FACILITIES_LIGHT(PLT_TYPE_B, PLT_TYPE_LOW_ASPHALT)})
define(LAYOUT_LIGHT_LAP_C, {LAYOUT_TEMPLATE_FACILITIES_LIGHT(PLT_TYPE_C, PLT_TYPE_LOW_ASPHALT)})


define(LAYOUT_TEMPLATE_FACILITIES_UNDERPASS_BASE, {
	define({tmp_ground}, {ifelse($1, PLT_TYPE_MULTI, $5, $4)})
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	xtile({
		tmp_ground
		platform_base($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), eval(tmp_roof != ROOF_TYPE_NONE))
		spritelayout_underpass($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof)
		spritelayout_roof(tmp_roof, $1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}))
	})
})

define(LAYOUT_TEMPLATE_FACILITIES_UNDERPASS_SINGLE, {
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	LAYOUT_TEMPLATE_FACILITIES_UNDERPASS_BASE($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof, {spritelayout_ground()})
	LAYOUT_TEMPLATE_FACILITIES_UNDERPASS_BASE($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof, {spritelayout_ground_snow()})
})

define(LAYOUT_TEMPLATE_FACILITIES_UNDERPASS, {
	define({tmp_roof}, {ifelse(eval($#>2), 1, $3, ROOF_TYPE_NONE)})
	LAYOUT_TEMPLATE_FACILITIES_UNDERPASS_SINGLE($1, $2, tmp_roof)
	ifelse($1, PLT_TYPE_A, {
		LAYOUT_TEMPLATE_FACILITIES_UNDERPASS_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_HIGH, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_UNDERPASS_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_LOW, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_UNDERPASS_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_LOW_ASPHALT, tmp_roof)
	}, $1, PLT_TYPE_B, {
		LAYOUT_TEMPLATE_FACILITIES_UNDERPASS_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_HIGH, $2, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_UNDERPASS_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_LOW, $2, tmp_roof)
		LAYOUT_TEMPLATE_FACILITIES_UNDERPASS_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_LOW_ASPHALT, $2, tmp_roof)
	})
})

define(LAYOUT_UNDERPASS_HP_A_RF_A, {LAYOUT_TEMPLATE_FACILITIES_UNDERPASS(PLT_TYPE_A, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_UNDERPASS_HP_B_RF_A, {LAYOUT_TEMPLATE_FACILITIES_UNDERPASS(PLT_TYPE_B, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_UNDERPASS_HP_C_RF_A, {LAYOUT_TEMPLATE_FACILITIES_UNDERPASS(PLT_TYPE_C, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_UNDERPASS_HP_A_RF_B, {LAYOUT_TEMPLATE_FACILITIES_UNDERPASS(PLT_TYPE_A, PLT_TYPE_HIGH, ROOF_TYPE_B)})
define(LAYOUT_UNDERPASS_HP_B_RF_B, {LAYOUT_TEMPLATE_FACILITIES_UNDERPASS(PLT_TYPE_B, PLT_TYPE_HIGH, ROOF_TYPE_B)})
define(LAYOUT_UNDERPASS_HP_C_RF_B, {LAYOUT_TEMPLATE_FACILITIES_UNDERPASS(PLT_TYPE_C, PLT_TYPE_HIGH, ROOF_TYPE_B)})
define(LAYOUT_UNDERPASS_LP_A_RF_A, {LAYOUT_TEMPLATE_FACILITIES_UNDERPASS(PLT_TYPE_A, PLT_TYPE_LOW, ROOF_TYPE_A)})
define(LAYOUT_UNDERPASS_LP_B_RF_A, {LAYOUT_TEMPLATE_FACILITIES_UNDERPASS(PLT_TYPE_B, PLT_TYPE_LOW, ROOF_TYPE_A)})
define(LAYOUT_UNDERPASS_LP_C_RF_A, {LAYOUT_TEMPLATE_FACILITIES_UNDERPASS(PLT_TYPE_C, PLT_TYPE_LOW, ROOF_TYPE_A)})
define(LAYOUT_UNDERPASS_LP_A_RF_B, {LAYOUT_TEMPLATE_FACILITIES_UNDERPASS(PLT_TYPE_A, PLT_TYPE_LOW, ROOF_TYPE_B)})
define(LAYOUT_UNDERPASS_LP_B_RF_B, {LAYOUT_TEMPLATE_FACILITIES_UNDERPASS(PLT_TYPE_B, PLT_TYPE_LOW, ROOF_TYPE_B)})
define(LAYOUT_UNDERPASS_LP_C_RF_B, {LAYOUT_TEMPLATE_FACILITIES_UNDERPASS(PLT_TYPE_C, PLT_TYPE_LOW, ROOF_TYPE_B)})
define(LAYOUT_UNDERPASS_LAP_A_RF_A, {LAYOUT_TEMPLATE_FACILITIES_UNDERPASS(PLT_TYPE_A, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_A)})
define(LAYOUT_UNDERPASS_LAP_B_RF_A, {LAYOUT_TEMPLATE_FACILITIES_UNDERPASS(PLT_TYPE_B, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_A)})
define(LAYOUT_UNDERPASS_LAP_C_RF_A, {LAYOUT_TEMPLATE_FACILITIES_UNDERPASS(PLT_TYPE_C, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_A)})
define(LAYOUT_UNDERPASS_LAP_A_RF_B, {LAYOUT_TEMPLATE_FACILITIES_UNDERPASS(PLT_TYPE_A, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_B)})
define(LAYOUT_UNDERPASS_LAP_B_RF_B, {LAYOUT_TEMPLATE_FACILITIES_UNDERPASS(PLT_TYPE_B, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_B)})
define(LAYOUT_UNDERPASS_LAP_C_RF_B, {LAYOUT_TEMPLATE_FACILITIES_UNDERPASS(PLT_TYPE_C, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_B)})


define(LAYOUT_TEMPLATE_PSD_BASE, {
	define({tmp_ground}, {ifelse($1, PLT_TYPE_MULTI, $5, $4)})
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	xtile({
		tmp_ground
		platform_base($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), eval(tmp_roof != ROOF_TYPE_NONE))
		spritelayout_psd($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof)
		spritelayout_roof(tmp_roof, $1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}))
	})
})

define(LAYOUT_TEMPLATE_PSD_SINGLE, {
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	LAYOUT_TEMPLATE_PSD_BASE($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof, {spritelayout_ground()})
	LAYOUT_TEMPLATE_PSD_BASE($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof, {spritelayout_ground_snow()})
})

define(LAYOUT_TEMPLATE_PSD, {
	define({tmp_roof}, {ifelse(eval($#>2), 1, $3, ROOF_TYPE_NONE)})
	LAYOUT_TEMPLATE_PSD_SINGLE($1, $2, tmp_roof)
	ifelse($1, PLT_TYPE_A, {
		LAYOUT_TEMPLATE_PSD_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_HIGH, tmp_roof)
		LAYOUT_TEMPLATE_PSD_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_LOW, tmp_roof)
		LAYOUT_TEMPLATE_PSD_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_LOW_ASPHALT, tmp_roof)
	}, $1, PLT_TYPE_B, {
		LAYOUT_TEMPLATE_PSD_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_HIGH, $2, tmp_roof)
		LAYOUT_TEMPLATE_PSD_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_LOW, $2, tmp_roof)
		LAYOUT_TEMPLATE_PSD_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_LOW_ASPHALT, $2, tmp_roof)
	})
})

define(LAYOUT_PSD_HP_A, {LAYOUT_TEMPLATE_PSD(PLT_TYPE_A, PLT_TYPE_HIGH)})
define(LAYOUT_PSD_HP_B, {LAYOUT_TEMPLATE_PSD(PLT_TYPE_B, PLT_TYPE_HIGH)})
define(LAYOUT_PSD_HP_C, {LAYOUT_TEMPLATE_PSD(PLT_TYPE_C, PLT_TYPE_HIGH)})
define(LAYOUT_PSD_HP_A_RF_A, {LAYOUT_TEMPLATE_PSD(PLT_TYPE_A, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_PSD_HP_B_RF_A, {LAYOUT_TEMPLATE_PSD(PLT_TYPE_B, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_PSD_HP_C_RF_A, {LAYOUT_TEMPLATE_PSD(PLT_TYPE_C, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_PSD_HP_A_RF_B, {LAYOUT_TEMPLATE_PSD(PLT_TYPE_A, PLT_TYPE_HIGH, ROOF_TYPE_B)})
define(LAYOUT_PSD_HP_B_RF_B, {LAYOUT_TEMPLATE_PSD(PLT_TYPE_B, PLT_TYPE_HIGH, ROOF_TYPE_B)})
define(LAYOUT_PSD_HP_C_RF_B, {LAYOUT_TEMPLATE_PSD(PLT_TYPE_C, PLT_TYPE_HIGH, ROOF_TYPE_B)})


define(LAYOUT_TEMPLATE_PSD_OVERPASS_BASE, {
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	define({tmp_ground}, {ifelse($1, PLT_TYPE_MULTI, $5, $4)})
	xtile({
		tmp_ground
		ifelse($1, PLT_TYPE_NONE, {}, {platform_base($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), SHADOW_TRUE)})
		spritelayout_psd($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof)
		spritelayout_overpass($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), spritelayout_roof(tmp_roof, $1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), ROOF_TYPE_OVERPASS))
	})
	ifelse($1, PLT_TYPE_NONE, {}, {
		forloop(X, {
			xtile({
				tmp_ground
				platform_base($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), eval(tmp_roof != ROOF_TYPE_NONE))
				spritelayout_overpass_guide($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), X, eval(tmp_roof != ROOF_TYPE_NONE))
				spritelayout_psd($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof)
				spritelayout_roof(tmp_roof, $1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}))
			})
		}, OVERPASS_GUIDE_FRONT .. OVERPASS_GUIDE_BACK)
	})
})

define(LAYOUT_TEMPLATE_PSD_OVERPASS_SINGLE, {
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	LAYOUT_TEMPLATE_PSD_OVERPASS_BASE($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof, {spritelayout_ground()})
	LAYOUT_TEMPLATE_PSD_OVERPASS_BASE($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof, {spritelayout_ground_snow()})
})

define(LAYOUT_TEMPLATE_PSD_OVERPASS, {
	define({tmp_roof}, {ifelse(eval($#>2), 1, $3, ROOF_TYPE_NONE)})
	LAYOUT_TEMPLATE_PSD_OVERPASS_SINGLE($1, $2, tmp_roof)
	ifelse($1, PLT_TYPE_A, {
		LAYOUT_TEMPLATE_PSD_OVERPASS_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_HIGH, tmp_roof)
		LAYOUT_TEMPLATE_PSD_OVERPASS_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_LOW, tmp_roof)
		LAYOUT_TEMPLATE_PSD_OVERPASS_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_LOW_ASPHALT, tmp_roof)
	}, $1, PLT_TYPE_B, {
		LAYOUT_TEMPLATE_PSD_OVERPASS_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_HIGH, $2, tmp_roof)
		LAYOUT_TEMPLATE_PSD_OVERPASS_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_LOW, $2, tmp_roof)
		LAYOUT_TEMPLATE_PSD_OVERPASS_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_LOW_ASPHALT, $2, tmp_roof)
	})
})

define(LAYOUT_PSD_OVERPASS_HP_A, {LAYOUT_TEMPLATE_PSD_OVERPASS(PLT_TYPE_A, PLT_TYPE_HIGH)})
define(LAYOUT_PSD_OVERPASS_HP_B, {LAYOUT_TEMPLATE_PSD_OVERPASS(PLT_TYPE_B, PLT_TYPE_HIGH)})
define(LAYOUT_PSD_OVERPASS_HP_C, {LAYOUT_TEMPLATE_PSD_OVERPASS(PLT_TYPE_C, PLT_TYPE_HIGH)})
define(LAYOUT_PSD_OVERPASS_HP_A_RF_A, {LAYOUT_TEMPLATE_PSD_OVERPASS(PLT_TYPE_A, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_PSD_OVERPASS_HP_B_RF_A, {LAYOUT_TEMPLATE_PSD_OVERPASS(PLT_TYPE_B, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_PSD_OVERPASS_HP_C_RF_A, {LAYOUT_TEMPLATE_PSD_OVERPASS(PLT_TYPE_C, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_PSD_OVERPASS_HP_A_RF_B, {LAYOUT_TEMPLATE_PSD_OVERPASS(PLT_TYPE_A, PLT_TYPE_HIGH, ROOF_TYPE_B)})
define(LAYOUT_PSD_OVERPASS_HP_B_RF_B, {LAYOUT_TEMPLATE_PSD_OVERPASS(PLT_TYPE_B, PLT_TYPE_HIGH, ROOF_TYPE_B)})
define(LAYOUT_PSD_OVERPASS_HP_C_RF_B, {LAYOUT_TEMPLATE_PSD_OVERPASS(PLT_TYPE_C, PLT_TYPE_HIGH, ROOF_TYPE_B)})


define(LAYOUT_TEMPLATE_PSD_MODULAR_OVERPASS_SINGLE, {
	define({tmp_modular_type}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	xtile({
		spritelayout_ground()
		ifelse($1, PLT_TYPE_NONE, {}, {platform_base($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), SHADOW_TRUE)})
		spritelayout_psd($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof)
		building_overpass_pole($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}))
		spritelayout_building_overpass(tmp_modular_type)
	})
})

define(LAYOUT_TEMPLATE_PSD_MODULAR_OVERPASS, {
	LAYOUT_TEMPLATE_MODULAR_OVERPASS_SINGLE($1, $2, $3) 
	ifelse($1, PLT_TYPE_A, {
		LAYOUT_TEMPLATE_MODULAR_OVERPASS_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_HIGH, $3)
		LAYOUT_TEMPLATE_MODULAR_OVERPASS_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_LOW, $3)
		LAYOUT_TEMPLATE_MODULAR_OVERPASS_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_LOW_ASPHALT, $3)
	}, $1, PLT_TYPE_B, {
		LAYOUT_TEMPLATE_MODULAR_OVERPASS_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_HIGH, $2, $3)
		LAYOUT_TEMPLATE_MODULAR_OVERPASS_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_LOW, $2, $3)
		LAYOUT_TEMPLATE_MODULAR_OVERPASS_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_LOW_ASPHALT, $2, $3)
	})
})

define(LAYOUT_PSD_MODULAR_LOW_HP_A, {LAYOUT_TEMPLATE_PSD_MODULAR_OVERPASS(PLT_TYPE_A, PLT_TYPE_HIGH, MODULAR_TYPE_LOW)})
define(LAYOUT_PSD_MODULAR_LOW_HP_B, {LAYOUT_TEMPLATE_PSD_MODULAR_OVERPASS(PLT_TYPE_B, PLT_TYPE_HIGH, MODULAR_TYPE_LOW)})
define(LAYOUT_PSD_MODULAR_LOW_HP_C, {LAYOUT_TEMPLATE_PSD_MODULAR_OVERPASS(PLT_TYPE_C, PLT_TYPE_HIGH, MODULAR_TYPE_LOW)})

define(LAYOUT_PSD_MODULAR_HIGH_HP_A, {LAYOUT_TEMPLATE_PSD_MODULAR_OVERPASS(PLT_TYPE_A, PLT_TYPE_HIGH, MODULAR_TYPE_HIGH)})
define(LAYOUT_PSD_MODULAR_HIGH_HP_B, {LAYOUT_TEMPLATE_PSD_MODULAR_OVERPASS(PLT_TYPE_B, PLT_TYPE_HIGH, MODULAR_TYPE_HIGH)})
define(LAYOUT_PSD_MODULAR_HIGH_HP_C, {LAYOUT_TEMPLATE_PSD_MODULAR_OVERPASS(PLT_TYPE_C, PLT_TYPE_HIGH, MODULAR_TYPE_HIGH)})



define(LAYOUT_TEMPLATE_PSD_UNDERPASS_BASE, {
	define({tmp_ground}, {ifelse($1, PLT_TYPE_MULTI, $5, $4)})
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	xtile({
		tmp_ground
		platform_base($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), eval(tmp_roof != ROOF_TYPE_NONE))
		spritelayout_underpass($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof)
		spritelayout_psd($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof)
		spritelayout_roof(tmp_roof, $1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}))
	})
})

define(LAYOUT_TEMPLATE_PSD_UNDERPASS_SINGLE, {
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	LAYOUT_TEMPLATE_PSD_UNDERPASS_BASE($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof, {spritelayout_ground()})
	LAYOUT_TEMPLATE_PSD_UNDERPASS_BASE($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof, {spritelayout_ground_snow()})
})

define(LAYOUT_TEMPLATE_PSD_UNDERPASS, {
	define({tmp_roof}, {ifelse(eval($#>2), 1, $3, ROOF_TYPE_NONE)})
	LAYOUT_TEMPLATE_PSD_UNDERPASS_SINGLE($1, $2, tmp_roof)
	ifelse($1, PLT_TYPE_A, {
		LAYOUT_TEMPLATE_PSD_UNDERPASS_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_HIGH, tmp_roof)
		LAYOUT_TEMPLATE_PSD_UNDERPASS_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_LOW, tmp_roof)
		LAYOUT_TEMPLATE_PSD_UNDERPASS_SINGLE(PLT_TYPE_MULTI, $2, PLT_TYPE_LOW_ASPHALT, tmp_roof)
	}, $1, PLT_TYPE_B, {
		LAYOUT_TEMPLATE_PSD_UNDERPASS_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_HIGH, $2, tmp_roof)
		LAYOUT_TEMPLATE_PSD_UNDERPASS_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_LOW, $2, tmp_roof)
		LAYOUT_TEMPLATE_PSD_UNDERPASS_SINGLE(PLT_TYPE_MULTI, PLT_TYPE_LOW_ASPHALT, $2, tmp_roof)
	})
})

define(LAYOUT_TEMPLATE_PSD_UNDERPASS_SNOW, {
	define({tmp_roof}, {ifelse(eval($#>2), 1, $3, ROOF_TYPE_NONE)})
	LAYOUT_TEMPLATE_PSD_UNDERPASS($1, $2, tmp_roof, {spritelayout_ground()})
	LAYOUT_TEMPLATE_PSD_UNDERPASS($1, $2, tmp_roof, {spritelayout_ground_snow()})
})

define(LAYOUT_PSD_UNDERPASS_HP_A_RF_A, {LAYOUT_TEMPLATE_PSD_UNDERPASS_SNOW(PLT_TYPE_A, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_PSD_UNDERPASS_HP_B_RF_A, {LAYOUT_TEMPLATE_PSD_UNDERPASS_SNOW(PLT_TYPE_B, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_PSD_UNDERPASS_HP_C_RF_A, {LAYOUT_TEMPLATE_PSD_UNDERPASS_SNOW(PLT_TYPE_C, PLT_TYPE_HIGH, ROOF_TYPE_A)})
define(LAYOUT_PSD_UNDERPASS_HP_A_RF_B, {LAYOUT_TEMPLATE_PSD_UNDERPASS_SNOW(PLT_TYPE_A, PLT_TYPE_HIGH, ROOF_TYPE_B)})
define(LAYOUT_PSD_UNDERPASS_HP_B_RF_B, {LAYOUT_TEMPLATE_PSD_UNDERPASS_SNOW(PLT_TYPE_B, PLT_TYPE_HIGH, ROOF_TYPE_B)})
define(LAYOUT_PSD_UNDERPASS_HP_C_RF_B, {LAYOUT_TEMPLATE_PSD_UNDERPASS_SNOW(PLT_TYPE_C, PLT_TYPE_HIGH, ROOF_TYPE_B)})