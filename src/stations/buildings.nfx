// building blocks

include(src/includes/constants.m4)
include(src/includes/functions.m4)

import(m4_sprite)

asl_on()

include(src/stations/switches.m4)
include(src/stations/layouts/layouts.m4)
include(src/stations/layouts/roofs.m4)
include(src/stations/layouts/platforms.m4)
include(src/stations/layouts/buildings.m4)

setfeature(_STATION)

deflabel(LABEL_HIGHPLATFORM_MODE)


forloop(X, {
definestation(X, "",
	class(CLASS_MODULAR)
	nontrack(TTD_ALLTILES)
	nowires(TTD_ALLTILES)
)}, MODULAR_LOW .. MODULAR_HIGH)

// layouts
define(LAYOUT_TEMPLATE_MODULAR, {
	tile(
		spritelayout_ground_building(ORIENT_NE)
		spritelayout_building($1, ORIENT_NE)
	)
	tile(
		spritelayout_ground_building(ORIENT_NW)
		spritelayout_building($1, ORIENT_NW)
	)
})

layout(MODULAR_LOW, LAYOUT_TEMPLATE_MODULAR(MODULAR_TYPE_LOW))
layout(MODULAR_HIGH, LAYOUT_TEMPLATE_MODULAR(MODULAR_TYPE_HIGH))

// switches
def(40, sw_building_nearby_info_parallel) calculate({register(REGISTER_BUILDING_POS) RESTORE tinfo_statid(REGISTER,) AND 0x800},
	cbr(2) if(0x800)
	cbr(1) else
)

def(41, sw_building_nearby_info_part1) calculate({register(REGISTER_BUILDING_POS) RESTORE tinfo_statid(REGISTER,) AND 0xFF},
	ref(sw_building_nearby_info_parallel) if(MODULAR_LOW .. MODULAR_HIGH)
	cbr(0) else
)

def(42, sw_building_nearby_info) calculate({register(REGISTER_BUILDING_POS) RESTORE tinfo_grfid(REGISTER,)},
	ref(sw_building_nearby_info_part1) if(label(GRFID_KWS_PART1))
	cbr(0) else
)

def(43, sw_building_register_sub_snow) subroutine(sw_terrain_snow,
	cbr(spr_building_low_snow - spr_building_low) if(1)
	cbr(0) else
)

// sw_building_layout_single_sub3
def(44) calculate({0xFF store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(7) if(1,2)
	cbr(8) else
)

def(45) tinfo_trackexist(0x3,
	cbr(4) if(1)
	cbr(3) if(2)
	cbr(1) else
)

def(46, sw_building_layout_single_sub3) calculate({0xF0 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(10) if(1)
	ref(44) if(2)
	ref(45) else
)

// sw_building_layout_single_sub2
def(44) calculate({0x11 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(1) if(1,2)
	ref(6) else
)

def(45) tinfo_trackexist(0x3,
	cbr(1) if(2)
	cbr(4) else
)

def(47) calculate({0x11 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	ref(45) if(1,2)
	cbr(6) else
)

def(48) calculate({0x0F store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	ref(44) if(1,2)
	ref(47) else
)

def(49) calculate({0x0F store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(1) if(1,2)
	cbr(4) else
)

def(50) tinfo_trackexist(0x3,
	ref(49) if(1)
	cbr(3) else
)

def(51) calculate({0x01 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	ref(48) if(1,2)
	ref(50) else
)

def(52) calculate({0x1F store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(10) if(1,2)
	cbr(9) else
)

def(53) calculate({0x11 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	ref(52) if(1,2)
	cbr(6) else
)

def(44, sw_building_layout_single_sub2) calculate({0xF0 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	ref(53) if(1)
	cbr(10) if(2)
	ref(51) else
)

// sw_building_layout_single_sub1
def(45) tinfo_trackexist(0x3,
	cbr(0) if(2)
	cbr(5) else
)

def(47) calculate({0x0F store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(0) if(1,2)
	ref(45) else
)

def(48) tinfo_trackexist(0x3,
	cbr(0) if(2)
	cbr(5) else
)

def(49) calculate({0xF1 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	ref(48) if(2)
	cbr(0) else
)

def(50) tinfo_trackexist(0x3,
	cbr(0) if(2)
	ref(49) else
)

def(51) calculate({0x0F store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(0) if(1,2)
	ref(50) else
)

def(52) calculate({0x0F store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(0) if(1,2)
	cbr(5) else
)

def(53) tinfo_trackexist(0x3,
	ref(52) if(1)
	cbr(2) else
)

def(54) calculate({0x01 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	ref(47) if(1)
	ref(51) if(2)
	ref(53) else
)

def(55) tinfo_trackexist(0x3,
	cbr(5) if(1)
	cbr(2) if(2)
	cbr(0) else
)

def(45, sw_building_layout_single_sub1) calculate({0xF0 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	ref(54) if(2)
	ref(55) else
)

def(47, sw_building_layout_single) calculate({0x10 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	ref(sw_building_layout_single_sub3) if(1)
	ref(sw_building_layout_single_sub2) if(2)
	ref(sw_building_layout_single_sub1) else
)

// sw_building_layout_front
def(48) calculate({0x1F store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(10) if(1,2)
	cbr(9) else
)

def(49) calculate({0x11 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	ref(48) if(1,2)
	cbr(6) else
)

def(48, sw_building_layout_front) calculate({0x10 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(10) if(1)
	ref(49) if(2)
	cbr(0) else
)


// sw_building_layout_back
def(49) calculate({0xFF store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(10) if(1,2)
	cbr(8) else
)
def(50) calculate({0xF1 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	ref(49) if(1,2)
	cbr(7) else
)

def(49, sw_building_layout_back) calculate({0xF0 store(REGISTER_BUILDING_POS) subroutine(sw_building_nearby_info)},
	cbr(10) if(1)
	ref(50) if(2)
	cbr(1) else
)

def(50, sw_building_layout) tinfo_trackexist(0xC,
	ref(sw_building_layout_back) if(0x4)
	ref(sw_building_layout_front) if(0x8)
	cbr(10) if(0xC)
	ref(sw_building_layout_single) else
)

def(51, sw_building_x_layout_sub) subroutine(sw_building_layout,
	cbr(0) if(0)
	cbr(2) if(1)
	cbr(4) if(2)
	cbr(5) if(3)
	cbr(6) if(4)
	cbr(7) if(5)
	cbr(8) if(6)
	cbr(9) if(7)
	cbr(10) if(8)
	cbr(11) if(9)
	cbr(12) if(10)
	cbr(0) else
)

def(52, sw_building_y_layout_sub) subroutine(sw_building_layout,
	cbr(1) if(0)
	cbr(3) if(1)
	cbr(4) if(2)
	cbr(7) if(3)
	cbr(6) if(4)
	cbr(5) if(5)
	cbr(8) if(6)
	cbr(11) if(7)
	cbr(10) if(8)
	cbr(9) if(9)
	cbr(13) if(10)
	cbr(0) else
)

def(53, sw_building_ground_x_register_sub2) subroutine(sw_building_layout,
	cbr(2) if(0)
	cbr(4) if(1)
	cbr(6) if(2)
	cbr(7) if(3)
	cbr(8) if(4)
	cbr(9) if(5)
	cbr(10) if(6)
	cbr(11) if(7)
	cbr(12) if(8)
	cbr(13) if(9)
	cbr(0) else
)

def(54, sw_building_ground_y_register_sub2) subroutine(sw_building_layout,
	cbr(3) if(0)
	cbr(5) if(1)
	cbr(6) if(2)
	cbr(9) if(3)
	cbr(8) if(4)
	cbr(7) if(5)
	cbr(10) if(6)
	cbr(13) if(7)
	cbr(12) if(8)
	cbr(11) if(9)
	cbr(0) else
)

def(55, sw_building_ground_x_register_sub) subroutine(sw_terrain_snow,
	ref(sw_building_ground_x_register_sub2) if(1)
	cbr(0) else
)

def(56, sw_building_ground_y_register_sub) subroutine(sw_terrain_snow,
	ref(sw_building_ground_y_register_sub2) if(1)
	cbr(0) else
)

def(57, sw_building_x_register_sub) calculate({subroutine(sw_building_x_layout_sub) + subroutine(sw_building_register_sub_snow)},
	cbfail() else
)

def(58, sw_building_y_register_sub) calculate({subroutine(sw_building_y_layout_sub) + subroutine(sw_building_register_sub_snow)},
	cbfail() else
)

def(59, sw_building_ground_register) setregisters(REGISTER_MODULAR_GROUND_OFFSET, {sub(sw_building_ground_x_register_sub), sub(sw_building_ground_y_register_sub)}, ref(sw_set_registers))
def(60, sw_building_registers) setregisters(REGISTER_MODULAR_OFFSET, {sub(sw_building_x_register_sub), sub(sw_building_y_register_sub)}, ref(sw_building_ground_register))

def(61, sw_building_ground_register_purchase) setregisters(REGISTER_MODULAR_GROUND_OFFSET, {0, 0}, ref(sw_set_registers))
def(62, sw_building_registers_purchase) setregisters(REGISTER_MODULAR_OFFSET, {0, 1}, ref(sw_building_ground_register_purchase))

// spriteset links
forloop(X, {makestation(X, link(ref(sw_building_registers_purchase), MENU) default(ref(sw_building_registers)))}, MODULAR_LOW .. MODULAR_HIGH)



// modular station overpasses

forloop(X, {
definestation(X, "",
	class(CLASS_MODULAR)
	callbacks({CB_LAYOUT})
	setcargotriggers({PASS})
)}, MODULAR_LOW_HP_A .. MODULAR_HIGH_TRACK)


// layouts
define(LAYOUT_TEMPLATE_MODULAR_OVERPASS_SINGLE, {
	define({tmp_modular_type}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	xtile({
		spritelayout_ground()
		ifelse($1, PLT_TYPE_NONE, {}, {platform_base($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), SHADOW_TRUE)})
		building_overpass_pole($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}))
		spritelayout_building_overpass(tmp_modular_type)
	})
})

define(LAYOUT_TEMPLATE_MODULAR_OVERPASS, {LAYOUT_TEMPLATE_MULTI({LAYOUT_TEMPLATE_MODULAR_OVERPASS_SINGLE}, $@)})

layout(MODULAR_LOW_HP_A, LAYOUT_TEMPLATE_MODULAR_OVERPASS(PLT_TYPE_A, PLT_TYPE_HIGH, MODULAR_TYPE_LOW))
layout(MODULAR_LOW_HP_B, LAYOUT_TEMPLATE_MODULAR_OVERPASS(PLT_TYPE_B, PLT_TYPE_HIGH, MODULAR_TYPE_LOW))
layout(MODULAR_LOW_HP_C, LAYOUT_TEMPLATE_MODULAR_OVERPASS(PLT_TYPE_C, PLT_TYPE_HIGH, MODULAR_TYPE_LOW))

layout(MODULAR_HIGH_HP_A, LAYOUT_TEMPLATE_MODULAR_OVERPASS(PLT_TYPE_A, PLT_TYPE_HIGH, MODULAR_TYPE_HIGH))
layout(MODULAR_HIGH_HP_B, LAYOUT_TEMPLATE_MODULAR_OVERPASS(PLT_TYPE_B, PLT_TYPE_HIGH, MODULAR_TYPE_HIGH))
layout(MODULAR_HIGH_HP_C, LAYOUT_TEMPLATE_MODULAR_OVERPASS(PLT_TYPE_C, PLT_TYPE_HIGH, MODULAR_TYPE_HIGH))

layout(MODULAR_LOW_LP_A, LAYOUT_TEMPLATE_MODULAR_OVERPASS(PLT_TYPE_A, PLT_TYPE_LOW, MODULAR_TYPE_LOW))
layout(MODULAR_LOW_LP_B, LAYOUT_TEMPLATE_MODULAR_OVERPASS(PLT_TYPE_B, PLT_TYPE_LOW, MODULAR_TYPE_LOW))
layout(MODULAR_LOW_LP_C, LAYOUT_TEMPLATE_MODULAR_OVERPASS(PLT_TYPE_C, PLT_TYPE_LOW, MODULAR_TYPE_LOW))

layout(MODULAR_HIGH_LP_A, LAYOUT_TEMPLATE_MODULAR_OVERPASS(PLT_TYPE_A, PLT_TYPE_LOW, MODULAR_TYPE_HIGH))
layout(MODULAR_HIGH_LP_B, LAYOUT_TEMPLATE_MODULAR_OVERPASS(PLT_TYPE_B, PLT_TYPE_LOW, MODULAR_TYPE_HIGH))
layout(MODULAR_HIGH_LP_C, LAYOUT_TEMPLATE_MODULAR_OVERPASS(PLT_TYPE_C, PLT_TYPE_LOW, MODULAR_TYPE_HIGH))

layout(MODULAR_LOW_LAP_A, LAYOUT_TEMPLATE_MODULAR_OVERPASS(PLT_TYPE_A, PLT_TYPE_LOW_ASPHALT, MODULAR_TYPE_LOW))
layout(MODULAR_LOW_LAP_B, LAYOUT_TEMPLATE_MODULAR_OVERPASS(PLT_TYPE_B, PLT_TYPE_LOW_ASPHALT, MODULAR_TYPE_LOW))
layout(MODULAR_LOW_LAP_C, LAYOUT_TEMPLATE_MODULAR_OVERPASS(PLT_TYPE_C, PLT_TYPE_LOW_ASPHALT, MODULAR_TYPE_LOW))

layout(MODULAR_HIGH_LAP_A, LAYOUT_TEMPLATE_MODULAR_OVERPASS(PLT_TYPE_A, PLT_TYPE_LOW_ASPHALT, MODULAR_TYPE_HIGH))
layout(MODULAR_HIGH_LAP_B, LAYOUT_TEMPLATE_MODULAR_OVERPASS(PLT_TYPE_B, PLT_TYPE_LOW_ASPHALT, MODULAR_TYPE_HIGH))
layout(MODULAR_HIGH_LAP_C, LAYOUT_TEMPLATE_MODULAR_OVERPASS(PLT_TYPE_C, PLT_TYPE_LOW_ASPHALT, MODULAR_TYPE_HIGH))

layout(MODULAR_LOW_TRACK, LAYOUT_TEMPLATE_MODULAR_OVERPASS(PLT_TYPE_NONE, PLT_TYPE_NONE, MODULAR_TYPE_LOW))
layout(MODULAR_HIGH_TRACK, LAYOUT_TEMPLATE_MODULAR_OVERPASS(PLT_TYPE_NONE, PLT_TYPE_NONE, MODULAR_TYPE_HIGH))

// switches
def(40, sw_modular_overpass_cb) callback(
	ref(sw_modular_overpass_multi_layout) if(CB_LAYOUT)
	ref(sw_modular_overpass_register) else
)

def(41, sw_modular_overpass_cb_purchase) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_modular_overpass_purchase) else
)

forloop(X, {makestation(X, link(ref(sw_modular_overpass_cb_purchase), MENU) default(ref(sw_modular_overpass_cb)))}, MODULAR_LOW_HP_A .. MODULAR_HIGH_HP_C)

skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
	forloop(X, {makestation(X, link(ref(sw_modular_overpass_cb_purchase), MENU) default(ref(sw_modular_overpass_cb)))}, MODULAR_LOW_LP_A .. MODULAR_HIGH_LAP_C)
placelabel(LABEL_HIGHPLATFORM_MODE)

forloop(X, {makestation(X, link(ref(sw_modular_overpass_cb_purchase), MENU) default(ref(sw_modular_overpass_cb)))}, MODULAR_LOW_TRACK .. MODULAR_HIGH_TRACK)



// Simple station
definestation(SIMPLE_STN, "",
	class(CLASS_BUILDINGS)
	callbacks({CB_LAYOUT})
	include_widths({1})
	include_lengths({1})
	nontrack(TTD_ALLTILES)
	nowires(TTD_ALLTILES)
)


layout(SIMPLE_STN, 
	xtile({
		spritelayout_ground_nontrack_concrete()
		regular(spr_simple_stn, xyz(0,0,0), dxdydz(16,16,30))
	})
	xtile({
		spritelayout_ground_nontrack_concrete()
		regular(spr_simple_stn+2, xyz(0,0,0), dxdydz(16,16,30))
	})
)

def(40, sw_simple_station_layout_sub) tinfo_trackconnect(shiftmask(8, 0xC),
	cbr(2) if(4)
	cbr(0) else
)

def(41, sw_simple_station_layout) tinfo_statid(pos(0, 1),
	ref(sw_simple_station_layout_sub) if(0xFFFF)
	cbr(2) else
)

def(42, sw_simple_station_cb) callback(
	ref(sw_simple_station_layout) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

def(43, sw_simple_station_cb_purchase) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

makestation(SIMPLE_STN, link(ref(sw_simple_station_cb_purchase), MENU) default(ref(sw_simple_station_cb)))