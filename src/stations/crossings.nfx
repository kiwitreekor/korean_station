// crossings

include(src/includes/constants.m4)
include(src/includes/functions.m4)

import(m4_sprite)

asl_on()

include(src/stations/switches.m4)
include(src/stations/layouts/layouts.m4)
include(src/stations/layouts/roofs.m4)
include(src/stations/layouts/platforms.m4)
include(src/stations/layouts/platforms_extra.m4)
include(src/stations/layouts/crossings.m4)

setfeature(_STATION)

deflabel(LABEL_HIGHPLATFORM_MODE)

forloop(X, {
definestation(X, "",
	class(CLASS_CROSSINGS)
	callbacks({CB_LAYOUT, CB_AFRAME})
	setcargotriggers({PASS})
	anim_triggers({BUILT})
)}, CROSSING_LP_A .. CROSSING_LAP_C_RF_B)

// layouts
layout(CROSSING_LP_A, LAYOUT_TEMPLATE_CROSSING(PLT_TYPE_A, PLT_TYPE_LOW))
layout(CROSSING_LP_B, LAYOUT_TEMPLATE_CROSSING(PLT_TYPE_B, PLT_TYPE_LOW))
layout(CROSSING_LP_C, LAYOUT_TEMPLATE_CROSSING(PLT_TYPE_C, PLT_TYPE_LOW))

layout(CROSSING_LP_A_RF_A, LAYOUT_TEMPLATE_CROSSING(PLT_TYPE_A, PLT_TYPE_LOW, ROOF_TYPE_A))
layout(CROSSING_LP_B_RF_A, LAYOUT_TEMPLATE_CROSSING(PLT_TYPE_B, PLT_TYPE_LOW, ROOF_TYPE_A))
layout(CROSSING_LP_C_RF_A, LAYOUT_TEMPLATE_CROSSING(PLT_TYPE_C, PLT_TYPE_LOW, ROOF_TYPE_A))

layout(CROSSING_LP_A_RF_B, LAYOUT_TEMPLATE_CROSSING(PLT_TYPE_A, PLT_TYPE_LOW, ROOF_TYPE_B))
layout(CROSSING_LP_B_RF_B, LAYOUT_TEMPLATE_CROSSING(PLT_TYPE_B, PLT_TYPE_LOW, ROOF_TYPE_B))
layout(CROSSING_LP_C_RF_B, LAYOUT_TEMPLATE_CROSSING(PLT_TYPE_C, PLT_TYPE_LOW, ROOF_TYPE_B))

layout(CROSSING_LAP_A, LAYOUT_TEMPLATE_CROSSING(PLT_TYPE_A, PLT_TYPE_LOW_ASPHALT))
layout(CROSSING_LAP_B, LAYOUT_TEMPLATE_CROSSING(PLT_TYPE_B, PLT_TYPE_LOW_ASPHALT))
layout(CROSSING_LAP_C, LAYOUT_TEMPLATE_CROSSING(PLT_TYPE_C, PLT_TYPE_LOW_ASPHALT))

layout(CROSSING_LAP_A_RF_A, LAYOUT_TEMPLATE_CROSSING(PLT_TYPE_A, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_A))
layout(CROSSING_LAP_B_RF_A, LAYOUT_TEMPLATE_CROSSING(PLT_TYPE_B, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_A))
layout(CROSSING_LAP_C_RF_A, LAYOUT_TEMPLATE_CROSSING(PLT_TYPE_C, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_A))

layout(CROSSING_LAP_A_RF_B, LAYOUT_TEMPLATE_CROSSING(PLT_TYPE_A, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_B))
layout(CROSSING_LAP_B_RF_B, LAYOUT_TEMPLATE_CROSSING(PLT_TYPE_B, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_B))
layout(CROSSING_LAP_C_RF_B, LAYOUT_TEMPLATE_CROSSING(PLT_TYPE_C, PLT_TYPE_LOW_ASPHALT, ROOF_TYPE_B))

// switches

// sw_crossing_pos
def(40) plt_posrev(
	cbr(2) if(0)
	cbr(0) else
)

def(41) plt_pos(
	cbr(4) if(0)
	ref(40) else
)

def(42, sw_crossing_pos) plt_length(
	cbr(0) if(1)
	ref(41) else
)

def(43, sw_crossing_layout) calculate({subroutine(sw_terrain_snow) * 6 + subroutine(sw_crossing_pos)},
	cbfail() else
)

// multi-platform calculation
def(40, sw_crossing_platformA_multi_layout) calculate({subroutine(sw_platformA_check_opposite) * 12 + subroutine(sw_crossing_layout)},
	cbfail() else
)

def(41, sw_crossing_platformB_multi_layout) calculate({subroutine(sw_platformB_check_opposite) * 12 + subroutine(sw_crossing_layout)},
	cbfail() else
)

def(44, sw_crossing_multi_layout) subroutine(sw_platform_multi_check,
	ref(sw_crossing_platformA_multi_layout) if(1)
	ref(sw_crossing_platformB_multi_layout) if(2)
	ref(sw_crossing_layout) else
)

def(45, sw_crossing_cb) callback(
	ref(sw_crossing_multi_layout) if(CB_LAYOUT)
	ref(sw_crossing_pos) if(CB_ACONTROL, CB_AFRAME)
	ref(sw_set_registers) else
)

def(46, sw_crossing_cb_purchase) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_crossing_cb) else
)

skipif(reflabel(LABEL_HIGHPLATFORM_MODE), getowngrfparameter(PARAM_MODE), ==, PARAM_MODE_HIGHPLATFORM)
forloop(X, {makestation(X, link(ref(sw_crossing_cb_purchase), MENU) default(ref(sw_crossing_cb)))}, CROSSING_LP_A .. CROSSING_LAP_C_RF_B)
placelabel(LABEL_HIGHPLATFORM_MODE)


definestation(CROSSING_TRACK, "",
	class(CLASS_CROSSINGS)
	setcargotriggers({PASS})
	callbacks({CB_LAYOUT, CB_AFRAME})
	anim_triggers(BUILT, PERIODIC)
)

define(LAYOUT_TEMPLATE_CROSSING_TRACK, {
	xtile({
		$1
		regular(spr_crossing, xyz(7,0,0), dxdydz(3,16,0))
	})
	xtile({
		$1
		regular(spr_crossing, xyz(13,0,0), dxdydz(3,16,0))
	})
	xtile({
		$1
		regular(spr_crossing, xyz(0,0,0), dxdydz(3,16,0))
	})
})

layout(CROSSING_TRACK,
	LAYOUT_TEMPLATE_CROSSING_TRACK({spritelayout_ground()})
	LAYOUT_TEMPLATE_CROSSING_TRACK({spritelayout_ground_snow()})
)

def(40, sw_crossing_track_get_frame) anim_frame(pos(0,-1),
	cbr(0) if(0)
	cbr(2) if(2)
	cbr(4) else
)

def(41, sw_crossing_track_layout) tinfo_statid(pos(0,-1),shiftmask(0,0x3FF),
	ref(sw_crossing_track_get_frame) if(0x100+CROSSING_START .. 0x100+CROSSING_END, 0x200+CROSSING_HIGH_START .. 0x200+CROSSING_HIGH_END)
	cbr(0) else
)

def(42, sw_crossing_track_cb) callback(
	ref(sw_crossing_track_layout) if(CB_LAYOUT, CB_ACONTROL, CB_AFRAME)
	ref(sw_set_registers) else
)

def(43, sw_crossing_track_purchase) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_set_registers) else
)
makestation(CROSSING_TRACK, link(ref(sw_crossing_track_purchase), MENU) default(ref(sw_crossing_track_cb)))