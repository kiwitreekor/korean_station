// psd

include(src/includes/constants.m4)
include(src/includes/functions.m4)

import(m4_sprite)

asl_on()

include(src/stations/switches.m4)
include(src/stations/layouts/layouts.m4)
include(src/stations/layouts/roofs.m4)
include(src/stations/layouts/platforms.m4)
include(src/stations/layouts/platforms_extra.m4)
include(src/stations/layouts/buildings.m4)
include(src/stations/layouts/overpasses.m4)
include(src/stations/layouts/facilities.m4)

setfeature(_STATION)

deflabel(LABEL_HIGHPLATFORM_MODE)


// psd + overpass
forloop(X, {
definestation(X, "",
	class(CLASS_PSD)
	callbacks({CB_LAYOUT, CB_AFRAME})
	anim_info({7, NOLOOP})
	anim_speed(3)
	setcargotriggers({PASS})
	anim_triggers({ARRIVE, LEAVE})
	include_lengths({1,2,3})
)}, PSD_OVERPASS_START .. PSD_OVERPASS_END)

// layouts
define(LAYOUT_TEMPLATE_PSD_OVERPASS_BASE, {
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	define({tmp_ground}, {ifelse($1, PLT_TYPE_MULTI, $5, $4)})
	xtile({
		tmp_ground
		ifelse($1, PLT_TYPE_NONE, {}, {platform_base($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), SHADOW_TRUE)})
		ifelse($1, PLT_TYPE_NONE, {}, {spritelayout_fence($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}))})
		spritelayout_psd($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof)
		spritelayout_overpass($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), spritelayout_roof(tmp_roof, $1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), ROOF_TYPE_OVERPASS))
	})
	ifelse($1, PLT_TYPE_NONE, {}, {
		forloop(X, {
			xtile({
				tmp_ground
				platform_base($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), eval(tmp_roof != ROOF_TYPE_NONE))
				spritelayout_fence($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}))
				spritelayout_overpass_guide($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), X, eval(tmp_roof != ROOF_TYPE_NONE))
				spritelayout_psd($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof)
				spritelayout_roof(tmp_roof, $1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}))
			})
		}, OVERPASS_GUIDE_FRONT .. OVERPASS_GUIDE_BACK)
		xtile({
			tmp_ground
			platform_base($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), SHADOW_TRUE)
			spritelayout_psd($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof)
			spritelayout_overpass($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), spritelayout_roof(tmp_roof, $1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), ROOF_TYPE_OVERPASS))
			ifelse(tmp_roof, ROOF_TYPE_A, 
				{_regular(spr_roof_purchaseinfo, _xyz(14, 0, 0), _dxdydz(2, 2, 4))}, 
			tmp_roof, ROOF_TYPE_B, 
				{_regular(spr_roof_purchaseinfo+1, _xyz(14, 0, 0), _dxdydz(2, 2, 4))}
			)
		})
	})
})

define(LAYOUT_TEMPLATE_PSD_OVERPASS_SINGLE, {
	LAYOUT_TEMPLATE_PSD_OVERPASS_BASE($@, {spritelayout_ground()})
	LAYOUT_TEMPLATE_PSD_OVERPASS_BASE($@, {spritelayout_ground_snow()})
})

define(LAYOUT_TEMPLATE_PSD_OVERPASS, {LAYOUT_TEMPLATE_MULTI({LAYOUT_TEMPLATE_PSD_OVERPASS_SINGLE}, $@)})

layout(PSD_OVERPASS_HP_A, LAYOUT_TEMPLATE_PSD_OVERPASS(PLT_TYPE_A, PLT_TYPE_HIGH))
layout(PSD_OVERPASS_HP_B, LAYOUT_TEMPLATE_PSD_OVERPASS(PLT_TYPE_B, PLT_TYPE_HIGH))
layout(PSD_OVERPASS_HP_C, LAYOUT_TEMPLATE_PSD_OVERPASS(PLT_TYPE_C, PLT_TYPE_HIGH))

layout(PSD_OVERPASS_HP_A_RF_A, LAYOUT_TEMPLATE_PSD_OVERPASS(PLT_TYPE_A, PLT_TYPE_HIGH, ROOF_TYPE_A))
layout(PSD_OVERPASS_HP_B_RF_A, LAYOUT_TEMPLATE_PSD_OVERPASS(PLT_TYPE_B, PLT_TYPE_HIGH, ROOF_TYPE_A))
layout(PSD_OVERPASS_HP_C_RF_A, LAYOUT_TEMPLATE_PSD_OVERPASS(PLT_TYPE_C, PLT_TYPE_HIGH, ROOF_TYPE_A))
layout(PSD_OVERPASS_HP_A_RF_B, LAYOUT_TEMPLATE_PSD_OVERPASS(PLT_TYPE_A, PLT_TYPE_HIGH, ROOF_TYPE_B))
layout(PSD_OVERPASS_HP_B_RF_B, LAYOUT_TEMPLATE_PSD_OVERPASS(PLT_TYPE_B, PLT_TYPE_HIGH, ROOF_TYPE_B))
layout(PSD_OVERPASS_HP_C_RF_B, LAYOUT_TEMPLATE_PSD_OVERPASS(PLT_TYPE_C, PLT_TYPE_HIGH, ROOF_TYPE_B))

// switches
def(40, sw_psd_overpass_cb) callback(
	ref(sw_overpass_platform_multi_layout) if(CB_LAYOUT)
	ref(sw_psd_animctrl) if(CB_ACONTROL)
	ref(sw_psd_animframe) if(CB_AFRAME)
	ref(sw_set_reg_psd) else
)

def(41, sw_psd_overpass_cb_purchase) callback(
	cbr(6) if(CB_LAYOUT)
	ref(sw_set_reg_psd_purchase) else
)

forloop(X, {makestation(X, link(ref(sw_psd_overpass_cb_purchase), MENU) default(ref(sw_psd_overpass_cb)))}, PSD_OVERPASS_START .. PSD_OVERPASS_END)


// psd + modular overpass
forloop(X, {
definestation(X, "",
	class(CLASS_PSD)
	callbacks({CB_LAYOUT, CB_AFRAME})
	anim_info({7, NOLOOP})
	anim_speed(3)
	setcargotriggers({PASS})
	anim_triggers({ARRIVE, LEAVE})
)}, PSD_MODULAR_START .. PSD_MODULAR_END)

// layouts
define(LAYOUT_TEMPLATE_PSD_MODULAR_OVERPASS_SINGLE, {
	define({tmp_modular_type}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	xtile({
		spritelayout_ground()
		ifelse($1, PLT_TYPE_NONE, {}, {platform_base($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), SHADOW_TRUE)})
		spritelayout_psd($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof)
		building_overpass_pole($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}))
		spritelayout_building_overpass(tmp_modular_type)
	})
})

define(LAYOUT_TEMPLATE_PSD_MODULAR_OVERPASS, {LAYOUT_TEMPLATE_MULTI({LAYOUT_TEMPLATE_PSD_MODULAR_OVERPASS_SINGLE}, $@)})

layout(PSD_MODULAR_LOW_HP_A, LAYOUT_TEMPLATE_PSD_MODULAR_OVERPASS(PLT_TYPE_A, PLT_TYPE_HIGH, MODULAR_TYPE_LOW))
layout(PSD_MODULAR_LOW_HP_B, LAYOUT_TEMPLATE_PSD_MODULAR_OVERPASS(PLT_TYPE_B, PLT_TYPE_HIGH, MODULAR_TYPE_LOW))
layout(PSD_MODULAR_LOW_HP_C, LAYOUT_TEMPLATE_PSD_MODULAR_OVERPASS(PLT_TYPE_C, PLT_TYPE_HIGH, MODULAR_TYPE_LOW))

layout(PSD_MODULAR_HIGH_HP_A, LAYOUT_TEMPLATE_PSD_MODULAR_OVERPASS(PLT_TYPE_A, PLT_TYPE_HIGH, MODULAR_TYPE_HIGH))
layout(PSD_MODULAR_HIGH_HP_B, LAYOUT_TEMPLATE_PSD_MODULAR_OVERPASS(PLT_TYPE_B, PLT_TYPE_HIGH, MODULAR_TYPE_HIGH))
layout(PSD_MODULAR_HIGH_HP_C, LAYOUT_TEMPLATE_PSD_MODULAR_OVERPASS(PLT_TYPE_C, PLT_TYPE_HIGH, MODULAR_TYPE_HIGH))

// switches
def(40, sw_psd_modular_cb) callback(
	ref(sw_modular_overpass_multi_layout) if(CB_LAYOUT)
	ref(sw_psd_animctrl) if(CB_ACONTROL)
	ref(sw_psd_animframe) if(CB_AFRAME)
	ref(sw_set_reg_psd) else
)

def(41, sw_psd_modular_cb_purchase) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_set_reg_psd_purchase) else
)

forloop(X, {makestation(X, link(ref(sw_psd_modular_cb_purchase), MENU) default(ref(sw_psd_modular_cb)))}, PSD_MODULAR_START .. PSD_MODULAR_END)


// psd + underpass
forloop(X, {
definestation(X, "",
	class(CLASS_PSD)
	callbacks({CB_LAYOUT, CB_AFRAME})
	anim_info({7, NOLOOP})
	anim_speed(3)
	anim_triggers({ARRIVE, LEAVE})
)}, PSD_UNDERPASS_START .. PSD_UNDERPASS_END)

// layouts
define(LAYOUT_TEMPLATE_PSD_UNDERPASS_BASE, {
	define({tmp_roof}, {ifelse($1, PLT_TYPE_MULTI, $4, $3)})
	define({tmp_ground}, {ifelse($1, PLT_TYPE_MULTI, $5, $4)})
	xtile({
		tmp_ground
		platform_base($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), eval(tmp_roof != ROOF_TYPE_NONE))
		spritelayout_fence($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}))
		spritelayout_underpass($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof)
		spritelayout_psd($1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}), tmp_roof)
		spritelayout_roof(tmp_roof, $1, ifelse($1, PLT_TYPE_MULTI, {$2, $3}, {$2}))
	})
})

define(LAYOUT_TEMPLATE_PSD_UNDERPASS_SINGLE, {
	LAYOUT_TEMPLATE_PSD_UNDERPASS_BASE($@, {spritelayout_ground()})
	LAYOUT_TEMPLATE_PSD_UNDERPASS_BASE($@, {spritelayout_ground_snow()})
})

define(LAYOUT_TEMPLATE_PSD_UNDERPASS, {LAYOUT_TEMPLATE_MULTI({LAYOUT_TEMPLATE_PSD_UNDERPASS_SINGLE}, $@)})

layout(PSD_UNDERPASS_HP_A_RF_A, LAYOUT_TEMPLATE_PSD_UNDERPASS(PLT_TYPE_A, PLT_TYPE_HIGH, ROOF_TYPE_A))
layout(PSD_UNDERPASS_HP_B_RF_A, LAYOUT_TEMPLATE_PSD_UNDERPASS(PLT_TYPE_B, PLT_TYPE_HIGH, ROOF_TYPE_A))
layout(PSD_UNDERPASS_HP_C_RF_A, LAYOUT_TEMPLATE_PSD_UNDERPASS(PLT_TYPE_C, PLT_TYPE_HIGH, ROOF_TYPE_A))
layout(PSD_UNDERPASS_HP_A_RF_B, LAYOUT_TEMPLATE_PSD_UNDERPASS(PLT_TYPE_A, PLT_TYPE_HIGH, ROOF_TYPE_B))
layout(PSD_UNDERPASS_HP_B_RF_B, LAYOUT_TEMPLATE_PSD_UNDERPASS(PLT_TYPE_B, PLT_TYPE_HIGH, ROOF_TYPE_B))
layout(PSD_UNDERPASS_HP_C_RF_B, LAYOUT_TEMPLATE_PSD_UNDERPASS(PLT_TYPE_C, PLT_TYPE_HIGH, ROOF_TYPE_B))

// switches
def(40, sw_psd_underpass_cb) callback(
	ref(sw_platform_multi_layout) if(CB_LAYOUT)
	ref(sw_psd_animctrl) if(CB_ACONTROL)
	ref(sw_psd_animframe) if(CB_AFRAME)
	ref(sw_set_reg_psd) else
)

def(41, sw_psd_underpass_cb_purchase) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_set_reg_psd_purchase) else
)

forloop(X, {makestation(X, link(ref(sw_psd_underpass_cb_purchase), MENU) default(ref(sw_psd_underpass_cb)))}, PSD_UNDERPASS_START .. PSD_UNDERPASS_END)