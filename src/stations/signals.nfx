// Signal waypoints

include(src/includes/constants.m4)
include(src/includes/functions.m4)

import(m4_sprite)

asl_on()

include(src/stations/switches.m4)
include(src/stations/layouts/layouts.m4)

setfeature(_STATION)

deflabel(LABEL_HIGHPLATFORM_MODE)


forloop(X, {
definestation(X, "",
	class(CLASS_WAYPOINT)
	callbacks({CB_LAYOUT})
)}, SIGNAL_START .. SIGNAL_END)

// layouts
define(LAYOUT_TEMPLATE_SIGNAL_FRONT, {
	xtile({
		spritelayout_ground()
		regular($1, xyz(12, 12, 0), dxdydz(2, 2, 4))
	})
	xtile({
		spritelayout_ground()
		regular($1, xyz(12, 4, 0), dxdydz(2, 2, 4))
	})
	xtile({
		spritelayout_ground_snow()
		regular($1, xyz(12, 12, 0), dxdydz(2, 2, 4))
	})
	xtile({
		spritelayout_ground_snow()
		regular($1, xyz(12, 4, 0), dxdydz(2, 2, 4))
	})
})

define(LAYOUT_TEMPLATE_SIGNAL_BACK, {
	xtile({
		spritelayout_ground()
		regular($1+2, xyz(2, 4, 0), dxdydz(2, 2, 4))
	})
	xtile({
		spritelayout_ground()
		regular($1+2, xyz(2, 12, 0), dxdydz(2, 2, 4))
	})
	xtile({
		spritelayout_ground_snow()
		regular($1+2, xyz(2, 4, 0), dxdydz(2, 2, 4))
	})
	xtile({
		spritelayout_ground_snow()
		regular($1+2, xyz(2, 12, 0), dxdydz(2, 2, 4))
	})
})

layout(SIGNAL_1A_A, LAYOUT_TEMPLATE_SIGNAL_FRONT(spr_signal_1A))
layout(SIGNAL_1A_B, LAYOUT_TEMPLATE_SIGNAL_BACK(spr_signal_1A))
layout(SIGNAL_1B_A, LAYOUT_TEMPLATE_SIGNAL_FRONT(spr_signal_1B))
layout(SIGNAL_1B_B, LAYOUT_TEMPLATE_SIGNAL_BACK(spr_signal_1B))
layout(SIGNAL_2_A, LAYOUT_TEMPLATE_SIGNAL_FRONT(spr_signal_2))
layout(SIGNAL_2_B, LAYOUT_TEMPLATE_SIGNAL_BACK(spr_signal_2))
layout(SIGNAL_3_A, LAYOUT_TEMPLATE_SIGNAL_FRONT(spr_signal_3))
layout(SIGNAL_3_B, LAYOUT_TEMPLATE_SIGNAL_BACK(spr_signal_3))
layout(SIGNAL_4_A, LAYOUT_TEMPLATE_SIGNAL_FRONT(spr_signal_4))
layout(SIGNAL_4_B, LAYOUT_TEMPLATE_SIGNAL_BACK(spr_signal_4))
layout(SIGNAL_5_A, LAYOUT_TEMPLATE_SIGNAL_FRONT(spr_signal_5))
layout(SIGNAL_5_B, LAYOUT_TEMPLATE_SIGNAL_BACK(spr_signal_5))
layout(SIGNAL_6_A, LAYOUT_TEMPLATE_SIGNAL_FRONT(spr_signal_6))
layout(SIGNAL_6_B, LAYOUT_TEMPLATE_SIGNAL_BACK(spr_signal_6))
layout(SIGNAL_7_A, LAYOUT_TEMPLATE_SIGNAL_FRONT(spr_signal_7))
layout(SIGNAL_7_B, LAYOUT_TEMPLATE_SIGNAL_BACK(spr_signal_7))
layout(SIGNAL_8_A, LAYOUT_TEMPLATE_SIGNAL_FRONT(spr_signal_8))
layout(SIGNAL_8_B, LAYOUT_TEMPLATE_SIGNAL_BACK(spr_signal_8))
layout(SIGNAL_9_A, LAYOUT_TEMPLATE_SIGNAL_FRONT(spr_signal_9))
layout(SIGNAL_9_B, LAYOUT_TEMPLATE_SIGNAL_BACK(spr_signal_9))
layout(SIGNAL_10_A, LAYOUT_TEMPLATE_SIGNAL_FRONT(spr_signal_10))
layout(SIGNAL_10_B, LAYOUT_TEMPLATE_SIGNAL_BACK(spr_signal_10))
layout(SIGNAL_11_A, LAYOUT_TEMPLATE_SIGNAL_FRONT(spr_signal_11))
layout(SIGNAL_11_B, LAYOUT_TEMPLATE_SIGNAL_BACK(spr_signal_11))
layout(SIGNAL_12_A, LAYOUT_TEMPLATE_SIGNAL_FRONT(spr_signal_12))
layout(SIGNAL_12_B, LAYOUT_TEMPLATE_SIGNAL_BACK(spr_signal_12))

// switches
def(40, sw_signal_side_left) plt_axis(
	cbr(0) if(0)
	cbr(2) else
)

def(41, sw_signal_side_right) plt_axis(
	cbr(2) if(0)
	cbr(0) else
)

def(42, sw_signal_side_driving) trafficside(
	ref(sw_signal_side_left) if(16)
	ref(sw_signal_side_right) else
)

def(43, sw_signal_side) getparameter(PARAM_SIGNAL_SIDE, 
	ref(sw_signal_side_left) if(PARAM_SIGNAL_SIDE_RIGHT)
	ref(sw_signal_side_right) if(PARAM_SIGNAL_SIDE_LEFT)
	ref(sw_signal_side_driving) else
)

def(44, sw_signal_layout) calculate({subroutine(sw_terrain_snow) * 4 + subroutine(sw_signal_side)},
	cbfail() else
)

def(45, sw_signal_cb) callback(
	ref(sw_signal_layout) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

def(46, sw_signal_cb_purchase) callback(
	cbr(0) if(CB_LAYOUT)
	ref(sw_set_registers) else
)

forloop(X, {makestation(X, link(ref(sw_signal_cb_purchase), MENU) default(ref(sw_signal_cb)))}, SIGNAL_START .. SIGNAL_END)